software/module1/cJSON.c
---
/*
  Copyright (c) 2009 Dave Gamble

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
*/

/* cJSON */
/* JSON parser in C. */

#include <string.h>
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <float.h>
#include <limits.h>
#include <ctype.h>
#include "cJSON.h"

static const char *ep;

const char *cJSON_GetErrorPtr(void) {return ep;}

static int cJSON_strcasecmp(const char *s1,const char *s2)
{
	if (!s1) return (s1==s2)?0:1;if (!s2) return 1;
	for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)	if(*s1 == 0)	return 0;
	return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
}

static void *(*cJSON_malloc)(size_t sz) = malloc;
static void (*cJSON_free)(void *ptr) = free;

static char* cJSON_strdup(const char* str)
{
      size_t len;
      char* copy;

      len = strlen(str) + 1;
      if (!(copy = (char*)cJSON_malloc(len))) return 0;
      memcpy(copy,str,len);
      return copy;
}

void cJSON_InitHooks(cJSON_Hooks* hooks)
{
    if (!hooks) { /* Reset hooks */
        cJSON_malloc = malloc;
        cJSON_free = free;
        return;
    }

	cJSON_malloc = (hooks->malloc_fn)?hooks->malloc_fn:malloc;
	cJSON_free	 = (hooks->free_fn)?hooks->free_fn:free;
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(void)
{
	cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
	if (node) memset(node,0,sizeof(cJSON));
	return node;
}

/* Delete a cJSON structure. */
void cJSON_Delete(cJSON *c)
{
	cJSON *next;
	while (c)
	{
		next=c->next;
		if (!(c->type&cJSON_IsReference) && c->child) cJSON_Delete(c->child);
		if (!(c->type&cJSON_IsReference) && c->valuestring) cJSON_free(c->valuestring);
		if (!(c->type&cJSON_StringIsConst) && c->string) cJSON_free(c->string);
		cJSON_free(c);
		c=next;
	}
}

/* Parse the input text to generate a number, and populate the result into item. */
static const char *parse_number(cJSON *item,const char *num)
{
	double n=0,sign=1,scale=0;int subscale=0,signsubscale=1;

	if (*num=='-') sign=-1,num++;	/* Has sign? */
	if (*num=='0') num++;			/* is zero */
	if (*num>='1' && *num<='9')	do	n=(n*10.0)+(*num++ -'0');	while (*num>='0' && *num<='9');	/* Number? */
	if (*num=='.' && num[1]>='0' && num[1]<='9') {num++;		do	n=(n*10.0)+(*num++ -'0'),scale--; while (*num>='0' && *num<='9');}	/* Fractional part? */
	if (*num=='e' || *num=='E')		/* Exponent? */
	{	num++;if (*num=='+') num++;	else if (*num=='-') signsubscale=-1,num++;		/* With sign? */
		while (*num>='0' && *num<='9') subscale=(subscale*10)+(*num++ - '0');	/* Number? */
	}

	n=sign*n*pow(10.0,(scale+subscale*signsubscale));	/* number = +/- number.fraction * 10^+/- exponent */
	
	item->valuedouble=n;
	item->valueint=(int)n;
	item->type=cJSON_Number;
	return num;
}

static int pow2gt (int x)	{	--x;	x|=x>>1;	x|=x>>2;	x|=x>>4;	x|=x>>8;	x|=x>>16;	return x+1;	}

typedef struct {char *buffer; int length; int offset; } printbuffer;

static char* ensure(printbuffer *p,int needed)
{
	char *newbuffer;int newsize;
	if (!p || !p->buffer) return 0;
	needed+=p->offset;
	if (needed<=p->length) return p->buffer+p->offset;

	newsize=pow2gt(needed);
	newbuffer=(char*)cJSON_malloc(newsize);
	if (!newbuffer) {cJSON_free(p->buffer);p->length=0,p->buffer=0;return 0;}
	if (newbuffer) memcpy(newbuffer,p->buffer,p->length);
	cJSON_free(p->buffer);
	p->length=newsize;
	p->buffer=newbuffer;
	return newbuffer+p->offset;
}

static int update(printbuffer *p)
{
	char *str;
	if (!p || !p->buffer) return 0;
	str=p->buffer+p->offset;
	return p->offset+strlen(str);
}

/* Render the number nicely from the given item into a string. */
static char *print_number(cJSON *item,printbuffer *p)
{
	char *str=0;
	double d=item->valuedouble;
	if (d==0)
	{
		if (p)	str=ensure(p,2);
		else	str=(char*)cJSON_malloc(2);	/* special case for 0. */
		if (str) strcpy(str,"0");
	}
	else if (fabs(((double)item->valueint)-d)<=DBL_EPSILON && d<=INT_MAX && d>=INT_MIN)
	{
		if (p)	str=ensure(p,21);
		else	str=(char*)cJSON_malloc(21);	/* 2^64+1 can be represented in 21 chars. */
		if (str)	sprintf(str,"%d",item->valueint);
	}
	else
	{
		if (p)	str=ensure(p,64);
		else	str=(char*)cJSON_malloc(64);	/* This is a nice tradeoff. */
		if (str)
		{
			if (fabs(floor(d)-d)<=DBL_EPSILON && fabs(d)<1.0e60)sprintf(str,"%.0f",d);
			else if (fabs(d)<1.0e-6 || fabs(d)>1.0e9)			sprintf(str,"%e",d);
			else												sprintf(str,"%f",d);
		}
	}
	return str;
}

static unsigned parse_hex4(const char *str)
{
	unsigned h=0;
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
	h=h<<4;str++;
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
	h=h<<4;str++;
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
	h=h<<4;str++;
	if (*str>='0' && *str<='9') h+=(*str)-'0'; else if (*str>='A' && *str<='F') h+=10+(*str)-'A'; else if (*str>='a' && *str<='f') h+=10+(*str)-'a'; else return 0;
	return h;
}

/* Parse the input text into an unescaped cstring, and populate item. */
static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };
static const char *parse_string(cJSON *item,const char *str)
{
	const char *ptr=str+1;char *ptr2;char *out;int len=0;unsigned uc,uc2;
	if (*str!='\"') {ep=str;return 0;}	/* not a string! */
	
	while (*ptr!='\"' && *ptr && ++len) if (*ptr++ == '\\') ptr++;	/* Skip escaped quotes. */
	
	out=(char*)cJSON_malloc(len+1);	/* This is how long we need for the string, roughly. */
	if (!out) return 0;
	
	ptr=str+1;ptr2=out;
	while (*ptr!='\"' && *ptr)
	{
		if (*ptr!='\\') *ptr2++=*ptr++;
		else
		{
			ptr++;
			switch (*ptr)
			{
				case 'b': *ptr2++='\b';	break;
				case 'f': *ptr2++='\f';	break;
				case 'n': *ptr2++='\n';	break;
				case 'r': *ptr2++='\r';	break;
				case 't': *ptr2++='\t';	break;
				case 'u':	 /* transcode utf16 to utf8. */
					uc=parse_hex4(ptr+1);ptr+=4;	/* get the unicode char. */

					if ((uc>=0xDC00 && uc<=0xDFFF) || uc==0)	break;	/* check for invalid.	*/

					if (uc>=0xD800 && uc<=0xDBFF)	/* UTF16 surrogate pairs.	*/
					{
						if (ptr[1]!='\\' || ptr[2]!='u')	break;	/* missing second-half of surrogate.	*/
						uc2=parse_hex4(ptr+3);ptr+=6;
						if (uc2<0xDC00 || uc2>0xDFFF)		break;	/* invalid second-half of surrogate.	*/
						uc=0x10000 + (((uc&0x3FF)<<10) | (uc2&0x3FF));
					}

					len=4;if (uc<0x80) len=1;else if (uc<0x800) len=2;else if (uc<0x10000) len=3; ptr2+=len;
					
					switch (len) {
						case 4: {
							*--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
							break;
						}
						case 3: {
							*--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
							break;
						}
						case 2: {
							*--ptr2 =((uc | 0x80) & 0xBF); uc >>= 6;
							break;
						}
						case 1: {
							*--ptr2 =(uc | firstByteMark[len]);
							break;
						}
					}
					ptr2+=len;
					break;
				default:  *ptr2++=*ptr; break;
			}
			ptr++;
		}
	}
	*ptr2=0;
	if (*ptr=='\"') ptr++;
	item->valuestring=out;
	item->type=cJSON_String;
	return ptr;
}

/* Render the cstring provided to an escaped version that can be printed. */
static char *print_string_ptr(const char *str,printbuffer *p)
{
	const char *ptr;char *ptr2,*out;int len=0,flag=0;unsigned char token;
	
	for (ptr=str;*ptr;ptr++) flag|=((*ptr>0 && *ptr<32)||(*ptr=='\"')||(*ptr=='\\'))?1:0;
	if (!flag)
	{
		len=ptr-str;
		if (p) out=ensure(p,len+3);
		else		out=(char*)cJSON_malloc(len+3);
		if (!out) return 0;
		ptr2=out;*ptr2++='\"';
		strcpy(ptr2,str);
		ptr2[len]='\"';
		ptr2[len+1]=0;
		return out;
	}
	
	if (!str)
	{
		if (p)	out=ensure(p,3);
		else	out=(char*)cJSON_malloc(3);
		if (!out) return 0;
		strcpy(out,"\"\"");
		return out;
	}
	ptr=str;while ((token=*ptr) && ++len) {if (strchr("\"\\\b\f\n\r\t",token)) len++; else if (token<32) len+=5;ptr++;}
	
	if (p)	out=ensure(p,len+3);
	else	out=(char*)cJSON_malloc(len+3);
	if (!out) return 0;

	ptr2=out;ptr=str;
	*ptr2++='\"';
	while (*ptr)
	{
		if ((unsigned char)*ptr>31 && *ptr!='\"' && *ptr!='\\') *ptr2++=*ptr++;
		else
		{
			*ptr2++='\\';
			switch (token=*ptr++)
			{
				case '\\':	*ptr2++='\\';	break;
				case '\"':	*ptr2++='\"';	break;
				case '\b':	*ptr2++='b';	break;
				case '\f':	*ptr2++='f';	break;
				case '\n':	*ptr2++='n';	break;
				case '\r':	*ptr2++='r';	break;
				case '\t':	*ptr2++='t';	break;
				default: sprintf(ptr2,"u%04x",token);ptr2+=5;	break;	/* escape and print */
			}
		}
	}
	*ptr2++='\"';*ptr2++=0;
	return out;
}
/* Invote print_string_ptr (which is useful) on an item. */
static char *print_string(cJSON *item,printbuffer *p)	{return print_string_ptr(item->valuestring,p);}

/* Predeclare these prototypes. */
static const char *parse_value(cJSON *item,const char *value);
static char *print_value(cJSON *item,int depth,int fmt,printbuffer *p);
static const char *parse_array(cJSON *item,const char *value);
static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p);
static const char *parse_object(cJSON *item,const char *value);
static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p);

/* Utility to jump whitespace and cr/lf */
static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}

/* Parse an object - create a new root, and populate. */
cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)
{
	const char *end=0;
	cJSON *c=cJSON_New_Item();
	ep=0;
	if (!c) return 0;       /* memory fail */

	end=parse_value(c,skip(value));
	if (!end)	{cJSON_Delete(c);return 0;}	/* parse failure. ep is set. */

	/* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
	if (require_null_terminated) {end=skip(end);if (*end) {cJSON_Delete(c);ep=end;return 0;}}
	if (return_parse_end) *return_parse_end=end;
	return c;
}
/* Default options for cJSON_Parse */
cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}

/* Render a cJSON item/entity/structure to text. */
char *cJSON_Print(cJSON *item)				{return print_value(item,0,1,0);}
char *cJSON_PrintUnformatted(cJSON *item)	{return print_value(item,0,0,0);}

char *cJSON_PrintBuffered(cJSON *item,int prebuffer,int fmt)
{
	printbuffer p;
	p.buffer=(char*)cJSON_malloc(prebuffer);
	p.length=prebuffer;
	p.offset=0;
	return print_value(item,0,fmt,&p);
	return p.buffer;
}


/* Parser core - when encountering text, process appropriately. */
static const char *parse_value(cJSON *item,const char *value)
{
	if (!value)						return 0;	/* Fail on null. */
	if (!strncmp(value,"null",4))	{ item->type=cJSON_NULL;  return value+4; }
	if (!strncmp(value,"false",5))	{ item->type=cJSON_False; return value+5; }
	if (!strncmp(value,"true",4))	{ item->type=cJSON_True; item->valueint=1;	return value+4; }
	if (*value=='\"')				{ return parse_string(item,value); }
	if (*value=='-' || (*value>='0' && *value<='9'))	{ return parse_number(item,value); }
	if (*value=='[')				{ return parse_array(item,value); }
	if (*value=='{')				{ return parse_object(item,value); }

	ep=value;return 0;	/* failure. */
}

/* Render a value to text. */
static char *print_value(cJSON *item,int depth,int fmt,printbuffer *p)
{
	char *out=0;
	if (!item) return 0;
	if (p)
	{
		switch ((item->type)&255)
		{
			case cJSON_NULL:	{out=ensure(p,5);	if (out) strcpy(out,"null");	break;}
			case cJSON_False:	{out=ensure(p,6);	if (out) strcpy(out,"false");	break;}
			case cJSON_True:	{out=ensure(p,5);	if (out) strcpy(out,"true");	break;}
			case cJSON_Number:	out=print_number(item,p);break;
			case cJSON_String:	out=print_string(item,p);break;
			case cJSON_Array:	out=print_array(item,depth,fmt,p);break;
			case cJSON_Object:	out=print_object(item,depth,fmt,p);break;
		}
	}
	else
	{
		switch ((item->type)&255)
		{
			case cJSON_NULL:	out=cJSON_strdup("null");	break;
			case cJSON_False:	out=cJSON_strdup("false");break;
			case cJSON_True:	out=cJSON_strdup("true"); break;
			case cJSON_Number:	out=print_number(item,0);break;
			case cJSON_String:	out=print_string(item,0);break;
			case cJSON_Array:	out=print_array(item,depth,fmt,0);break;
			case cJSON_Object:	out=print_object(item,depth,fmt,0);break;
		}
	}
	return out;
}

/* Build an array from input text. */
static const char *parse_array(cJSON *item,const char *value)
{
	cJSON *child;
	if (*value!='[')	{ep=value;return 0;}	/* not an array! */

	item->type=cJSON_Array;
	value=skip(value+1);
	if (*value==']') return value+1;	/* empty array. */

	item->child=child=cJSON_New_Item();
	if (!item->child) return 0;		 /* memory fail */
	value=skip(parse_value(child,skip(value)));	/* skip any spacing, get the value. */
	if (!value) return 0;

	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item())) return 0; 	/* memory fail */
		child->next=new_item;new_item->prev=child;child=new_item;
		value=skip(parse_value(child,skip(value+1)));
		if (!value) return 0;	/* memory fail */
	}

	if (*value==']') return value+1;	/* end of array */
	ep=value;return 0;	/* malformed. */
}

/* Render an array to text */
static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p)
{
	char **entries;
	char *out=0,*ptr,*ret;int len=5;
	cJSON *child=item->child;
	int numentries=0,i=0,fail=0;
	size_t tmplen=0;
	
	/* How many entries in the array? */
	while (child) numentries++,child=child->next;
	/* Explicitly handle numentries==0 */
	if (!numentries)
	{
		if (p)	out=ensure(p,3);
		else	out=(char*)cJSON_malloc(3);
		if (out) strcpy(out,"[]");
		return out;
	}

	if (p)
	{
		/* Compose the output array. */
		i=p->offset;
		ptr=ensure(p,1);if (!ptr) return 0;	*ptr='[';	p->offset++;
		child=item->child;
		while (child && !fail)
		{
			print_value(child,depth+1,fmt,p);
			p->offset=update(p);
			if (child->next) {len=fmt?2:1;ptr=ensure(p,len+1);if (!ptr) return 0;*ptr++=',';if(fmt)*ptr++=' ';*ptr=0;p->offset+=len;}
			child=child->next;
		}
		ptr=ensure(p,2);if (!ptr) return 0;	*ptr++=']';*ptr=0;
		out=(p->buffer)+i;
	}
	else
	{
		/* Allocate an array to hold the values for each */
		entries=(char**)cJSON_malloc(numentries*sizeof(char*));
		if (!entries) return 0;
		memset(entries,0,numentries*sizeof(char*));
		/* Retrieve all the results: */
		child=item->child;
		while (child && !fail)
		{
			ret=print_value(child,depth+1,fmt,0);
			entries[i++]=ret;
			if (ret) len+=strlen(ret)+2+(fmt?1:0); else fail=1;
			child=child->next;
		}
		
		/* If we didn't fail, try to malloc the output string */
		if (!fail)	out=(char*)cJSON_malloc(len);
		/* If that fails, we fail. */
		if (!out) fail=1;

		/* Handle failure. */
		if (fail)
		{
			for (i=0;i<numentries;i++) if (entries[i]) cJSON_free(entries[i]);
			cJSON_free(entries);
			return 0;
		}
		
		/* Compose the output array. */
		*out='[';
		ptr=out+1;*ptr=0;
		for (i=0;i<numentries;i++)
		{
			tmplen=strlen(entries[i]);memcpy(ptr,entries[i],tmplen);ptr+=tmplen;
			if (i!=numentries-1) {*ptr++=',';if(fmt)*ptr++=' ';*ptr=0;}
			cJSON_free(entries[i]);
		}
		cJSON_free(entries);
		*ptr++=']';*ptr++=0;
	}
	return out;	
}

/* Build an object from the text. */
static const char *parse_object(cJSON *item,const char *value)
{
	cJSON *child;
	if (*value!='{')	{ep=value;return 0;}	/* not an object! */
	
	item->type=cJSON_Object;
	value=skip(value+1);
	if (*value=='}') return value+1;	/* empty array. */
	
	item->child=child=cJSON_New_Item();
	if (!item->child) return 0;
	value=skip(parse_string(child,skip(value)));
	if (!value) return 0;
	child->string=child->valuestring;child->valuestring=0;
	if (*value!=':') {ep=value;return 0;}	/* fail! */
	value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
	if (!value) return 0;
	
	while (*value==',')
	{
		cJSON *new_item;
		if (!(new_item=cJSON_New_Item()))	return 0; /* memory fail */
		child->next=new_item;new_item->prev=child;child=new_item;
		value=skip(parse_string(child,skip(value+1)));
		if (!value) return 0;
		child->string=child->valuestring;child->valuestring=0;
		if (*value!=':') {ep=value;return 0;}	/* fail! */
		value=skip(parse_value(child,skip(value+1)));	/* skip any spacing, get the value. */
		if (!value) return 0;
	}
	
	if (*value=='}') return value+1;	/* end of array */
	ep=value;return 0;	/* malformed. */
}

/* Render an object to text. */
static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p)
{
	char **entries=0,**names=0;
	char *out=0,*ptr,*ret,*str;int len=7,i=0,j;
	cJSON *child=item->child;
	int numentries=0,fail=0;
	size_t tmplen=0;
	/* Count the number of entries. */
	while (child) numentries++,child=child->next;
	/* Explicitly handle empty object case */
	if (!numentries)
	{
		if (p) out=ensure(p,fmt?depth+4:3);
		else	out=(char*)cJSON_malloc(fmt?depth+4:3);
		if (!out)	return 0;
		ptr=out;*ptr++='{';
		if (fmt) {*ptr++='\n';for (i=0;i<depth-1;i++) *ptr++='\t';}
		*ptr++='}';*ptr++=0;
		return out;
	}
	if (p)
	{
		/* Compose the output: */
		i=p->offset;
		len=fmt?2:1;	ptr=ensure(p,len+1);	if (!ptr) return 0;
		*ptr++='{';	if (fmt) *ptr++='\n';	*ptr=0;	p->offset+=len;
		child=item->child;depth++;
		while (child)
		{
			if (fmt)
			{
				ptr=ensure(p,depth);	if (!ptr) return 0;
				for (j=0;j<depth;j++) *ptr++='\t';
				p->offset+=depth;
			}
			print_string_ptr(child->string,p);
			p->offset=update(p);
			
			len=fmt?2:1;
			ptr=ensure(p,len);	if (!ptr) return 0;
			*ptr++=':';if (fmt) *ptr++='\t';
			p->offset+=len;
			
			print_value(child,depth,fmt,p);
			p->offset=update(p);

			len=(fmt?1:0)+(child->next?1:0);
			ptr=ensure(p,len+1); if (!ptr) return 0;
			if (child->next) *ptr++=',';
			if (fmt) *ptr++='\n';*ptr=0;
			p->offset+=len;
			child=child->next;
		}
		ptr=ensure(p,fmt?(depth+1):2);	 if (!ptr) return 0;
		if (fmt)	for (i=0;i<depth-1;i++) *ptr++='\t';
		*ptr++='}';*ptr=0;
		out=(p->buffer)+i;
	}
	else
	{
		/* Allocate space for the names and the objects */
		entries=(char**)cJSON_malloc(numentries*sizeof(char*));
		if (!entries) return 0;
		names=(char**)cJSON_malloc(numentries*sizeof(char*));
		if (!names) {cJSON_free(entries);return 0;}
		memset(entries,0,sizeof(char*)*numentries);
		memset(names,0,sizeof(char*)*numentries);

		/* Collect all the results into our arrays: */
		child=item->child;depth++;if (fmt) len+=depth;
		while (child)
		{
			names[i]=str=print_string_ptr(child->string,0);
			entries[i++]=ret=print_value(child,depth,fmt,0);
			if (str && ret) len+=strlen(ret)+strlen(str)+2+(fmt?2+depth:0); else fail=1;
			child=child->next;
		}
		
		/* Try to allocate the output string */
		if (!fail)	out=(char*)cJSON_malloc(len);
		if (!out) fail=1;

		/* Handle failure */
		if (fail)
		{
			for (i=0;i<numentries;i++) {if (names[i]) cJSON_free(names[i]);if (entries[i]) cJSON_free(entries[i]);}
			cJSON_free(names);cJSON_free(entries);
			return 0;
		}
		
		/* Compose the output: */
		*out='{';ptr=out+1;if (fmt)*ptr++='\n';*ptr=0;
		for (i=0;i<numentries;i++)
		{
			if (fmt) for (j=0;j<depth;j++) *ptr++='\t';
			tmplen=strlen(names[i]);memcpy(ptr,names[i],tmplen);ptr+=tmplen;
			*ptr++=':';if (fmt) *ptr++='\t';
			strcpy(ptr,entries[i]);ptr+=strlen(entries[i]);
			if (i!=numentries-1) *ptr++=',';
			if (fmt) *ptr++='\n';*ptr=0;
			cJSON_free(names[i]);cJSON_free(entries[i]);
		}
		
		cJSON_free(names);cJSON_free(entries);
		if (fmt) for (i=0;i<depth-1;i++) *ptr++='\t';
		*ptr++='}';*ptr++=0;
	}
	return out;	
}

/* Get Array size/item / object item. */
int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}
cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}
cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev,cJSON *item) {prev->next=item;item->prev=prev;}
/* Utility for handling references. */
static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(ref,item,sizeof(cJSON));ref->string=0;ref->type|=cJSON_IsReference;ref->next=ref->prev=0;return ref;}

/* Add item to array/object. */
void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}
void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}
void   cJSON_AddItemToObjectCS(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (!(item->type&cJSON_StringIsConst) && item->string) cJSON_free(item->string);item->string=(char*)string;item->type|=cJSON_StringIsConst;cJSON_AddItemToArray(object,item);}
void	cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)						{cJSON_AddItemToArray(array,create_reference(item));}
void	cJSON_AddItemReferenceToObject(cJSON *object,const char *string,cJSON *item)	{cJSON_AddItemToObject(object,string,create_reference(item));}

cJSON *cJSON_DetachItemFromArray(cJSON *array,int which)			{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return 0;
	if (c->prev) c->prev->next=c->next;if (c->next) c->next->prev=c->prev;if (c==array->child) array->child=c->next;c->prev=c->next=0;return c;}
void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}
cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}
void   cJSON_DeleteItemFromObject(cJSON *object,const char *string) {cJSON_Delete(cJSON_DetachItemFromObject(object,string));}

/* Replace array/object items with new ones. */
void   cJSON_InsertItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) {cJSON_AddItemToArray(array,newitem);return;}
	newitem->next=c;newitem->prev=c->prev;c->prev=newitem;if (c==array->child) array->child=newitem; else newitem->prev->next=newitem;}
void   cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return;
	newitem->next=c->next;newitem->prev=c->prev;if (newitem->next) newitem->next->prev=newitem;
	if (c==array->child) array->child=newitem; else newitem->prev->next=newitem;c->next=c->prev=0;cJSON_Delete(c);}
void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}

/* Create basic types: */
cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}
cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}
cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}
cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}
cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}
cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}
cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}
cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}

/* Create Arrays: */
cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}
cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}

/* Duplication */
cJSON *cJSON_Duplicate(cJSON *item,int recurse)
{
	cJSON *newitem,*cptr,*nptr=0,*newchild;
	/* Bail on bad ptr */
	if (!item) return 0;
	/* Create new item */
	newitem=cJSON_New_Item();
	if (!newitem) return 0;
	/* Copy over all vars */
	newitem->type=item->type&(~cJSON_IsReference),newitem->valueint=item->valueint,newitem->valuedouble=item->valuedouble;
	if (item->valuestring)	{newitem->valuestring=cJSON_strdup(item->valuestring);	if (!newitem->valuestring)	{cJSON_Delete(newitem);return 0;}}
	if (item->string)		{newitem->string=cJSON_strdup(item->string);			if (!newitem->string)		{cJSON_Delete(newitem);return 0;}}
	/* If non-recursive, then we're done! */
	if (!recurse) return newitem;
	/* Walk the ->next chain for the child. */
	cptr=item->child;
	while (cptr)
	{
		newchild=cJSON_Duplicate(cptr,1);		/* Duplicate (with recurse) each item in the ->next chain */
		if (!newchild) {cJSON_Delete(newitem);return 0;}
		if (nptr)	{nptr->next=newchild,newchild->prev=nptr;nptr=newchild;}	/* If newitem->child already set, then crosswire ->prev and ->next and move on */
		else		{newitem->child=newchild;nptr=newchild;}					/* Set newitem->child and move to it */
		cptr=cptr->next;
	}
	return newitem;
}

void cJSON_Minify(char *json)
{
	char *into=json;
	while (*json)
	{
		if (*json==' ') json++;
		else if (*json=='\t') json++;	/* Whitespace characters. */
		else if (*json=='\r') json++;
		else if (*json=='\n') json++;
		else if (*json=='/' && json[1]=='/')  while (*json && *json!='\n') json++;	/* double-slash comments, to end of line. */
		else if (*json=='/' && json[1]=='*') {while (*json && !(*json=='*' && json[1]=='/')) json++;json+=2;}	/* multiline comments. */
		else if (*json=='\"'){*into++=*json++;while (*json && *json!='\"'){if (*json=='\\') *into++=*json++;*into++=*json++;}*into++=*json++;} /* string literals, which are \" sensitive. */
		else *into++=*json++;			/* All other characters. */
	}
	*into=0;	/* and null-terminate. */
}

software/module1/conversion.c
---
/*
 * conversion.c
 *
 *  Created on: 2016-02-06
 *      Author: Kyle
 */

#include "conversion.h"
#include "graphics.h" //for XRES/YRES and MENU_TOP
#include "gps_points.h"

#include <math.h>
#include <stdlib.h>

/*
 * Assumes field is in line with lat/long. Converts global array of gps_points to array of GPSPoint scaled to screen pixels.
 * Callocs the returned pointer. Calling function needs to deal with free()'ing
 */
GPSPoint* convertGPSPoints( int nPoints ){
	GPSPoint* points = calloc(nPoints, sizeof(GPSPoint));

	double mX = (double) XRES / (TOPRIGHTLONG - TOPLEFTLONG); //Using two linear functions f(x) = mx + b so these are the m's
	double mY = (double) MENU_TOP / (TOPRIGHTLAT - BOTRIGHTLAT);

	int i;
	for(i = 0; i < nPoints; i++){
		points[i].x = mX * (gps_points[i].long_float - TOPLEFTLONG);
		points[i].y = MENU_TOP - (mY * (gps_points[i].lat_float - BOTRIGHTLAT));

		//Following if statements are for rounding
		if(points[i].x > XRES && points[i].x < XRES + 1){
			points[i].x = XRES;
		}
		if(points[i].y > MENU_TOP && points[i].y < MENU_TOP + 1){
			points[i].y = MENU_TOP;
		}
	}

	return points;
}

/*
 * Converts GPSpoints to points for graphics. Does NOT take care of ALL points outside of range. Only works for topRight in quadrant 4
 * relative to topLeft. Needs to be tested.
 *
 * NOT USED DUE TO REQUIRING EXACTLY 90 DEGREE ANGLE AT CORNERS OF FIELD, INCLUDED FOR FUTURE USE (in more realistic version)
 *
 * Just does the basic trig for a 2D rotation
 */
void convertGPSReal( GPSPoint topLeft, GPSPoint topRight, GPSPoint points[], GPSPoint bottomLeft, int nPoints ){
	double theta = -atan((topRight.y - topLeft.y)/(topRight.x - topLeft.x));

	int i;
	for(i = 0; i < nPoints; i++){
		float oldY = points[i].y - topLeft.y;
		points[i].y = topLeft.y + oldY*cos(theta) + (points[i].x - topLeft.x)*sin(theta);
		points[i].x = topLeft.x + (points[i].x - topLeft.x)*cos(theta) - oldY*sin(theta);
	}

	float oldY = bottomLeft.y - topLeft.y;
	bottomLeft.y = topLeft.y + oldY*cos(theta) + (bottomLeft.x - topLeft.x)*sin(theta);
	bottomLeft.x = topLeft.x + (bottomLeft.x - topLeft.x)*cos(theta) - oldY*sin(theta);

	oldY = topRight.y - topLeft.y;
	topRight.y = topLeft.y + oldY*cos(theta) + (topRight.x - topLeft.x)*sin(theta);
	topRight.x = topLeft.x + (topRight.x - topLeft.x)*cos(theta) - oldY*sin(theta);

	double mX = XRES / (double) (topRight.x - topLeft.x);
	double mY = YRES / (double) (topRight.y - bottomLeft.y);

	int k;
	for( k = 0; k < nPoints; k++){
		points[k].x = mX * (points[k].x - topLeft.x);
		points[k].y = mY * (points[k].y - bottomLeft.y);

		if(points[k].x < 0 && points[k].x > -1){
			points[k].x = 0;
		}else if(points[k].x > XRES && points[k].x < XRES + 1){
			points[k].x = XRES;
		}

		if(points[k].y < 0 && points[k].y > -1){
					points[k].y = 0;
		}else if(points[k].y > YRES && points[k].y < YRES + 1){
			points[k].y = YRES;
		}
	}

	topRight.x = mX * (topRight.x - topLeft.x);//should eval to XRES
	topRight.y = mY * (topRight.y - bottomLeft.y);//should eval to YRES

	topLeft.x = mX * (topLeft.x - topLeft.x);//should eval to 0
	topLeft.y = mY * (topLeft.y - bottomLeft.y);//should eval to YRES

	bottomLeft.x = mX * (bottomLeft.x - topLeft.x);//should eval to XRES
	bottomLeft.y = mY * (bottomLeft.y - bottomLeft.y);//should eval to 0
}

software/module1/datasets.c
---
/*
 * datasets.c
 *
 * Functions for GPS data (mapped to screen pixels) representing a path
 *
 */

#include "datasets.h"
#include "gps_points.h"
#include "sd_card.h"

/*
 * Copy the data from the slot with the given index in datasets
 * to workingDataSet
 */
void load_into_workingDataSet(int index) {
	//for the slot with the given index
	dataSet *copyFromSet = &(localData.dataSets[index]);

	//copy the data
	int size = copyFromSet->size;
	localData.workingDataSet.size = size;
	int i;
	for(i = 0; i < size; i++) {
		localData.workingDataSet.points[i].x = copyFromSet->points[i].x;
		localData.workingDataSet.points[i].y = copyFromSet->points[i].y;
	}
}

/*
 * Copy the data from the workingDataSet to the slot with the
 * given index in datasets
 */
void save_from_workingDataSet(int index) {
	//to the slot with the given index
	dataSet *copyToSet = &localData.dataSets[index];

	//copy the data
	int size = localData.workingDataSet.size;
	copyToSet->size = size;
	int i;
	for(i = 0; i < size; i++) {
		copyToSet->points[i].x = localData.workingDataSet.points[i].x;
		copyToSet->points[i].y = localData.workingDataSet.points[i].y;
	}

	//TODO test this
	save_to_SD_from_dataSets();

	// DEBUG
	printf("exiting from save_from_workingDataSet\n");
}

/*
 * On start up, copy the data from the GPS to the workingDataSet
 * to display the GPS data immediately
 */
void loadgps_workingDataSet(){
	GPSPoint* screen_points;

	screen_points = convertGPSPoints(70);

	GPSPoint *workingDataPoints = localData.workingDataSet.points;

	int j;
	for( j = 0; j < 70; j++ ){
		workingDataPoints[j].x = screen_points[j].x;
		workingDataPoints[j].y = screen_points[j].y;
	}

	free(screen_points); // free the calloc'd address space from convertGPSPoints

	localData.workingDataSet.size = 70;
}

/*
 * Load SD card contents to localData.dataSets
 */
void load_from_SD_to_dataSets() {
	//TODO check return value of below call
	sd_card_load(localData.dataSets, MAX_N_SETS, FILENAME);
}

/*
 * Save localData.dataSets to file FILENAME on SD card
 */
void save_to_SD_from_dataSets() {
	//TODO check return value of below call

	// DEBUG
	printf("entering save_to_SD_from_dataSets\n");

	sd_card_save(localData.dataSets, MAX_N_SETS, FILENAME);

	// DEBUG
	printf("finished sd_card_save\n");

	char teststr[JSON_DATA_MAX_LEN] = "";
	sd_card_cJSON_stringify(localData.dataSets, MAX_N_SETS, teststr);

	// DEBUG
	printf("exiting from save_to_SD_from_dataSets\n");
}

software/module1/fill.c
---
#include "graphics.h"

// data structure to store a coordinate

typedef struct { int x,y;} XYPixel ;

// an array of coordinates and a pointer to first

XYPixel XYStack[1000], *Next = &XYStack[0];


/*****************************************************************************************************************************
* simple stack based around an array
* Used for FILL algorithm
******************************************************************************************************************************/

int PushPixel(XYPixel p1)
{
    if(Next <= &XYStack[1000]) {
        *Next++ = p1;
        return 0 ;
    }
    else
        return -1 ;
}

int PopPixel(XYPixel *theXYPixel)
{
    if(Next >= XYStack) {
        *theXYPixel = *(--Next);
        return 0 ;
    }
    else
        return -1 ;
}

int IsStackEmpty(void)
{
    if(Next == XYStack)
        return 1 ;
    else
        return 0 ;
}

/********************************************************************************************
** Implementation of a Scan Line Seed Fill Algorithm
** Taken from Procedural Elements of Computer Graphics: David Rogers
********************************************************************************************/
void Fill(int _x, int _y, int _FillColour, int _BoundaryColour)
{
    register int     x, y ;
    register int     BoundaryColour = _BoundaryColour;
    register int 	 PixelColour, FillColour = _FillColour ;

    int     XRight, XLeft ;
    int     SaveX, SaveY ;      		// temp variable
    XYPixel aPoint, aPoint1 ;           // temp var

    Next = XYStack ;                    // initialise to start of stack
    aPoint.x = _x ;
    aPoint.y = _y ;

    PushPixel(aPoint) ;                   // push the seed

    while(!IsStackEmpty())                 // keep going until no more items on the stack
    {
        PopPixel(&aPoint) ;                 // get a point from the stack
        x = aPoint.x ;
        y = aPoint.y ;
        WriteAPixel(x, y, FillColour);     // fill the point in the fill colour

        // fill the span to the right of the seed value
        SaveX = x++ ;                  // save the x coord of the the point we just filled and move one pixel right

        while((char)(ReadAPixel(x,y)) != (char)(BoundaryColour))							// if new pixel is not the boundary colour
            WriteAPixel(x++, y, FillColour);     											// fill it and keep moving right along a horizontal line

        // must have found the boundary colour when moving right
        XRight = x - 1 ;		// save X coord of the last filled pixel on this line when moving right
        x = SaveX ;				// get the original starting x back

        // now fill the span to the left of the seed value

        --x ;

        while((char)(ReadAPixel(x,y)) != (char)(BoundaryColour))						// if new pixel is not the boundary colour
            WriteAPixel(x--, y, FillColour);    											// fill it and keep moving left along a horizontal line

        XLeft = x + 1 ;			// save X coord of the last filled pixel on this line when moving left
        x = SaveX ; 			// get original x coord for the seed back

		///////////////////////////////////////////////////////////////////////////////////////////////////
        // check that the scan line below is neither a polygon boundary nor
        // has been previously completely filled
        //////////////////////////////////////////////////////////////////////////////////////////////////

        SaveY = y ;			// save the current y coordinate of the line we have just drawn
        x = XLeft ;			// starting at the left x
        ++y ;				// move down one line

		// starting from the left keep moving right looking at the pixel
        // until we find something that is neither filled nor boundary colour as it represents something on the line that may be a pixel to fill

        do {
        	PixelColour = ReadAPixel(x++,y) ;
        } while(((char)(PixelColour) == (char)(BoundaryColour)) || ((char)(PixelColour) == (char)(FillColour)) );

         x-- ;

        // to get here we must have found something that needs filling i.e. the above loop found that the line below was not a complete boundary edge or filled
		// if we are still less than the previous right most X coord then it would be a new point that we need to seed
        while(x < XRight)
        {
            // seed the scan line below
        	// if the pixel at x,y is not a boundary colour and less than extreme right

        	// skip over any pixels already filled
            while(((char)(ReadAPixel(x,y)) != (char)(BoundaryColour)) && (x < XRight))
               ++x ;

            // push the  extreme right pixel onto the stack
            aPoint1.x = x - 1 ;
            aPoint1.y = y ;
            PushPixel(aPoint1) ;

            // continue checking in case the span is interrupted by another shape inside the one we are trying to fill

            ++x ;

            // skip over anything that is filled or boundary (i.e. other shape) inside the one we are trying to fill
            do {
            	PixelColour = ReadAPixel(x++,y) ;
            } while(((char)(PixelColour) == (char)(BoundaryColour)) || ((char)(PixelColour) == (char)(FillColour)) );

             x-- ;
        }
      	x = SaveX ;
       	y = SaveY ;

	 ///////////////////////////////////////////////////////////////////////////////////////////////////
    // check that the scan line above is neither a polygon boundary nor
    // has been previously completely filled

        y = SaveY;
        x = XLeft ;
        --y ;

        do {
        	PixelColour = ReadAPixel(x++,y) ;
        } while(((char)(PixelColour) == (char)(BoundaryColour)) || ((char)(PixelColour) == (char)(FillColour)) );

         x-- ;

        while(x < XRight)		// if we have not reached the boundary
        {
            // seed the scan line below
            while(((char)(ReadAPixel(x,y)) != (char)(BoundaryColour)) && (x < XRight))
               ++x ;		// look for right most x inside the boudan

            // push the  extreme right pixel onto the stack
            aPoint1.x = x - 1 ;
            aPoint1.y = y ;
            PushPixel(aPoint1) ;

            // continue checking in case the span is interrupted
            ++x ;

            do {
            	PixelColour = ReadAPixel(x++,y) ;
            } while(((char)(PixelColour) == (char)(BoundaryColour)) || ((char)(PixelColour) == (char)(FillColour)) );

             x-- ;
        }
       	x = SaveX ;
       	y = SaveY ;
    }
}

software/module1/fonts.c
---
//
// This file contains data for five different fonts
// The first 2 represent a simple 5x7 and 10x14 font
// the files OutGraphicsCharFont1.c and OutGraphicsCharFont2.c allow you to draw
// characters from these two fonts at any x,y pixel coord on the screen in the range [0,0] to [800,480]
//
// The data for the remaining 3 fonts, Font16x27, Font22x40 and Font38x59 are given below
// but you will have to write your own routines to draw these (based on the example for the first 2 fonts)
//
// These last 3 fonts above were created with http://www.eran.io/the-dot-factory-an-lcd-font-and-image-generator
// you could use this to create new fonts if you wish but be aware of the size of each font in terms of data
//

const unsigned char Font5x7[95][7] = {
								{0x0,0x0,0x0,0x0,0x0,0x0,0x0},	 		// ' '
								{0x4,0x4,0x4,0x4,0x0,0x0,0x4}, 			// '!'
								{0xa,0xa,0xa,0x0,0x0,0x0,0x0}, 			// '"'
								{0xa,0xa,0x1f,0xa,0x1f,0xa,0xa}, 		// '#'
								{0x4,0xf,0x14,0xe,0x5,0x1e,0x4}, 		// '$'
								{0x18,0x19,0x2,0x4,0x8,0x13,0x13}, 		// '%'
								{0xc,0x12,0x14,0x8,0x15,0x12,0xd}, 		// '&'
								{0xc,0x4,0x8,0x0,0x0,0x0,0x0}, 			// '''
								{0x1,0x2,0x4,0x4,0x4,0x2,0x1}, 			// '('
								{0x8,0x4,0x2,0x2,0x2,0x4,0x8},			// ')'
								{0x0,0x4,0x15,0xe,0x15,0x4,0x0}, 		// '*'
								{0x0,0x4,0x4,0x1f,0x4,0x4,0x0}, 		// '+'
								{0x0,0x0,0x0,0x0,0xc,0x4,0x8}, 			// ','
								{0x0,0x0,0x0,0x1f,0x0,0x0,0x0},			// '-'
								{0,0,0,0,0,0x6,0x6}, 					// '.'
								{0,0x1,0x2,0x4,0x8,0x10,0}, 			// '/'

								{0xe,0x11,0x13,0x15,0x19,0x11,0xe},	 	// '0'
								{0x4,0xc,0x4,0x4,0x4,0x4,0xe},		 	// '1'
								{0xe,0x11,0x1,0x2,0x4,0x8,0x1f}, 		// '2'
								{0x1f,0x2,0x4,0x2,0x1,0x11,0xe},	 	// '3'
								{0x2,0x6,0xa,0x12,0x1f,0x2,0x2}, 		// '4'
								{0x1f,0x10,0x1e,0x1,0x1,0x11,0xe}, 		// '5'
								{0x6,0x8,0x10,0x1e,0x11,0x11,0xe},	 	// '6'
								{0x1f,0x1,0x2,0x4,0x8,0x8,0x8},		 	// '7'
								{0xe,0x11,0x11,0xe,0x11,0x11,0xe},	 	// '8'
								{0xe,0x11,0x11,0xe,0x1,0x2,0xc},		// '9'
								{0x0,0xc,0xc,0x0,0xc,0xc,0x0}, 			// ':'
								{0x0,0xc,0xc,0x0,0xc,0x4,0x8},		 	// ';'
								{0x2,0x4,0x8,0x10,0x8,0x4,0x2},		 	// '<'
								{0x0,0x0,0x1f,0x0,0x1f,0x0,0x0},		// '='
								{0x8,0x4,0x2,0x1,0x2,0x4,0x8}, 			// '>'
								{0xe,0x11,0x1,0x2,0x4,0x0,0x4}, 		// '?'

								{0xe,0x11,0x1,0xd,0x15,0x15,0xe},	 	// '@'
								{0xe,0x11,0x11,0x1f,0x11,0x11,0x11}, 	// 'A'
								{0x1e,0x11,0x11,0x1e,0x11,0x11,0x1e}, 	// 'B'
								{0xe,0x11,0x10,0x10,0x10,0x11,0xe}, 	// 'C'
								{0x1c,0x12,0x11,0x11,0x11,0x12,0x1c}, 	// 'D'
								{0x1f,0x10,0x10,0x1e,0x10,0x10,0x1f}, 	// 'E'
								{0x1f,0x10,0x10,0x1e,0x10,0x10,0x10}, 	// 'F'
								{0xe,0x11,0x10,0x17,0x11,0x11,0xe}, 	// 'G'
								{0x11,0x11,0x11,0x1f,0x11,0x11,0x11}, 	// 'H'
								{0x1f,0x4,0x4,0x4,0x4,0x4,0x1f},		// 'I'
								{0xf,0x2,0x2,0x2,0x2,0x12,0xc}, 		// 'J'
								{0x11,0x12,0x14,0x18,0x14,0x12,0x11}, 	// 'K'
								{0x10,0x10,0x10,0x10,0x10,0x10,0x1F}, 	// 'L'
								{0x11,0x1B,0x15,0x15,0x11,0x11,0x11},	// 'M'
								{0x11,0x11,0x19,0x15,0x13,0x11,0x11}, 	// 'N'
								{0xe,0x11,0x11,0x11,0x11,0x11,0xe}, 	// 'O'
								{0x1e,0x11,0x11,0x1e,0x10,0x10,0x10}, 	// 'P'
								{0xe,0x11,0x11,0x11,0x15,0x12,0xd}, 	// 'Q'
								{0x1e,0x11,0x11,0x1e,0x14,0x12,0x11}, 	// 'R'
								{0xf,0x10,0x10,0xe,0x1,0x1,0x1e}, 		// 'S'
								{0x1f,0x4,0x4,0x4,0x4,0x4,0x4},		 	// 'T'
								{0x11,0x11,0x11,0x11,0x11,0x11,0xe}, 	// 'U'
								{0x11,0x11,0x11,0x11,0x11,0xa,0x4},		// 'V'
								{0x11,0x11,0x11,0x11,0x15,0x15,0xa},	// 'W'
								{0x11,0x11,0xa,0x4,0xa,0x11,0x11},	 	// 'X'
								{0x11,0x11,0x11,0xa,0x4,0x4,0x4},	 	// 'Y'
								{0x1f,0x1,0x2,0x4,0x8,0x10,0x1f},		// 'Z'
								{0xe,8,8,8,8,8,0xe},	 				// '['
								{0,0x10,0x8,0x4,0x2,0x1,0},			 	// '\'
								{0xe,0x2,0x2,0x2,0x2,0x2,0xe},		 	// ']'
								{4,0xa,0x11,0,0,0,0}, 					// '^'
								{0,0,0,0,0,0,0x1f},					 	// '_'
								{0x8,0x4,0x2,0,0,0,0},	 				// '`'
								{0,0,0xe,0x1,0xf,0x11,0xf},			 	// 'a'
								{0x10,0x10,0x10,0x1e,0x11,0x11,0x1e}, 	// 'b'
								{0,0,0xf,0x10,0x10,0x10, 0xf}, 			// 'c'
								{0x1,0x1,0x1,0xf,0x11,0x11,0xf},	 	// 'd'
								{0,0,0xe,0x11,0x1f,0x10,0xe},		 	// 'e'
								{0x2,0x5,0x4,0xe,0x4,0x4,0x4}, 			// 'f'
								{0,0,0xf,0x11,0xf,0x1,0x1e},		 	// 'g'
								{0x10,0x10,0x10,0x1e,0x11,0x11,0x11}, 	// 'h'
								{0x0,0x4,0x0,0x4,0x4,0x4,0x4},			// 'i'
								{0x2,0,0x2,0x2,0x2,0x12,0xc}, 			// 'j'
								{0x8,0x8,0x9,0xa,0xc,0xa,0x9},		 	// 'k'
								{0xc,0x4,0x4,0x4,0x4,0x4,0xe},		 	// 'l'
								{0,0,0x1b,0x15,0x15,0x15,0x11},			// 'm'
								{0x0,0x0,0x16,0x19,0x11,0x11,0x11}, 	// 'n'
								{0x0,0x0,0xe,0x11,0x11,0x11,0xe},	 	// 'o'
								{0x0,0x0,0x1e,0x11,0x1e,0x10,0x10}, 	// 'p'
								{0x0,0x0,0xf,0x11,0xf,0x1,0x1},		 	// 'q'
								{0x0,0x0,0x16,0x19,0x10,0x10,0x10}, 	// 'r'
								{0x0,0x0,0xf,0x10,0xe,0x1,0x1e}, 		// 's'
								{0x4,0x4,0x1f,0x4,0x4,0x5,0x2},		 	// 't'
								{0x0,0x0,0x11,0x11,0x11,0x11,0xe}, 		// 'u'
								{0x0,0x0,0x11,0x11,0x11,0xa,0x4},		// 'v'
								{0x0,0x0,0x11,0x11,0x15,0x15,0xa},		// 'w'
								{0x0,0x0,0x11,0xa,0x4,0xa,0x11},	 	// 'x'
								{0x0,0x0,0x11,0xa,0x4,0x4,0x8},		 	// 'y'
								{0x0,0x0,0x1f,0x2,0x4,0x8,0x1f},		// 'z'
								{0x3,0x4,0x4,0x8,0x4,0x4,0x3},			// '{'
								{0x4,0x4,0x4,0x0,0x4,0x4,0x4},		 	// '|'
								{0x18,0x4,0x4,0x3,0x4,0x4,0x18},	 	// '}'
								{0,0x8,0x15,2,0,0,0},					// '~'
							   } ;
/************************************************************************************************************/
const unsigned short int Font10x14[][14] = {
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0},	 															// ' '
	{0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0,0,0x30,0x30}, 								// '!'
	{0xcc,0xcc,0xcc,0xcc,0,0,0,0,0,0,0,0,0,0}, 													// '"'
	{0xcc,0xcc,0xcc,0xcc,0x3ff,0x3ff,0xcc,0xcc,0x3ff,0x3ff,0xcc,0xcc,0xcc,0xcc},				// '#'
	{0x30,0x30,0xfe,0x1ff,0x3b3,0x3b0,0x1fc,0xfe,0x37,0x337,0x3fe,0x1fc,0x30,0x30},				// '$'
	{0x186,0x3C6,0x3cc,0x18c,0x18,0x18,0x30,0x30,0x60,0x60,0xc6,0xcf,0x18f,0x186}, 				// '%'
	{0xf0,0x1f8,0x30c,0x31c,0x338,0x370,0x1e0,0x1e0,0x373,0x33b,0x31e,0x38e,0x1fb,0xf3}, 		// '&'
	{0x30,0x78,0x38,0x18,0x30,0x60,0,0,0,0,0,0,0,0}, 											// '''
	{0xc,0x3c,0x70,0x60,0xe0,0xc0,0xc0,0xc0,0xc0,0xe0,0x60,0x70,0x3c,0xc}, 						// '('
	{0x60,0x78,0x1c,0xc,0xe,0x6,0x6,0x6,0x6,0xe,0xc,0x1c,0x78,0x60},			// ')'
	{0,0,0x30,0x30,0x333,0x3b7,0x1fe,0xfc,0x3b7,0x333,0x30,0x30,0,0}, 		// '*'
	{0,0,0,0x30,0x30,0x30,0x30,0x3ff,0x3ff,0x30,0x30,0x30,0x30,0}, 		// '+'
	{0,0,0,0,0,0,0,0,0x30,0x78,0x38,0x18,0x30,0x60}, 			// ','
	{0,0,0,0,0,0,0,0x3ff,0x3ff,0,0,0,0,0},			// '-'
	{0,0,0,0,0,0,0,0,0,0,0x30,0x78,0x78,0x30}, 					// '.'
	{0xc,0xc,0x18,0x18,0x30,0x30,0x60,0x60,0xc0,0xc0,0x180,0x180,0x300,0x300} ,			// '/'
	{0xfc,0x1fe,0x387,0x307,0x30f,0x31f,0x33b,0x373,0x3e3,0x3c3,0x383,0x387,0x1fe,0xfc}, // '0'
	{0x30,0x70,0xf0,0xf0,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0xfc,0xfc},	// '1'
	{0xfc,0x1fe,0x387,0x303,0x3,0x7,0xe,0x1c,0x38,0x70,0xe0,0x1c0,0x3ff,0x3ff}, // '2'
	{0xfc,0x1fe,0x387,0x303,0x3,0x3,0x1e,0x1e,0x3,0x3,0x303,0x387,0x1fe,0xfc}, // '3'
	{0xc,0x1c,0x3c,0x7c,0xec,0x1cc,0x38c,0x30c,0x3ff,0x3ff,0xc,0xc,0xc,0xc}, // '4'
	{0x3ff,0x3ff,0x300,0x300,0x3fc,0x3fe,0x7,0x3,0x3,0x3,0x303,0x387,0x1fe,0xfc}, // '5'
	{0xfc,0x1fe,0x387,0x303,0x300,0x300,0x3fc,0x3fe,0x307,0x303,0x303,0x387,0x1fe,0xfc}, // '6'
	{0x3ff,0x3ff,0x3,0x7,0xe,0x1c,0x38,0x30,0x30,0x30,0x30,0x30,0x30,0x30},	// '7'
	{0xfc,0x1fe,0x387,0x303,0x303,0x387,0x1fe,0x1fe,0x387,0x303,0x303,0x387,0x1fe,0xfc}, // '8'
	{0xfc,0x1fe,0x387,0x303,0x303,0x387,0x1ff,0xff,0x7,0xe,0x1c,0x38,0xf0,0xe0}, // '9'
	{0,0,0x30,0x78,0x78,0x30,0,0,0x30,0x78,0x78,0x30,0,0}, // ':'
	{0,0,0x30,0x78,0x78,0x30,0,0,0x30,0x78,0x38,0x18,0x30,0x60}, // ';'
	{0xc,0x1c,0x38,0x70,0xe0,0x1c0,0x380,0x380,0x1c0,0xe0,0x70,0x38,0x1c,0xc}, // '<'
	{0,0,0,0,0x3ff,0x3ff,0,0,0x3ff,0x3ff,0,0,0,0}, // '='
	{0xc0,0xe0,0x70,0x38,0x1c,0xe,0x7,0x7,0xe,0x1c,0x38,0x70,0xe0,0xc0}, // '>'
	{0xfc,0x1fe,0x387,0x303,0x3,0x7,0x1e,0x38,0x30,0x30,0x30,0,0x30,0x30}, // '?'
	{0xfc,0x1fe,0x387,0x303,0x3,0x3,0xf3,0x1f3,0x3b3,0x333,0x333,0x3b7,0x1fe,0xfc}, // '@'
	{0xfc,0x1fe,0x387,0x303,0x303,0x303,0x303,0x3ff,0x3ff,0x303,0x303,0x303,0x303,0x303}, // 'A'
	{0x3fc,0x3fe,0x307,0x303,0x303,0x307,0x3fe,0x3fe,0x307,0x303,0x303,0x307,0x3fe,0x3fc}, // 'B'
	{0xfc,0x1fe,0x387,0x303,0x300,0x300,0x300,0x300,0x300,0x300,0x303,0x387,0x1fe,0xfc}, // 'C'
	{0x3fc,0x3fe,0x307,0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x307,0x3fe,0x3fc}, // 'D'
	{0x3ff,0x3ff,0x300,0x300,0x300,0x300,0x3fc,0x3fc,0x300,0x300,0x300,0x300,0x3ff,0x3ff}, // 'E'
	{0x3ff,0x3ff,0x300,0x300,0x300,0x300,0x3fc,0x3fc,0x300,0x300,0x300,0x300,0x300,0x300}, // 'F'
	{0xfc,0x1fe,0x387,0x303,0x300,0x300,0x31f,0x31f,0x303,0x303,0x303,0x387,0x1fe,0xfc}, // 'G'
	{0x303,0x303,0x303,0x303,0x303,0x303,0x3ff,0x3ff,0x303,0x303,0x303,0x303,0x303,0x303}, // 'H'
	{0xfc,0xfc,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0xfc,0xfc}, // 'I'
	{0xff,0xff,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x30c,0x39c,0x1f8,0xf0}, // 'J'
	{0x303,0x307,0x30e,0x31c,0x338,0x3f0,0x3e0,0x3e0,0x3f0,0x338,0x31c,0x30e,0x307,0x303}, // 'K'
	{0x300,0x300,0x300,0x300,0x300,0x300,0x300,0x300,0x300,0x300,0x300,0x300,0x3ff,0x3ff}, // 'L'
	{0x303,0x387,0x3cf,0x3ff,0x37b,0x333,0x333,0x333,0x303,0x303,0x303,0x303,0x303,0x303}, // 'M'
	{0x303,0x303,0x303,0x383,0x3c3,0x3e3,0x373,0x33b,0x31f,0x30f,0x307,0x303,0x303,0x303}, // 'N'
	{0xfc,0x1fe,0x387,0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x387,0x1fe,0xfc}, // 'O'
	{0x3fc,0x3fe,0x307,0x303,0x303,0x307,0x3fe,0x3fc,0x300,0x300,0x300,0x300,0x300,0x300}, // 'P'
	{0xfc,0x1fe,0x387,0x303,0x303,0x303,0x303,0x303,0x333,0x33b,0x31f,0x38e,0x1ff,0xfb} , // 'Q'
	{0x3fc,0x3fe,0x307,0x303,0x303,0x307,0x3fe,0x3fc,0x378,0x31c,0x306,0x307,0x303,0x303} , // R
	{0xfc,0x1ff,0x383,0x300,0x300,0x380, 0x1fc,0xfe,0x7,0x3,0x3,0x307,0x3fe,0x1fc}, // 'S'
	{0x3ff,0x3ff,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30}, // 'T'
	{0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x387,0x1fe,0xfc}, // 'U'
	{0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x387,0x1ce,0xfc,0x78,0x30}, // 'V'
	{0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x333,0x333,0x37b,0x3ff,0x1fe,0xcc}, // 'W'
	{0x303,0x303,0x303,0x387,0x1ce,0xfc,0x78,0x78,0xfc,0x1ce,0x387,0x303,0x303,0x303}, // 'X'
	{0x303,0x303,0x303,0x303,0x303,0x387,0x1ce,0xfc,0x78,0x30,0x30,0x30,0x30,0x30},	// 'Y'
	{0x3ff,0x3ff,0x3,0x7,0xe,0x1c,0x38,0x70,0xe0,0x1c0,0x380,0x300,0x3ff,0x3ff}, // 'Z'
	{0x7c,0x7c,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x7c,0x7c}, // '['
	{0x180,0x180,0xc0,0xc0,0x60,0x60,0x30,0x30,0x18,0x18,0xc,0xc,0x6,0x6}, // '\'
	{0xf8,0xf8,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xf8,0xf8}, // ']'
	{0x30,0x78,0xfc,0x1ce,0x387,0x303,0,0,0,0,0,0,0,0}, // '^'
	{0,0,0,0,0,0,0,0,0,0,0,0,0x3ff,0x3ff}, // '_'
	{0xc0,0xe0,0x70,0x38,0x18,0,0,0,0,0,0,0,0,0}, // '`'
	{0,0,0,0,0xfc,0x1fe,0x187,0x3,0xff,0x1ff,0x383,0x383,0x1ff,0xfe}, // 'a'
	{0x300,0x300,0x300,0x300,0x300,0x300,0x3fc,0x3fe,0x307,0x303,0x303,0x307,0x3fe,0x3fc}, // 'b'
	{0,0,0,0,0xfc,0x1fe,0x387,0x303,0x300,0x300,0x303,0x387,0x1fe,0xfc}, // 'c'
	{0x3,0x3,0x3,0x3,0x3,0x3,0xff,0x1ff,0x383,0x303,0x303,0x383,0x1ff,0xff}, // 'd'
	{0,0,0,0,0xfc,0x1fe,0x387,0x303,0x3ff,0x3fe,0x300,0x387,0x1fe,0xfc}, // 'e'
	{0x30,0x78,0xfc,0xcc,0xc0,0xc0,0x1f0,0x1f0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0}, // 'f'
	{0,0,0,0,0xfe,0x1ff,0x383,0x383,0x1ff,0xff,0x3,0x307,0x3fe,0x1fc} , // 'g'
	{0x180,0x180,0x180,0x180,0x180,0x180,0x1fc,0x1fe,0x187,0x183,0x183,0x183,0x183,0x183}, // 'h'
	{0,0,0,0x30,0x30,0,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30}, // 'i'
	{0xc,0xc,0,0,0xc,0xc,0xc,0xc,0xc,0xc,0x30c,0x39c,0x1f8,0xf0}, // 'j'
	{0x180,0x180,0x180,0x180,0x186,0x18e,0x19c,0x1b8,0x1f0,0x1f0,0x1b8,0x19c,0x18e,0x186}, // 'k'
	{0xf0,0xf0,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0xfc,0xfc}, // 'l'
	{0,0,0,0,0x387,0x3cf,0x3ff,0x37b,0x333,0x333,0x303,0x303,0x303,0x303}, // 'm'
	{0,0,0,0,0x33c,0x37e,0x3e7,0x3c3,0x303,0x303,0x303,0x303,0x303,0x303,}, // 'n'
	{0,0,0,0,0xfc,0x1fe,0x387,0x303,0x303,0x303,0x303,0x387,0x1fe,0xfc} , // 'o'
	{0,0,0,0,0x3fc,0x3fe,0x307,0x307,0x3fe,0x3fc,0x300,0x300,0x300,0x300}, // 'p'
	{0,0,0,0,0xff,0x1ff,0x383,0x383,0x1ff,0xff,0x3,0x3,0x3,0x3}, // 'q'
	{0,0,0,0,0x33c,0x37e,0x3e7,0x3c3,0x380,0x300,0x300,0x300,0x300,0x300}, // 'r'
	{0,0,0,0,0xfe,0x1ff,0x383,0x380,0x1fc,0xfe,0x7,0x307,0x3fe,0x1fc}, // 's'
	{0x60,0x60,0x60,0x60,0x1fe,0x1fe,0x60,0x60,0x60,0x60,0x66,0x7e,0x3c,0x18}, // 't'
	{0,0,0,0,0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x387,0x1fe,0xfc}, // 'u'
	{0,0,0,0,0x303,0x303,0x303,0x303,0x303,0x387,0x1ce,0xfc,0x78,0x30}, // 'v'
	{0,0,0,0,0x303,0x303,0x303,0x303,0x333,0x333,0x333,0x3ff,0x1fe,0xcc}, // 'w'
	{0,0,0,0,0x303,0x387,0x1ce,0xfc,0x78,0x78,0xfc,0x1ce,0x387,0x303}, // 'x'
	{0,0,0,0,0x303,0x387,0x1ce,0xfc,0x78,0x30,0x30,0x70,0xe0,0xc0}, // 'y'
	{0,0,0,0,0x3ff,0x3ff,0xe,0x1c,0x38,0x70,0xe0,0x1c0,0x3ff,0x3ff}, // 'z'
	{0x1e,0x3e,0x70,0x60,0x60,0xe0,0x1c0,0x1c0,0xe0,0x60,0x60,0x70,0x3e,0x1e}, // '{'
	{0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30}, // '|'
	{0x1e0,0x1f0,0x38,0x18,0x18,0x1c,0xe,0xe,0x1c,0x18,0x18,0x38,0x1f0,0x1e0}, // '}'
	{0,0,0,0,0,0,0,0xc0,0x333,0xc,0,0,0,0},			// '~'
};



//
//  Font data for Consolas 16pt 27 rows by 16
//

const unsigned char Font16x27[] = {

			// @0 ' ' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @54 '!' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @108 '"' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x1C, 0xE0, //    ###  ###
			0x1C, 0xE0, //    ###  ###
			0x1C, 0xE0, //    ###  ###
			0x1C, 0xE0, //    ###  ###
			0x1C, 0xE0, //    ###  ###
			0x1C, 0xE0, //    ###  ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @162 '#' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x06, 0x38, //      ##   ###
			0x06, 0x38, //      ##   ###
			0x06, 0x38, //      ##   ###
			0x06, 0x38, //      ##   ###
			0x3F, 0xFE, //   #############
			0x3F, 0xFE, //   #############
			0x0E, 0x70, //     ###  ###
			0x0E, 0x70, //     ###  ###
			0x0C, 0x70, //     ##   ###
			0x0C, 0x70, //     ##   ###
			0x7F, 0xFC, //  #############
			0x7F, 0xFC, //  #############
			0x0C, 0x70, //     ##   ###
			0x1C, 0xE0, //    ###  ###
			0x1C, 0xE0, //    ###  ###
			0x1C, 0xE0, //    ###  ###
			0x1C, 0xE0, //    ###  ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @216 '$' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x60, //          ##
			0x00, 0xC0, //         ##
			0x00, 0xC0, //         ##
			0x07, 0xF0, //      #######
			0x0F, 0xF8, //     #########
			0x1C, 0xC8, //    ###  ##  #
			0x38, 0xC0, //   ###   ##
			0x38, 0xC0, //   ###   ##
			0x38, 0x80, //   ###   #
			0x1F, 0x80, //    ######
			0x0F, 0x80, //     #####
			0x07, 0xE0, //      ######
			0x01, 0xF8, //        ######
			0x01, 0xBC, //        ## ####
			0x01, 0x9C, //        ##  ###
			0x03, 0x1C, //       ##   ###
			0x03, 0x1C, //       ##   ###
			0x23, 0x38, //   #   ##  ###
			0x3F, 0xF8, //   ###########
			0x1F, 0xE0, //    ########
			0x03, 0x00, //       ##
			0x03, 0x00, //       ##
			0x06, 0x00, //      ##
			0x00, 0x00, //
			0x00, 0x00, //

			// @270 '%' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x3C, 0x0C, //   ####      ##
			0x7E, 0x18, //  ######    ##
			0xE7, 0x38, // ###  ###  ###
			0xE7, 0x30, // ###  ###  ##
			0xE7, 0x60, // ###  ### ##
			0xE7, 0x60, // ###  ### ##
			0x7E, 0xC0, //  ###### ##
			0x3D, 0x80, //   #### ##
			0x01, 0x80, //        ##
			0x03, 0x00, //       ##
			0x07, 0x00, //      ###
			0x06, 0x78, //      ##  ####
			0x0C, 0xFC, //     ##  ######
			0x1D, 0xCE, //    ### ###  ###
			0x19, 0xCE, //    ##  ###  ###
			0x31, 0xCE, //   ##   ###  ###
			0x31, 0xCE, //   ##   ###  ###
			0x60, 0xFC, //  ##     ######
			0xC0, 0x78, // ##       ####
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @324 '&' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x07, 0xC0, //      #####
			0x1F, 0xE0, //    ########
			0x3C, 0xF0, //   ####  ####
			0x38, 0x70, //   ###    ###
			0x38, 0x70, //   ###    ###
			0x38, 0x70, //   ###    ###
			0x38, 0xE0, //   ###   ###
			0x1D, 0xC0, //    ### ###
			0x1F, 0x80, //    ######
			0x1E, 0x00, //    ####
			0x3F, 0x1C, //   ######   ###
			0x3B, 0x9C, //   ### ###  ###
			0x71, 0xDC, //  ###   ### ###
			0x71, 0xD8, //  ###   ### ##
			0x70, 0xF8, //  ###    #####
			0x70, 0x70, //  ###     ###
			0x78, 0xF8, //  ####   #####
			0x3F, 0xFC, //   ############
			0x0F, 0x8E, //     #####   ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @378 ''' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @432 '(' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x40, //          #
			0x00, 0xE0, //         ###
			0x01, 0xC0, //        ###
			0x03, 0x80, //       ###
			0x03, 0x00, //       ##
			0x07, 0x00, //      ###
			0x0E, 0x00, //     ###
			0x0E, 0x00, //     ###
			0x0E, 0x00, //     ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x0E, 0x00, //     ###
			0x0E, 0x00, //     ###
			0x0E, 0x00, //     ###
			0x07, 0x00, //      ###
			0x07, 0x00, //      ###
			0x03, 0x80, //       ###
			0x01, 0xC0, //        ###
			0x00, 0xE0, //         ###
			0x00, 0x40, //          #

			// @486 ')' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x04, 0x00, //      #
			0x0E, 0x00, //     ###
			0x07, 0x00, //      ###
			0x03, 0x80, //       ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0x70, //          ###
			0x00, 0x70, //          ###
			0x00, 0x70, //          ###
			0x00, 0x70, //          ###
			0x00, 0x70, //          ###
			0x00, 0x70, //          ###
			0x00, 0x70, //          ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x01, 0xC0, //        ###
			0x01, 0x80, //        ##
			0x03, 0x80, //       ###
			0x07, 0x00, //      ###
			0x0E, 0x00, //     ###
			0x04, 0x00, //      #

			// @540 '*' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x01, 0x80, //        ##
			0x01, 0x80, //        ##
			0x09, 0x90, //     #  ##  #
			0x1D, 0xB8, //    ### ## ###
			0x07, 0xE0, //      ######
			0x01, 0x80, //        ##
			0x07, 0xE0, //      ######
			0x1D, 0xB8, //    ### ## ###
			0x01, 0x90, //        ##  #
			0x01, 0x80, //        ##
			0x01, 0x80, //        ##
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @594 '+' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x7F, 0xFC, //  #############
			0x7F, 0xFC, //  #############
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @648 ',' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x07, 0x00, //      ###
			0x07, 0x80, //      ####
			0x07, 0x80, //      ####
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x07, 0x00, //      ###
			0x1E, 0x00, //    ####
			0x1C, 0x00, //    ###

			// @702 '-' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x1F, 0xE0, //    ########
			0x1F, 0xE0, //    ########
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @756 '.' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x03, 0x00, //       ##
			0x07, 0x80, //      ####
			0x07, 0x80, //      ####
			0x03, 0x00, //       ##
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @810 '/' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x18, //            ##
			0x00, 0x38, //           ###
			0x00, 0x30, //           ##
			0x00, 0x30, //           ##
			0x00, 0x60, //          ##
			0x00, 0x60, //          ##
			0x00, 0xE0, //         ###
			0x00, 0xC0, //         ##
			0x00, 0xC0, //         ##
			0x01, 0x80, //        ##
			0x01, 0x80, //        ##
			0x03, 0x00, //       ##
			0x03, 0x00, //       ##
			0x07, 0x00, //      ###
			0x06, 0x00, //      ##
			0x06, 0x00, //      ##
			0x0C, 0x00, //     ##
			0x0C, 0x00, //     ##
			0x1C, 0x00, //    ###
			0x18, 0x00, //    ##
			0x18, 0x00, //    ##
			0x30, 0x00, //   ##
			0x00, 0x00, //
			0x00, 0x00, //

			// @864 '0' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x07, 0xC0, //      #####
			0x1F, 0xF0, //    #########
			0x1C, 0x78, //    ###   ####
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x70, 0x3C, //  ###      ####
			0x70, 0x7C, //  ###     #####
			0x71, 0xDC, //  ###   ### ###
			0x73, 0x9C, //  ###  ###  ###
			0x77, 0x1C, //  ### ###   ###
			0x7C, 0x1C, //  #####     ###
			0x78, 0x1C, //  ####      ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x3C, 0x70, //   ####   ###
			0x1F, 0xF0, //    #########
			0x07, 0xC0, //      #####
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @918 '1' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x01, 0xC0, //        ###
			0x07, 0xC0, //      #####
			0x1D, 0xC0, //    ### ###
			0x39, 0xC0, //   ###  ###
			0x11, 0xC0, //    #   ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x1F, 0xF8, //    ##########
			0x1F, 0xF8, //    ##########
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @972 '2' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x0F, 0x80, //     #####
			0x1F, 0xE0, //    ########
			0x38, 0xE0, //   ###   ###
			0x10, 0x70, //    #     ###
			0x00, 0x70, //          ###
			0x00, 0x70, //          ###
			0x00, 0x70, //          ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x01, 0xC0, //        ###
			0x03, 0x80, //       ###
			0x07, 0x00, //      ###
			0x0E, 0x00, //     ###
			0x1C, 0x00, //    ###
			0x18, 0x00, //    ##
			0x3F, 0xF8, //   ###########
			0x3F, 0xF8, //   ###########
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @1026 '3' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x1F, 0x80, //    ######
			0x3F, 0xE0, //   #########
			0x20, 0xF0, //   #     ####
			0x00, 0x70, //          ###
			0x00, 0x70, //          ###
			0x00, 0x70, //          ###
			0x00, 0xE0, //         ###
			0x0F, 0xC0, //     ######
			0x0F, 0xE0, //     #######
			0x00, 0xF0, //         ####
			0x00, 0x38, //           ###
			0x00, 0x38, //           ###
			0x00, 0x38, //           ###
			0x00, 0x38, //           ###
			0x00, 0xF0, //         ####
			0x3F, 0xE0, //   #########
			0x3F, 0x80, //   #######
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @1080 '4' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x78, //          ####
			0x00, 0xF8, //         #####
			0x01, 0xF8, //        ######
			0x03, 0xB8, //       ### ###
			0x03, 0x38, //       ##  ###
			0x06, 0x38, //      ##   ###
			0x0E, 0x38, //     ###   ###
			0x0C, 0x38, //     ##    ###
			0x18, 0x38, //    ##     ###
			0x30, 0x38, //   ##      ###
			0x70, 0x38, //  ###      ###
			0x7F, 0xFE, //  ##############
			0x7F, 0xFE, //  ##############
			0x00, 0x38, //           ###
			0x00, 0x38, //           ###
			0x00, 0x38, //           ###
			0x00, 0x38, //           ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @1134 '5' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x3F, 0xF0, //   ##########
			0x3F, 0xF0, //   ##########
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x3F, 0xC0, //   ########
			0x3F, 0xF0, //   ##########
			0x00, 0xF8, //         #####
			0x00, 0x38, //           ###
			0x00, 0x38, //           ###
			0x00, 0x38, //           ###
			0x00, 0x78, //          ####
			0x00, 0xF0, //         ####
			0x3F, 0xE0, //   #########
			0x3F, 0x80, //   #######
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @1188 '6' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x01, 0xF8, //        ######
			0x07, 0xF8, //      ########
			0x0F, 0x00, //     ####
			0x1E, 0x00, //    ####
			0x1C, 0x00, //    ###
			0x18, 0x00, //    ##
			0x38, 0x00, //   ###
			0x3B, 0xF0, //   ### ######
			0x3F, 0xF8, //   ###########
			0x3C, 0x3C, //   ####    ####
			0x38, 0x1C, //   ###      ###
			0x38, 0x1C, //   ###      ###
			0x38, 0x1C, //   ###      ###
			0x1C, 0x1C, //    ###     ###
			0x1C, 0x38, //    ###    ###
			0x0F, 0xF0, //     ########
			0x07, 0xE0, //      ######
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @1242 '7' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x3F, 0xFC, //   ############
			0x3F, 0xFC, //   ############
			0x00, 0x1C, //            ###
			0x00, 0x18, //            ##
			0x00, 0x38, //           ###
			0x00, 0x30, //           ##
			0x00, 0x70, //          ###
			0x00, 0x60, //          ##
			0x00, 0xE0, //         ###
			0x00, 0xC0, //         ##
			0x01, 0xC0, //        ###
			0x01, 0x80, //        ##
			0x03, 0x80, //       ###
			0x03, 0x00, //       ##
			0x07, 0x00, //      ###
			0x06, 0x00, //      ##
			0x0E, 0x00, //     ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @1296 '8' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x07, 0xE0, //      ######
			0x1F, 0xF8, //    ##########
			0x3C, 0x3C, //   ####    ####
			0x38, 0x1C, //   ###      ###
			0x38, 0x1C, //   ###      ###
			0x3C, 0x1C, //   ####     ###
			0x1E, 0x78, //    ####  ####
			0x0F, 0xE0, //     #######
			0x07, 0xF0, //      #######
			0x1E, 0x78, //    ####  ####
			0x1C, 0x3C, //    ###    ####
			0x38, 0x1C, //   ###      ###
			0x38, 0x1C, //   ###      ###
			0x38, 0x1C, //   ###      ###
			0x3C, 0x3C, //   ####    ####
			0x1F, 0xF8, //    ##########
			0x07, 0xE0, //      ######
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @1350 '9' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x07, 0xC0, //      #####
			0x1F, 0xF0, //    #########
			0x3C, 0x78, //   ####   ####
			0x78, 0x38, //  ####     ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x38, 0x3C, //   ###     ####
			0x3F, 0xFC, //   ############
			0x0F, 0xDC, //     ###### ###
			0x00, 0x18, //            ##
			0x00, 0x38, //           ###
			0x00, 0x70, //          ###
			0x00, 0xF0, //         ####
			0x3F, 0xC0, //   ########
			0x3F, 0x00, //   ######
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @1404 ':' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x03, 0x00, //       ##
			0x07, 0x80, //      ####
			0x07, 0x80, //      ####
			0x03, 0x00, //       ##
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x03, 0x00, //       ##
			0x07, 0x80, //      ####
			0x07, 0x80, //      ####
			0x03, 0x00, //       ##
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @1458 ';' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x01, 0x80, //        ##
			0x03, 0xC0, //       ####
			0x03, 0xC0, //       ####
			0x01, 0x80, //        ##
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x03, 0x80, //       ###
			0x03, 0xC0, //       ####
			0x03, 0xC0, //       ####
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x03, 0x80, //       ###
			0x0F, 0x00, //     ####
			0x0E, 0x00, //     ###

			// @1512 '<' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x20, //           #
			0x00, 0x70, //          ###
			0x00, 0xE0, //         ###
			0x01, 0xC0, //        ###
			0x07, 0x00, //      ###
			0x0E, 0x00, //     ###
			0x1C, 0x00, //    ###
			0x38, 0x00, //   ###
			0x1C, 0x00, //    ###
			0x0E, 0x00, //     ###
			0x07, 0x80, //      ####
			0x01, 0xC0, //        ###
			0x00, 0xE0, //         ###
			0x00, 0x70, //          ###
			0x00, 0x20, //           #
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @1566 '=' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x3F, 0xF8, //   ###########
			0x3F, 0xF8, //   ###########
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x3F, 0xF8, //   ###########
			0x3F, 0xF8, //   ###########
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @1620 '>' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x08, 0x00, //     #
			0x1C, 0x00, //    ###
			0x0E, 0x00, //     ###
			0x07, 0x00, //      ###
			0x03, 0xC0, //       ####
			0x00, 0xE0, //         ###
			0x00, 0x70, //          ###
			0x00, 0x38, //           ###
			0x00, 0x70, //          ###
			0x00, 0xE0, //         ###
			0x01, 0xC0, //        ###
			0x07, 0x00, //      ###
			0x0E, 0x00, //     ###
			0x1C, 0x00, //    ###
			0x08, 0x00, //     #
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @1674 '?' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x0F, 0x00, //     ####
			0x0F, 0xC0, //     ######
			0x01, 0xE0, //        ####
			0x00, 0x70, //          ###
			0x00, 0x38, //           ###
			0x00, 0x38, //           ###
			0x00, 0x38, //           ###
			0x00, 0x38, //           ###
			0x00, 0x78, //          ####
			0x03, 0xF0, //       ######
			0x03, 0xE0, //       #####
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x07, 0x00, //      ###
			0x07, 0x00, //      ###
			0x07, 0x00, //      ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @1728 '@' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x03, 0xE0, //       #####
			0x07, 0xF8, //      ########
			0x0E, 0x18, //     ###    ##
			0x18, 0x0C, //    ##       ##
			0x38, 0x0C, //   ###       ##
			0x30, 0x06, //   ##         ##
			0x60, 0x06, //  ##          ##
			0x61, 0xF6, //  ##    ##### ##
			0x63, 0xF6, //  ##   ###### ##
			0xC7, 0x36, // ##   ###  ## ##
			0xC6, 0x76, // ##   ##  ### ##
			0xCE, 0x66, // ##  ###  ##  ##
			0xCE, 0x66, // ##  ###  ##  ##
			0xCE, 0x66, // ##  ###  ##  ##
			0xCE, 0x66, // ##  ###  ##  ##
			0xCE, 0xEC, // ##  ### ### ##
			0xCF, 0xBC, // ##  ##### ####
			0xC7, 0x38, // ##   ###  ###
			0xE0, 0x00, // ###
			0x60, 0x00, //  ##
			0x70, 0x00, //  ###
			0x38, 0x20, //   ###     #
			0x1F, 0xE0, //    ########
			0x0F, 0xC0, //     ######

			// @1782 'A' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x03, 0x80, //       ###
			0x02, 0xC0, //       # ##
			0x06, 0xC0, //      ## ##
			0x06, 0xC0, //      ## ##
			0x06, 0xE0, //      ## ###
			0x0C, 0x60, //     ##   ##
			0x0C, 0x60, //     ##   ##
			0x0C, 0x70, //     ##   ###
			0x18, 0x30, //    ##     ##
			0x18, 0x30, //    ##     ##
			0x18, 0x30, //    ##     ##
			0x3F, 0xF8, //   ###########
			0x3F, 0xF8, //   ###########
			0x30, 0x18, //   ##       ##
			0x70, 0x1C, //  ###       ###
			0x60, 0x0C, //  ##         ##
			0x60, 0x0C, //  ##         ##
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @1836 'B' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x3F, 0xE0, //   #########
			0x3F, 0xF0, //   ##########
			0x38, 0x78, //   ###    ####
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x70, //   ###    ###
			0x3F, 0xE0, //   #########
			0x3F, 0xF0, //   ##########
			0x38, 0x38, //   ###     ###
			0x38, 0x1C, //   ###      ###
			0x38, 0x1C, //   ###      ###
			0x38, 0x1C, //   ###      ###
			0x38, 0x1C, //   ###      ###
			0x38, 0x38, //   ###     ###
			0x3F, 0xF0, //   ##########
			0x3F, 0xC0, //   ########
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @1890 'C' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x03, 0xF0, //       ######
			0x0F, 0xF8, //     #########
			0x1E, 0x08, //    ####     #
			0x3C, 0x00, //   ####
			0x38, 0x00, //   ###
			0x70, 0x00, //  ###
			0x70, 0x00, //  ###
			0x70, 0x00, //  ###
			0x70, 0x00, //  ###
			0x70, 0x00, //  ###
			0x70, 0x00, //  ###
			0x70, 0x00, //  ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x1E, 0x08, //    ####     #
			0x0F, 0xF8, //     #########
			0x07, 0xF0, //      #######
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @1944 'D' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x7F, 0x80, //  ########
			0x7F, 0xE0, //  ##########
			0x70, 0x70, //  ###     ###
			0x70, 0x38, //  ###      ###
			0x70, 0x38, //  ###      ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x38, //  ###      ###
			0x70, 0x38, //  ###      ###
			0x70, 0xF0, //  ###    ####
			0x7F, 0xE0, //  ##########
			0x7F, 0x80, //  ########
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @1998 'E' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x1F, 0xF8, //    ##########
			0x1F, 0xF8, //    ##########
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1F, 0xF8, //    ##########
			0x1F, 0xF8, //    ##########
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1F, 0xF8, //    ##########
			0x1F, 0xF8, //    ##########
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @2052 'F' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x1F, 0xF8, //    ##########
			0x1F, 0xF8, //    ##########
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1F, 0xF8, //    ##########
			0x1F, 0xF8, //    ##########
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @2106 'G' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x03, 0xF8, //       #######
			0x0F, 0xFC, //     ##########
			0x1E, 0x04, //    ####      #
			0x3C, 0x00, //   ####
			0x38, 0x00, //   ###
			0x78, 0x00, //  ####
			0x70, 0x00, //  ###
			0x70, 0xFC, //  ###    ######
			0x70, 0xFC, //  ###    ######
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x38, 0x1C, //   ###      ###
			0x38, 0x1C, //   ###      ###
			0x1E, 0x1C, //    ####    ###
			0x0F, 0xFC, //     ##########
			0x03, 0xF0, //       ######
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @2160 'H' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x70, 0x38, //  ###      ###
			0x70, 0x38, //  ###      ###
			0x70, 0x38, //  ###      ###
			0x70, 0x38, //  ###      ###
			0x70, 0x38, //  ###      ###
			0x70, 0x38, //  ###      ###
			0x70, 0x38, //  ###      ###
			0x7F, 0xF8, //  ############
			0x7F, 0xF8, //  ############
			0x70, 0x38, //  ###      ###
			0x70, 0x38, //  ###      ###
			0x70, 0x38, //  ###      ###
			0x70, 0x38, //  ###      ###
			0x70, 0x38, //  ###      ###
			0x70, 0x38, //  ###      ###
			0x70, 0x38, //  ###      ###
			0x70, 0x38, //  ###      ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @2214 'I' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x3F, 0xF8, //   ###########
			0x3F, 0xF8, //   ###########
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x3F, 0xF8, //   ###########
			0x3F, 0xF8, //   ###########
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @2268 'J' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x3F, 0xF0, //   ##########
			0x3F, 0xF0, //   ##########
			0x00, 0x70, //          ###
			0x00, 0x70, //          ###
			0x00, 0x70, //          ###
			0x00, 0x70, //          ###
			0x00, 0x70, //          ###
			0x00, 0x70, //          ###
			0x00, 0x70, //          ###
			0x00, 0x70, //          ###
			0x00, 0x70, //          ###
			0x00, 0x70, //          ###
			0x00, 0x70, //          ###
			0x00, 0x70, //          ###
			0x20, 0xE0, //   #     ###
			0x3F, 0xC0, //   ########
			0x1F, 0x80, //    ######
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @2322 'K' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x38, 0x18, //   ###      ##
			0x38, 0x38, //   ###     ###
			0x38, 0x70, //   ###    ###
			0x38, 0xE0, //   ###   ###
			0x38, 0xC0, //   ###   ##
			0x39, 0x80, //   ###  ##
			0x3B, 0x80, //   ### ###
			0x3B, 0x00, //   ### ##
			0x3E, 0x00, //   #####
			0x3B, 0x00, //   ### ##
			0x3B, 0x80, //   ### ###
			0x39, 0xC0, //   ###  ###
			0x38, 0xC0, //   ###   ##
			0x38, 0xE0, //   ###   ###
			0x38, 0x70, //   ###    ###
			0x38, 0x38, //   ###     ###
			0x38, 0x1C, //   ###      ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @2376 'L' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1F, 0xF8, //    ##########
			0x1F, 0xF8, //    ##########
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @2430 'M' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x38, 0x38, //   ###     ###
			0x38, 0x3C, //   ###     ####
			0x38, 0x2C, //   ###     # ##
			0x3C, 0x6C, //   ####   ## ##
			0x3C, 0x6C, //   ####   ## ##
			0x34, 0x4C, //   ## #   #  ##
			0x36, 0xCC, //   ## ## ##  ##
			0x36, 0x8C, //   ## ## #   ##
			0x32, 0x8C, //   ##  # #   ##
			0x73, 0x8C, //  ###  ###   ##
			0x73, 0x0C, //  ###  ##    ##
			0x70, 0x0C, //  ###        ##
			0x70, 0x0C, //  ###        ##
			0x70, 0x0E, //  ###        ###
			0x70, 0x0E, //  ###        ###
			0x70, 0x0E, //  ###        ###
			0x70, 0x0E, //  ###        ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @2484 'N' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x3C, 0x38, //   ####    ###
			0x3C, 0x38, //   ####    ###
			0x3C, 0x38, //   ####    ###
			0x3E, 0x38, //   #####   ###
			0x3A, 0x38, //   ### #   ###
			0x3A, 0x38, //   ### #   ###
			0x3B, 0x38, //   ### ##  ###
			0x39, 0x38, //   ###  #  ###
			0x39, 0x38, //   ###  #  ###
			0x39, 0xB8, //   ###  ## ###
			0x39, 0xB8, //   ###  ## ###
			0x38, 0xB8, //   ###   # ###
			0x38, 0xF8, //   ###   #####
			0x38, 0xF8, //   ###   #####
			0x38, 0x78, //   ###    ####
			0x38, 0x78, //   ###    ####
			0x38, 0x78, //   ###    ####
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @2538 'O' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x07, 0xC0, //      #####
			0x0F, 0xF0, //     ########
			0x1C, 0x78, //    ###   ####
			0x38, 0x38, //   ###     ###
			0x38, 0x3C, //   ###     ####
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x78, 0x38, //  ####     ###
			0x38, 0x38, //   ###     ###
			0x3C, 0x70, //   ####   ###
			0x1F, 0xE0, //    ########
			0x07, 0xC0, //      #####
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @2592 'P' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x3F, 0xE0, //   #########
			0x3F, 0xF0, //   ##########
			0x38, 0x78, //   ###    ####
			0x38, 0x1C, //   ###      ###
			0x38, 0x1C, //   ###      ###
			0x38, 0x1C, //   ###      ###
			0x38, 0x1C, //   ###      ###
			0x38, 0x3C, //   ###     ####
			0x38, 0x78, //   ###    ####
			0x3F, 0xF0, //   ##########
			0x3F, 0xC0, //   ########
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @2646 'Q' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x07, 0xE0, //      ######
			0x0F, 0xF8, //     #########
			0x1C, 0x3C, //    ###    ####
			0x38, 0x1C, //   ###      ###
			0x38, 0x1C, //   ###      ###
			0x70, 0x0E, //  ###        ###
			0x70, 0x0E, //  ###        ###
			0x70, 0x0E, //  ###        ###
			0x70, 0x0E, //  ###        ###
			0x70, 0x0E, //  ###        ###
			0x70, 0x0E, //  ###        ###
			0x70, 0x0E, //  ###        ###
			0x78, 0x1C, //  ####      ###
			0x38, 0x1C, //   ###      ###
			0x3C, 0x38, //   ####    ###
			0x1F, 0xF0, //    #########
			0x07, 0xE0, //      ######
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x00, 0xE2, //         ###   #
			0x00, 0xFF, //         ########
			0x00, 0x3E, //           #####

			// @2700 'R' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x3F, 0xC0, //   ########
			0x3F, 0xF0, //   ##########
			0x38, 0x78, //   ###    ####
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x70, //   ###    ###
			0x3F, 0xE0, //   #########
			0x3F, 0xC0, //   ########
			0x38, 0xE0, //   ###   ###
			0x38, 0x70, //   ###    ###
			0x38, 0x70, //   ###    ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x18, //   ###      ##
			0x38, 0x1C, //   ###      ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @2754 'S' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x07, 0xF0, //      #######
			0x0F, 0xF8, //     #########
			0x1C, 0x08, //    ###      #
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x1E, 0x00, //    ####
			0x1F, 0x80, //    ######
			0x07, 0xE0, //      ######
			0x00, 0xF8, //         #####
			0x00, 0x3C, //           ####
			0x00, 0x1C, //            ###
			0x00, 0x1C, //            ###
			0x00, 0x1C, //            ###
			0x20, 0x38, //   #       ###
			0x3F, 0xF0, //   ##########
			0x1F, 0xE0, //    ########
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @2808 'T' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x7F, 0xFC, //  #############
			0x7F, 0xFC, //  #############
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @2862 'U' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x3C, //  ###      ####
			0x38, 0x38, //   ###     ###
			0x1F, 0xF0, //    #########
			0x0F, 0xC0, //     ######
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @2916 'V' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x60, 0x0C, //  ##         ##
			0x70, 0x0C, //  ###        ##
			0x70, 0x1C, //  ###       ###
			0x30, 0x18, //   ##       ##
			0x30, 0x18, //   ##       ##
			0x38, 0x38, //   ###     ###
			0x18, 0x30, //    ##     ##
			0x18, 0x30, //    ##     ##
			0x1C, 0x70, //    ###   ###
			0x1C, 0x60, //    ###   ##
			0x0C, 0x60, //     ##   ##
			0x0E, 0xE0, //     ### ###
			0x0E, 0xC0, //     ### ##
			0x06, 0xC0, //      ## ##
			0x06, 0xC0, //      ## ##
			0x07, 0x80, //      ####
			0x03, 0x80, //       ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @2970 'W' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x71, 0x9C, //  ###   ##  ###
			0x73, 0x9C, //  ###  ###  ###
			0x73, 0x9C, //  ###  ###  ###
			0x72, 0x9C, //  ###  # #  ###
			0x76, 0xDC, //  ### ## ## ###
			0x36, 0xD8, //   ## ## ## ##
			0x34, 0x58, //   ## #   # ##
			0x3C, 0x78, //   ####   ####
			0x3C, 0x78, //   ####   ####
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @3024 'X' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x70, 0x1C, //  ###       ###
			0x38, 0x38, //   ###     ###
			0x18, 0x30, //    ##     ##
			0x1C, 0x70, //    ###   ###
			0x0E, 0xE0, //     ### ###
			0x07, 0xC0, //      #####
			0x07, 0xC0, //      #####
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x07, 0xC0, //      #####
			0x0E, 0xE0, //     ### ###
			0x0E, 0xE0, //     ### ###
			0x1C, 0x70, //    ###   ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x70, 0x1C, //  ###       ###
			0xE0, 0x0E, // ###         ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @3078 'Y' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0xE0, 0x0E, // ###         ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x1C, 0x70, //    ###   ###
			0x0C, 0x60, //     ##   ##
			0x0E, 0xE0, //     ### ###
			0x06, 0xC0, //      ## ##
			0x07, 0xC0, //      #####
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @3132 'Z' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x7F, 0xF8, //  ############
			0x7F, 0xF8, //  ############
			0x00, 0x30, //           ##
			0x00, 0x60, //          ##
			0x00, 0xE0, //         ###
			0x00, 0xC0, //         ##
			0x01, 0xC0, //        ###
			0x01, 0x80, //        ##
			0x03, 0x00, //       ##
			0x07, 0x00, //      ###
			0x06, 0x00, //      ##
			0x0C, 0x00, //     ##
			0x1C, 0x00, //    ###
			0x18, 0x00, //    ##
			0x30, 0x00, //   ##
			0x7F, 0xFC, //  #############
			0x7F, 0xFC, //  #############
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @3186 '[' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x0F, 0xE0, //     #######
			0x0F, 0xE0, //     #######
			0x0E, 0x00, //     ###
			0x0E, 0x00, //     ###
			0x0E, 0x00, //     ###
			0x0E, 0x00, //     ###
			0x0E, 0x00, //     ###
			0x0E, 0x00, //     ###
			0x0E, 0x00, //     ###
			0x0E, 0x00, //     ###
			0x0E, 0x00, //     ###
			0x0E, 0x00, //     ###
			0x0E, 0x00, //     ###
			0x0E, 0x00, //     ###
			0x0E, 0x00, //     ###
			0x0E, 0x00, //     ###
			0x0E, 0x00, //     ###
			0x0E, 0x00, //     ###
			0x0E, 0x00, //     ###
			0x0E, 0x00, //     ###
			0x0E, 0x00, //     ###
			0x0E, 0x00, //     ###
			0x0F, 0xE0, //     #######
			0x0F, 0xE0, //     #######

			// @3240 '\' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x30, 0x00, //   ##
			0x18, 0x00, //    ##
			0x18, 0x00, //    ##
			0x1C, 0x00, //    ###
			0x0C, 0x00, //     ##
			0x0C, 0x00, //     ##
			0x06, 0x00, //      ##
			0x06, 0x00, //      ##
			0x07, 0x00, //      ###
			0x03, 0x00, //       ##
			0x03, 0x00, //       ##
			0x01, 0x80, //        ##
			0x01, 0x80, //        ##
			0x00, 0xC0, //         ##
			0x00, 0xC0, //         ##
			0x00, 0xE0, //         ###
			0x00, 0x60, //          ##
			0x00, 0x60, //          ##
			0x00, 0x30, //           ##
			0x00, 0x30, //           ##
			0x00, 0x38, //           ###
			0x00, 0x18, //            ##
			0x00, 0x00, //
			0x00, 0x00, //

			// @3294 ']' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x0F, 0xE0, //     #######
			0x0F, 0xE0, //     #######
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x0F, 0xE0, //     #######
			0x0F, 0xE0, //     #######

			// @3348 '^' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x06, 0xC0, //      ## ##
			0x0E, 0xE0, //     ### ###
			0x0C, 0x60, //     ##   ##
			0x1C, 0x70, //    ###   ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @3402 '_' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0xFF, 0xFE, // ###############
			0xFF, 0xFE, // ###############

			// @3456 '`' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x1C, 0x00, //    ###
			0x0E, 0x00, //     ###
			0x07, 0x00, //      ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @3510 'a' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x07, 0xE0, //      ######
			0x1F, 0xF8, //    ##########
			0x10, 0x3C, //    #      ####
			0x00, 0x1C, //            ###
			0x00, 0x1C, //            ###
			0x07, 0xFC, //      #########
			0x1F, 0xFC, //    ###########
			0x3C, 0x1C, //   ####     ###
			0x38, 0x1C, //   ###      ###
			0x38, 0x1C, //   ###      ###
			0x3C, 0x7C, //   ####   #####
			0x1F, 0xFC, //    ###########
			0x0F, 0x9C, //     #####  ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @3564 'b' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x39, 0xE0, //   ###  ####
			0x3B, 0xF8, //   ### #######
			0x3E, 0x38, //   #####   ###
			0x3C, 0x1C, //   ####     ###
			0x38, 0x1C, //   ###      ###
			0x38, 0x1C, //   ###      ###
			0x38, 0x1C, //   ###      ###
			0x38, 0x1C, //   ###      ###
			0x38, 0x1C, //   ###      ###
			0x38, 0x38, //   ###     ###
			0x38, 0x78, //   ###    ####
			0x3F, 0xF0, //   ##########
			0x1F, 0xC0, //    #######
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @3618 'c' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x03, 0xE0, //       #####
			0x0F, 0xF0, //     ########
			0x1E, 0x10, //    ####    #
			0x1C, 0x00, //    ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x3C, 0x00, //   ####
			0x1E, 0x10, //    ####    #
			0x0F, 0xF0, //     ########
			0x07, 0xE0, //      ######
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @3672 'd' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x38, //           ###
			0x00, 0x38, //           ###
			0x00, 0x38, //           ###
			0x00, 0x38, //           ###
			0x00, 0x38, //           ###
			0x00, 0x38, //           ###
			0x07, 0xF8, //      ########
			0x1F, 0xF8, //    ##########
			0x3C, 0x38, //   ####    ###
			0x38, 0x38, //   ###     ###
			0x70, 0x38, //  ###      ###
			0x70, 0x38, //  ###      ###
			0x70, 0x38, //  ###      ###
			0x70, 0x38, //  ###      ###
			0x70, 0x38, //  ###      ###
			0x70, 0x78, //  ###     ####
			0x38, 0xF8, //   ###   #####
			0x3F, 0xB8, //   ####### ###
			0x0F, 0x38, //     ####  ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @3726 'e' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x03, 0xE0, //       #####
			0x0F, 0xF0, //     ########
			0x1C, 0x38, //    ###    ###
			0x18, 0x1C, //    ##      ###
			0x38, 0x1C, //   ###      ###
			0x3F, 0xFC, //   ############
			0x3F, 0xFC, //   ############
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x3C, 0x00, //   ####
			0x1E, 0x08, //    ####     #
			0x0F, 0xF8, //     #########
			0x07, 0xF0, //      #######
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @3780 'f' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0xFC, //         ######
			0x03, 0xFC, //       ########
			0x03, 0x80, //       ###
			0x07, 0x00, //      ###
			0x07, 0x00, //      ###
			0x07, 0x00, //      ###
			0x07, 0x00, //      ###
			0x7F, 0xF8, //  ############
			0x7F, 0xF8, //  ############
			0x07, 0x00, //      ###
			0x07, 0x00, //      ###
			0x07, 0x00, //      ###
			0x07, 0x00, //      ###
			0x07, 0x00, //      ###
			0x07, 0x00, //      ###
			0x07, 0x00, //      ###
			0x07, 0x00, //      ###
			0x07, 0x00, //      ###
			0x07, 0x00, //      ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @3834 'g' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x07, 0xFC, //      #########
			0x1F, 0xFC, //    ###########
			0x3C, 0x78, //   ####   ####
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x3C, 0x78, //   ####   ####
			0x1F, 0xF0, //    #########
			0x3F, 0xC0, //   ########
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x3F, 0xF0, //   ##########
			0x1F, 0xFC, //    ###########
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x78, 0x3C, //  ####     ####
			0x3F, 0xF8, //   ###########
			0x1F, 0xE0, //    ########

			// @3888 'h' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x39, 0xE0, //   ###  ####
			0x3B, 0xF0, //   ### ######
			0x3E, 0x78, //   #####  ####
			0x3C, 0x38, //   ####    ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @3942 'i' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x01, 0x80, //        ##
			0x03, 0xC0, //       ####
			0x01, 0x80, //        ##
			0x00, 0x00, //
			0x00, 0x00, //
			0x3F, 0xC0, //   ########
			0x3F, 0xC0, //   ########
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x3F, 0xF8, //   ###########
			0x3F, 0xF8, //   ###########
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @3996 'j' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0xC0, //         ##
			0x01, 0xE0, //        ####
			0x00, 0xC0, //         ##
			0x00, 0x00, //
			0x00, 0x00, //
			0x3F, 0xE0, //   #########
			0x3F, 0xE0, //   #########
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x00, 0xE0, //         ###
			0x41, 0xC0, //  #     ###
			0x7F, 0x80, //  ########
			0x3F, 0x00, //   ######

			// @4050 'k' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x38, //   ###     ###
			0x38, 0x70, //   ###    ###
			0x38, 0xE0, //   ###   ###
			0x39, 0xC0, //   ###  ###
			0x3B, 0x80, //   ### ###
			0x3F, 0x00, //   ######
			0x3B, 0x80, //   ### ###
			0x3B, 0x80, //   ### ###
			0x39, 0xC0, //   ###  ###
			0x38, 0xE0, //   ###   ###
			0x38, 0xE0, //   ###   ###
			0x38, 0x70, //   ###    ###
			0x38, 0x38, //   ###     ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @4104 'l' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x3F, 0xC0, //   ########
			0x3F, 0xC0, //   ########
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x01, 0xC0, //        ###
			0x3F, 0xF8, //   ###########
			0x3F, 0xF8, //   ###########
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @4158 'm' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x77, 0x38, //  ### ###  ###
			0x7F, 0x7C, //  ####### #####
			0x7B, 0xDC, //  #### #### ###
			0x73, 0x9C, //  ###  ###  ###
			0x73, 0x9C, //  ###  ###  ###
			0x73, 0x9C, //  ###  ###  ###
			0x73, 0x9C, //  ###  ###  ###
			0x73, 0x9C, //  ###  ###  ###
			0x73, 0x9C, //  ###  ###  ###
			0x73, 0x9C, //  ###  ###  ###
			0x73, 0x9C, //  ###  ###  ###
			0x73, 0x9C, //  ###  ###  ###
			0x73, 0x9C, //  ###  ###  ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @4212 'n' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x39, 0xE0, //   ###  ####
			0x3F, 0xF0, //   ##########
			0x3E, 0x78, //   #####  ####
			0x3C, 0x38, //   ####    ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @4266 'o' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x07, 0xE0, //      ######
			0x1F, 0xF0, //    #########
			0x3C, 0x78, //   ####   ####
			0x38, 0x3C, //   ###     ####
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x70, 0x1C, //  ###       ###
			0x38, 0x38, //   ###     ###
			0x3C, 0x78, //   ####   ####
			0x1F, 0xF0, //    #########
			0x0F, 0xC0, //     ######
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @4320 'p' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x39, 0xE0, //   ###  ####
			0x3F, 0xF8, //   ###########
			0x3E, 0x38, //   #####   ###
			0x3C, 0x1C, //   ####     ###
			0x38, 0x1C, //   ###      ###
			0x38, 0x1C, //   ###      ###
			0x38, 0x1C, //   ###      ###
			0x38, 0x1C, //   ###      ###
			0x38, 0x1C, //   ###      ###
			0x38, 0x38, //   ###     ###
			0x38, 0x78, //   ###    ####
			0x3F, 0xF0, //   ##########
			0x3F, 0xC0, //   ########
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###
			0x38, 0x00, //   ###

			// @4374 'q' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x07, 0xF8, //      ########
			0x1F, 0xF8, //    ##########
			0x3C, 0x38, //   ####    ###
			0x38, 0x38, //   ###     ###
			0x70, 0x38, //  ###      ###
			0x70, 0x38, //  ###      ###
			0x70, 0x38, //  ###      ###
			0x70, 0x38, //  ###      ###
			0x70, 0x38, //  ###      ###
			0x70, 0x78, //  ###     ####
			0x38, 0xF8, //   ###   #####
			0x3F, 0xB8, //   ####### ###
			0x0F, 0x38, //     ####  ###
			0x00, 0x38, //           ###
			0x00, 0x38, //           ###
			0x00, 0x38, //           ###
			0x00, 0x38, //           ###
			0x00, 0x38, //           ###

			// @4428 'r' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x1C, 0xF8, //    ###  #####
			0x1D, 0xFC, //    ### #######
			0x1F, 0x1E, //    #####   ####
			0x1E, 0x0E, //    ####     ###
			0x1C, 0x0E, //    ###      ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x1C, 0x00, //    ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @4482 's' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x07, 0xE0, //      ######
			0x1F, 0xF0, //    #########
			0x3C, 0x10, //   ####     #
			0x38, 0x00, //   ###
			0x3C, 0x00, //   ####
			0x1F, 0x00, //    #####
			0x0F, 0xE0, //     #######
			0x01, 0xF0, //        #####
			0x00, 0x38, //           ###
			0x00, 0x38, //           ###
			0x20, 0x78, //   #      ####
			0x3F, 0xF0, //   ##########
			0x1F, 0xC0, //    #######
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @4536 't' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x07, 0x00, //      ###
			0x07, 0x00, //      ###
			0x07, 0x00, //      ###
			0x07, 0x00, //      ###
			0x7F, 0xF8, //  ############
			0x7F, 0xF8, //  ############
			0x07, 0x00, //      ###
			0x07, 0x00, //      ###
			0x07, 0x00, //      ###
			0x07, 0x00, //      ###
			0x07, 0x00, //      ###
			0x07, 0x00, //      ###
			0x07, 0x00, //      ###
			0x07, 0x00, //      ###
			0x07, 0x80, //      ####
			0x03, 0xF8, //       #######
			0x01, 0xF8, //        ######
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @4590 'u' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x38, //   ###     ###
			0x38, 0x78, //   ###    ####
			0x3C, 0xF8, //   ####  #####
			0x1F, 0xF8, //    ##########
			0x0F, 0x38, //     ####  ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @4644 'v' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x60, 0x18, //  ##        ##
			0x70, 0x18, //  ###       ##
			0x30, 0x38, //   ##      ###
			0x30, 0x30, //   ##      ##
			0x38, 0x30, //   ###     ##
			0x18, 0x60, //    ##    ##
			0x1C, 0x60, //    ###   ##
			0x0C, 0x60, //     ##   ##
			0x0C, 0xC0, //     ##  ##
			0x06, 0xC0, //      ## ##
			0x06, 0xC0, //      ## ##
			0x07, 0x80, //      ####
			0x03, 0x80, //       ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @4698 'w' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x60, 0x0C, //  ##         ##
			0x60, 0x0C, //  ##         ##
			0x60, 0x0C, //  ##         ##
			0x61, 0x8C, //  ##    ##   ##
			0x63, 0x8C, //  ##   ###   ##
			0x73, 0x8C, //  ###  ###   ##
			0x32, 0xCC, //   ##  # ##  ##
			0x32, 0xCC, //   ##  # ##  ##
			0x36, 0x6C, //   ## ##  ## ##
			0x34, 0x68, //   ## #   ## #
			0x34, 0x68, //   ## #   ## #
			0x1C, 0x38, //    ###    ###
			0x1C, 0x38, //    ###    ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @4752 'x' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x70, 0x1C, //  ###       ###
			0x38, 0x38, //   ###     ###
			0x1C, 0x70, //    ###   ###
			0x0C, 0x60, //     ##   ##
			0x0E, 0xE0, //     ### ###
			0x07, 0xC0, //      #####
			0x03, 0x80, //       ###
			0x07, 0xC0, //      #####
			0x06, 0xE0, //      ## ###
			0x0C, 0x60, //     ##   ##
			0x1C, 0x70, //    ###   ###
			0x38, 0x38, //   ###     ###
			0x70, 0x1C, //  ###       ###
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @4806 'y' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x60, 0x18, //  ##        ##
			0x70, 0x38, //  ###      ###
			0x30, 0x38, //   ##      ###
			0x38, 0x30, //   ###     ##
			0x38, 0x30, //   ###     ##
			0x18, 0x60, //    ##    ##
			0x1C, 0x60, //    ###   ##
			0x0C, 0x60, //     ##   ##
			0x0E, 0xC0, //     ### ##
			0x06, 0xC0, //      ## ##
			0x06, 0x80, //      ## #
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x00, //       ##
			0x07, 0x00, //      ###
			0x0E, 0x00, //     ###
			0xFC, 0x00, // ######
			0xF0, 0x00, // ####

			// @4860 'z' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x3F, 0xF0, //   ##########
			0x3F, 0xF0, //   ##########
			0x00, 0x60, //          ##
			0x00, 0xC0, //         ##
			0x01, 0xC0, //        ###
			0x01, 0x80, //        ##
			0x03, 0x00, //       ##
			0x06, 0x00, //      ##
			0x0E, 0x00, //     ###
			0x0C, 0x00, //     ##
			0x18, 0x00, //    ##
			0x3F, 0xF0, //   ##########
			0x3F, 0xF0, //   ##########
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //

			// @4914 '{' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0xF0, //         ####
			0x01, 0xF0, //        #####
			0x03, 0xC0, //       ####
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x07, 0x80, //      ####
			0x3F, 0x00, //   ######
			0x3F, 0x00, //   ######
			0x07, 0x80, //      ####
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0xC0, //       ####
			0x01, 0xF0, //        #####
			0x00, 0xF0, //         ####

			// @4968 '|' (16 pixels wide)
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###

			// @5022 '}' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x1E, 0x00, //    ####
			0x1F, 0x00, //    #####
			0x07, 0x80, //      ####
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0xC0, //       ####
			0x01, 0xF8, //        ######
			0x01, 0xF8, //        ######
			0x03, 0xC0, //       ####
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x03, 0x80, //       ###
			0x07, 0x80, //      ####
			0x1F, 0x00, //    #####
			0x1E, 0x00, //    ####

			// @5076 '~' (16 pixels wide)
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x1E, 0x00, //    ####
			0x3F, 0x0E, //   ######    ###
			0x71, 0x8E, //  ###   ##   ###
			0x70, 0xFC, //  ###    ######
			0x00, 0x78, //          ####
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
			0x00, 0x00, //
		};

//
//  Font data for Consolas 24pt
//

const unsigned char Font22x40[] = {
	// @0 ' ' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @120 '!' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x78, 0x00, //          ####
	0x00, 0x78, 0x00, //          ####
	0x00, 0x78, 0x00, //          ####
	0x00, 0x78, 0x00, //          ####
	0x00, 0x78, 0x00, //          ####
	0x00, 0x78, 0x00, //          ####
	0x00, 0x78, 0x00, //          ####
	0x00, 0x78, 0x00, //          ####
	0x00, 0x78, 0x00, //          ####
	0x00, 0x78, 0x00, //          ####
	0x00, 0x78, 0x00, //          ####
	0x00, 0x78, 0x00, //          ####
	0x00, 0x78, 0x00, //          ####
	0x00, 0x78, 0x00, //          ####
	0x00, 0x78, 0x00, //          ####
	0x00, 0x78, 0x00, //          ####
	0x00, 0x78, 0x00, //          ####
	0x00, 0x78, 0x00, //          ####
	0x00, 0x38, 0x00, //           ###
	0x00, 0x30, 0x00, //           ##
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x70, 0x00, //          ###
	0x00, 0xF8, 0x00, //         #####
	0x00, 0xF8, 0x00, //         #####
	0x00, 0xF8, 0x00, //         #####
	0x00, 0x70, 0x00, //          ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @240 '"' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x0F, 0x8F, 0x80, //     #####   #####
	0x0F, 0x8F, 0x80, //     #####   #####
	0x0F, 0x8F, 0x80, //     #####   #####
	0x0F, 0x8F, 0x80, //     #####   #####
	0x0F, 0x8F, 0x80, //     #####   #####
	0x0F, 0x8F, 0x80, //     #####   #####
	0x0F, 0x8F, 0x80, //     #####   #####
	0x07, 0x07, 0x00, //      ###     ###
	0x07, 0x07, 0x00, //      ###     ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @360 '#' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x01, 0xC3, 0x80, //        ###    ###
	0x01, 0xC3, 0x80, //        ###    ###
	0x01, 0xC3, 0x80, //        ###    ###
	0x01, 0xC3, 0x80, //        ###    ###
	0x01, 0xC3, 0x00, //        ###    ##
	0x03, 0x87, 0x00, //       ###    ###
	0x03, 0x87, 0x00, //       ###    ###
	0x3F, 0xFF, 0xF8, //   ###################
	0x3F, 0xFF, 0xF8, //   ###################
	0x3F, 0xFF, 0xF8, //   ###################
	0x03, 0x87, 0x00, //       ###    ###
	0x03, 0x87, 0x00, //       ###    ###
	0x03, 0x87, 0x00, //       ###    ###
	0x07, 0x0E, 0x00, //      ###    ###
	0x07, 0x0E, 0x00, //      ###    ###
	0x07, 0x0E, 0x00, //      ###    ###
	0x7F, 0xFF, 0xF0, //  ###################
	0x7F, 0xFF, 0xF0, //  ###################
	0x7F, 0xFF, 0xF0, //  ###################
	0x07, 0x0E, 0x00, //      ###    ###
	0x07, 0x0E, 0x00, //      ###    ###
	0x07, 0x0E, 0x00, //      ###    ###
	0x0E, 0x1C, 0x00, //     ###    ###
	0x0E, 0x1C, 0x00, //     ###    ###
	0x0E, 0x1C, 0x00, //     ###    ###
	0x0E, 0x1C, 0x00, //     ###    ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @480 '$' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x0C, 0x00, //             ##
	0x00, 0x1C, 0x00, //            ###
	0x00, 0x1C, 0x00, //            ###
	0x00, 0x1C, 0x00, //            ###
	0x00, 0xFF, 0x00, //         ########
	0x07, 0xFF, 0xC0, //      #############
	0x0F, 0xFF, 0xC0, //     ##############
	0x1F, 0x18, 0xC0, //    #####   ##   ##
	0x3E, 0x38, 0x00, //   #####   ###
	0x3C, 0x38, 0x00, //   ####    ###
	0x3C, 0x38, 0x00, //   ####    ###
	0x3C, 0x38, 0x00, //   ####    ###
	0x3E, 0x38, 0x00, //   #####   ###
	0x1F, 0x38, 0x00, //    #####  ###
	0x0F, 0xF0, 0x00, //     ########
	0x07, 0xF8, 0x00, //      ########
	0x01, 0xFF, 0x00, //        #########
	0x00, 0x7F, 0x80, //          ########
	0x00, 0x7F, 0xE0, //          ##########
	0x00, 0x73, 0xE0, //          ###  #####
	0x00, 0x71, 0xF0, //          ###   #####
	0x00, 0x70, 0xF0, //          ###    ####
	0x00, 0x60, 0xF0, //          ##     ####
	0x00, 0xE0, 0xF0, //         ###     ####
	0x00, 0xE1, 0xF0, //         ###    #####
	0x30, 0xE3, 0xE0, //   ##    ###   #####
	0x3F, 0xFF, 0xC0, //   ################
	0x3F, 0xFF, 0x80, //   ###############
	0x0F, 0xFC, 0x00, //     ##########
	0x00, 0xC0, 0x00, //         ##
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @600 '%' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x0F, 0x80, 0x38, //     #####         ###
	0x1F, 0xE0, 0x70, //    ########      ###
	0x3F, 0xE0, 0xF0, //   #########     ####
	0x78, 0xF0, 0xE0, //  ####   ####    ###
	0x70, 0x71, 0xC0, //  ###     ###   ###
	0x70, 0x73, 0xC0, //  ###     ###  ####
	0x70, 0x73, 0x80, //  ###     ###  ###
	0x70, 0x77, 0x00, //  ###     ### ###
	0x78, 0xF7, 0x00, //  ####   #### ###
	0x3F, 0xEE, 0x00, //   ######### ###
	0x3F, 0xDC, 0x00, //   ######## ###
	0x0F, 0x9C, 0x00, //     #####  ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x78, 0x00, //          ####
	0x00, 0x70, 0x00, //          ###
	0x00, 0xE0, 0x00, //         ###
	0x01, 0xE3, 0xE0, //        ####   #####
	0x01, 0xC7, 0xF8, //        ###   ########
	0x03, 0x8F, 0xF8, //       ###   #########
	0x07, 0x9E, 0x3C, //      ####  ####   ####
	0x07, 0x1C, 0x1C, //      ###   ###     ###
	0x0E, 0x1C, 0x1C, //     ###    ###     ###
	0x0E, 0x1C, 0x1C, //     ###    ###     ###
	0x1C, 0x1C, 0x1C, //    ###     ###     ###
	0x38, 0x1E, 0x3C, //   ###      ####   ####
	0x38, 0x0F, 0xF8, //   ###       #########
	0x70, 0x0F, 0xF0, //  ###        ########
	0xF0, 0x03, 0xE0, // ####          #####
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @720 '&' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x01, 0xF8, 0x00, //        ######
	0x07, 0xFC, 0x00, //      #########
	0x0F, 0xFE, 0x00, //     ###########
	0x0F, 0x0F, 0x00, //     ####    ####
	0x1C, 0x07, 0x00, //    ###       ###
	0x1C, 0x07, 0x00, //    ###       ###
	0x1C, 0x07, 0x00, //    ###       ###
	0x1C, 0x07, 0x00, //    ###       ###
	0x1E, 0x0E, 0x00, //    ####     ###
	0x0E, 0x1E, 0x00, //     ###    ####
	0x0F, 0x7C, 0x00, //     #### #####
	0x07, 0xF8, 0x00, //      ########
	0x07, 0xE0, 0x00, //      ######
	0x07, 0xC0, 0x00, //      #####
	0x1F, 0xE0, 0xE0, //    ########     ###
	0x1E, 0xF0, 0xE0, //    #### ####    ###
	0x3C, 0xF0, 0xE0, //   ####  ####    ###
	0x38, 0x78, 0xE0, //   ###    ####   ###
	0x70, 0x3D, 0xE0, //  ###      #### ####
	0x70, 0x3F, 0xC0, //  ###      ########
	0x70, 0x1F, 0xC0, //  ###       #######
	0x70, 0x0F, 0xC0, //  ###        ######
	0x70, 0x07, 0x80, //  ###         ####
	0x78, 0x07, 0xC0, //  ####        #####
	0x3C, 0x1F, 0xC0, //   ####     #######
	0x1F, 0xFF, 0xE0, //    ################
	0x0F, 0xF9, 0xF0, //     #########  #####
	0x07, 0xE0, 0xF8, //      ######     #####
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @840 ''' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x7C, 0x00, //          #####
	0x00, 0x7C, 0x00, //          #####
	0x00, 0x7C, 0x00, //          #####
	0x00, 0x7C, 0x00, //          #####
	0x00, 0x7C, 0x00, //          #####
	0x00, 0x7C, 0x00, //          #####
	0x00, 0x7C, 0x00, //          #####
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @960 '(' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x01, 0x00, //                #
	0x00, 0x03, 0x80, //               ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x1E, 0x00, //            ####
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x38, 0x00, //           ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0xF0, 0x00, //         ####
	0x00, 0xE0, 0x00, //         ###
	0x00, 0xE0, 0x00, //         ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x03, 0x80, 0x00, //       ###
	0x03, 0x80, 0x00, //       ###
	0x03, 0x80, 0x00, //       ###
	0x03, 0x80, 0x00, //       ###
	0x03, 0x80, 0x00, //       ###
	0x03, 0x80, 0x00, //       ###
	0x03, 0x80, 0x00, //       ###
	0x03, 0x80, 0x00, //       ###
	0x03, 0x80, 0x00, //       ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xE0, 0x00, //        ####
	0x00, 0xE0, 0x00, //         ###
	0x00, 0xF0, 0x00, //         ####
	0x00, 0x70, 0x00, //          ###
	0x00, 0x78, 0x00, //          ####
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x1E, 0x00, //            ####
	0x00, 0x0F, 0x00, //             ####
	0x00, 0x07, 0x80, //              ####
	0x00, 0x07, 0x00, //              ###
	0x00, 0x02, 0x00, //               #

	// @1080 ')' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x01, 0x00, 0x00, //        #
	0x03, 0x80, 0x00, //       ###
	0x07, 0x80, 0x00, //      ####
	0x03, 0xC0, 0x00, //       ####
	0x01, 0xE0, 0x00, //        ####
	0x00, 0xF0, 0x00, //         ####
	0x00, 0x78, 0x00, //          ####
	0x00, 0x38, 0x00, //           ###
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x1C, 0x00, //            ###
	0x00, 0x1E, 0x00, //            ####
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x1C, 0x00, //            ###
	0x00, 0x1C, 0x00, //            ###
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x38, 0x00, //           ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0xF0, 0x00, //         ####
	0x01, 0xE0, 0x00, //        ####
	0x01, 0xC0, 0x00, //        ###
	0x03, 0x80, 0x00, //       ###
	0x07, 0x80, 0x00, //      ####
	0x03, 0x00, 0x00, //       ##

	// @1200 '*' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x04, 0x38, 0x40, //      #    ###    #
	0x0E, 0x38, 0xC0, //     ###   ###   ##
	0x0F, 0xBB, 0xE0, //     ##### ### #####
	0x03, 0xFF, 0x80, //       ###########
	0x00, 0xFE, 0x00, //         #######
	0x00, 0x3C, 0x00, //           ####
	0x00, 0xFE, 0x00, //         #######
	0x03, 0xFF, 0x80, //       ###########
	0x0F, 0xBB, 0xE0, //     ##### ### #####
	0x0E, 0x38, 0xE0, //     ###   ###   ###
	0x04, 0x38, 0x40, //      #    ###    #
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @1320 '+' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x7F, 0xFF, 0xF0, //  ###################
	0x7F, 0xFF, 0xF0, //  ###################
	0x7F, 0xFF, 0xF0, //  ###################
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @1440 ',' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x70, 0x00, //          ###
	0x00, 0xF8, 0x00, //         #####
	0x00, 0xFC, 0x00, //         ######
	0x00, 0xFC, 0x00, //         ######
	0x00, 0x7C, 0x00, //          #####
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x78, 0x00, //          ####
	0x00, 0xF8, 0x00, //         #####
	0x07, 0xF0, 0x00, //      #######
	0x07, 0xC0, 0x00, //      #####
	0x07, 0x00, 0x00, //      ###
	0x00, 0x00, 0x00, //

	// @1560 '-' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x07, 0xFF, 0x80, //      ############
	0x07, 0xFF, 0x80, //      ############
	0x07, 0xFF, 0x80, //      ############
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @1680 '.' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x78, 0x00, //          ####
	0x00, 0x78, 0x00, //          ####
	0x00, 0xFC, 0x00, //         ######
	0x00, 0xFC, 0x00, //         ######
	0x00, 0xFC, 0x00, //         ######
	0x00, 0x78, 0x00, //          ####
	0x00, 0x78, 0x00, //          ####
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @1800 '/' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x01, 0xC0, //                ###
	0x00, 0x03, 0xC0, //               ####
	0x00, 0x03, 0x80, //               ###
	0x00, 0x03, 0x80, //               ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x0F, 0x00, //             ####
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x1C, 0x00, //            ###
	0x00, 0x1C, 0x00, //            ###
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0xF0, 0x00, //         ####
	0x00, 0xE0, 0x00, //         ###
	0x01, 0xE0, 0x00, //        ####
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x03, 0xC0, 0x00, //       ####
	0x03, 0x80, 0x00, //       ###
	0x07, 0x80, 0x00, //      ####
	0x07, 0x00, 0x00, //      ###
	0x07, 0x00, 0x00, //      ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x1E, 0x00, 0x00, //    ####
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x38, 0x00, 0x00, //   ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @1920 '0' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0xFC, 0x00, //         ######
	0x03, 0xFF, 0x00, //       ##########
	0x07, 0xFF, 0x80, //      ############
	0x0F, 0x87, 0xC0, //     #####    #####
	0x0E, 0x01, 0xC0, //     ###        ###
	0x1E, 0x00, 0xE0, //    ####         ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x38, 0x03, 0xF0, //   ###         ######
	0x38, 0x07, 0xF0, //   ###        #######
	0x38, 0x0F, 0x70, //   ###       #### ###
	0x38, 0x1E, 0x70, //   ###      ####  ###
	0x38, 0x7C, 0x70, //   ###    #####   ###
	0x38, 0xF8, 0x70, //   ###   #####    ###
	0x39, 0xE0, 0x70, //   ###  ####      ###
	0x3B, 0xC0, 0x70, //   ### ####       ###
	0x3F, 0x80, 0x70, //   #######        ###
	0x3F, 0x00, 0x70, //   ######         ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1C, 0x01, 0xE0, //    ###         ####
	0x0E, 0x01, 0xC0, //     ###        ###
	0x0F, 0x87, 0xC0, //     #####    #####
	0x07, 0xFF, 0x80, //      ############
	0x03, 0xFF, 0x00, //       ##########
	0x00, 0xFC, 0x00, //         ######
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @2040 '1' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x3C, 0x00, //           ####
	0x01, 0xFC, 0x00, //        #######
	0x07, 0xFC, 0x00, //      #########
	0x1F, 0xBC, 0x00, //    ###### ####
	0x3F, 0x3C, 0x00, //   ######  ####
	0x1C, 0x3C, 0x00, //    ###    ####
	0x10, 0x3C, 0x00, //    #      ####
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x3C, 0x00, //           ####
	0x1F, 0xFF, 0xE0, //    ################
	0x1F, 0xFF, 0xE0, //    ################
	0x1F, 0xFF, 0xE0, //    ################
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @2160 '2' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0xFC, 0x00, //         ######
	0x03, 0xFF, 0x00, //       ##########
	0x0F, 0xFF, 0x80, //     #############
	0x1F, 0x07, 0xC0, //    #####     #####
	0x0C, 0x03, 0xC0, //     ##        ####
	0x00, 0x01, 0xE0, //                ####
	0x00, 0x01, 0xE0, //                ####
	0x00, 0x01, 0xE0, //                ####
	0x00, 0x01, 0xE0, //                ####
	0x00, 0x01, 0xE0, //                ####
	0x00, 0x01, 0xE0, //                ####
	0x00, 0x03, 0xC0, //               ####
	0x00, 0x07, 0xC0, //              #####
	0x00, 0x0F, 0x80, //             #####
	0x00, 0x0F, 0x00, //             ####
	0x00, 0x1E, 0x00, //            ####
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x7C, 0x00, //          #####
	0x00, 0xF8, 0x00, //         #####
	0x01, 0xF0, 0x00, //        #####
	0x03, 0xE0, 0x00, //       #####
	0x07, 0xC0, 0x00, //      #####
	0x0F, 0x80, 0x00, //     #####
	0x1F, 0xFF, 0xF0, //    #################
	0x1F, 0xFF, 0xF0, //    #################
	0x1F, 0xFF, 0xF0, //    #################
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @2280 '3' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x03, 0xF8, 0x00, //       #######
	0x0F, 0xFE, 0x00, //     ###########
	0x0F, 0xFF, 0x00, //     ############
	0x0C, 0x0F, 0x00, //     ##      ####
	0x00, 0x07, 0x80, //              ####
	0x00, 0x03, 0x80, //               ###
	0x00, 0x03, 0x80, //               ###
	0x00, 0x03, 0x80, //               ###
	0x00, 0x03, 0x80, //               ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x0E, 0x00, //             ###
	0x03, 0xFC, 0x00, //       ########
	0x03, 0xFC, 0x00, //       ########
	0x03, 0xFF, 0x00, //       ##########
	0x00, 0x0F, 0x80, //             #####
	0x00, 0x03, 0x80, //               ###
	0x00, 0x01, 0xC0, //                ###
	0x00, 0x01, 0xC0, //                ###
	0x00, 0x01, 0xC0, //                ###
	0x00, 0x01, 0xC0, //                ###
	0x00, 0x01, 0xC0, //                ###
	0x00, 0x03, 0x80, //               ###
	0x00, 0x0F, 0x00, //             ####
	0x1F, 0xFF, 0x00, //    #############
	0x1F, 0xFC, 0x00, //    ###########
	0x1F, 0xF0, 0x00, //    #########
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @2400 '4' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x1F, 0x00, //            #####
	0x00, 0x1F, 0x00, //            #####
	0x00, 0x3F, 0x00, //           ######
	0x00, 0x7F, 0x00, //          #######
	0x00, 0x77, 0x00, //          ### ###
	0x00, 0xF7, 0x00, //         #### ###
	0x00, 0xE7, 0x00, //         ###  ###
	0x01, 0xC7, 0x00, //        ###   ###
	0x03, 0xC7, 0x00, //       ####   ###
	0x03, 0x87, 0x00, //       ###    ###
	0x07, 0x07, 0x00, //      ###     ###
	0x0F, 0x07, 0x00, //     ####     ###
	0x0E, 0x07, 0x00, //     ###      ###
	0x1E, 0x07, 0x00, //    ####      ###
	0x1C, 0x07, 0x00, //    ###       ###
	0x38, 0x07, 0x00, //   ###        ###
	0x78, 0x07, 0x00, //  ####        ###
	0x7F, 0xFF, 0xF8, //  ####################
	0x7F, 0xFF, 0xF8, //  ####################
	0x7F, 0xFF, 0xF8, //  ####################
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @2520 '5' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x1F, 0xFF, 0xC0, //    ###############
	0x1F, 0xFF, 0xC0, //    ###############
	0x1F, 0xFF, 0xC0, //    ###############
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1F, 0xF8, 0x00, //    ##########
	0x1F, 0xFF, 0x00, //    #############
	0x1F, 0xFF, 0x80, //    ##############
	0x00, 0x0F, 0xC0, //             ######
	0x00, 0x03, 0xC0, //               ####
	0x00, 0x01, 0xE0, //                ####
	0x00, 0x01, 0xE0, //                ####
	0x00, 0x01, 0xE0, //                ####
	0x00, 0x01, 0xE0, //                ####
	0x00, 0x01, 0xE0, //                ####
	0x00, 0x03, 0xC0, //               ####
	0x00, 0x07, 0xC0, //              #####
	0x00, 0x1F, 0x80, //            ######
	0x1F, 0xFF, 0x00, //    #############
	0x1F, 0xFC, 0x00, //    ###########
	0x1F, 0xF0, 0x00, //    #########
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @2640 '6' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x3F, 0x80, //           #######
	0x00, 0xFF, 0x80, //         #########
	0x03, 0xFF, 0x80, //       ###########
	0x07, 0xE0, 0x00, //      ######
	0x0F, 0x00, 0x00, //     ####
	0x0E, 0x00, 0x00, //     ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x18, 0x00, 0x00, //    ##
	0x38, 0x00, 0x00, //   ###
	0x38, 0xFE, 0x00, //   ###   #######
	0x3B, 0xFF, 0x00, //   ### ##########
	0x3F, 0xFF, 0x80, //   ###############
	0x3F, 0x03, 0xC0, //   ######      ####
	0x3C, 0x01, 0xE0, //   ####         ####
	0x38, 0x00, 0xE0, //   ###           ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x3C, 0x00, 0xE0, //   ####          ###
	0x1C, 0x01, 0xE0, //    ###         ####
	0x1E, 0x01, 0xC0, //    ####        ###
	0x0F, 0x07, 0xC0, //     ####     #####
	0x0F, 0xFF, 0x80, //     #############
	0x07, 0xFF, 0x00, //      ###########
	0x01, 0xFC, 0x00, //        #######
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @2760 '7' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x3F, 0xFF, 0xE0, //   #################
	0x3F, 0xFF, 0xE0, //   #################
	0x3F, 0xFF, 0xE0, //   #################
	0x00, 0x01, 0xE0, //                ####
	0x00, 0x01, 0xC0, //                ###
	0x00, 0x03, 0xC0, //               ####
	0x00, 0x03, 0x80, //               ###
	0x00, 0x07, 0x80, //              ####
	0x00, 0x07, 0x00, //              ###
	0x00, 0x0F, 0x00, //             ####
	0x00, 0x0F, 0x00, //             ####
	0x00, 0x1E, 0x00, //            ####
	0x00, 0x1E, 0x00, //            ####
	0x00, 0x1C, 0x00, //            ###
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x38, 0x00, //           ###
	0x00, 0x78, 0x00, //          ####
	0x00, 0x70, 0x00, //          ###
	0x00, 0xF0, 0x00, //         ####
	0x00, 0xE0, 0x00, //         ###
	0x01, 0xE0, 0x00, //        ####
	0x01, 0xE0, 0x00, //        ####
	0x03, 0xC0, 0x00, //       ####
	0x03, 0xC0, 0x00, //       ####
	0x07, 0x80, 0x00, //      ####
	0x07, 0x80, 0x00, //      ####
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @2880 '8' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0xFE, 0x00, //         #######
	0x03, 0xFF, 0x80, //       ###########
	0x0F, 0xFF, 0xC0, //     ##############
	0x0F, 0x03, 0xE0, //     ####      #####
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1E, 0x01, 0xC0, //    ####        ###
	0x0F, 0x03, 0xC0, //     ####      ####
	0x07, 0xCF, 0x80, //      #####  #####
	0x03, 0xFF, 0x00, //       ##########
	0x01, 0xFE, 0x00, //        ########
	0x03, 0xFF, 0x00, //       ##########
	0x07, 0xCF, 0xC0, //      #####  ######
	0x0F, 0x03, 0xE0, //     ####      #####
	0x1E, 0x01, 0xE0, //    ####        ####
	0x3C, 0x00, 0xF0, //   ####          ####
	0x3C, 0x00, 0xF0, //   ####          ####
	0x3C, 0x00, 0xF0, //   ####          ####
	0x3C, 0x00, 0xF0, //   ####          ####
	0x3E, 0x01, 0xF0, //   #####        #####
	0x1F, 0x03, 0xE0, //    #####      #####
	0x1F, 0xFF, 0xC0, //    ###############
	0x07, 0xFF, 0x80, //      ############
	0x01, 0xFE, 0x00, //        ########
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @3000 '9' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x01, 0xFC, 0x00, //        #######
	0x03, 0xFE, 0x00, //       #########
	0x0F, 0xFF, 0x00, //     ############
	0x0F, 0x07, 0x80, //     ####     ####
	0x1C, 0x03, 0xC0, //    ###        ####
	0x3C, 0x01, 0xC0, //   ####         ###
	0x38, 0x01, 0xC0, //   ###          ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x1C, 0x01, 0xE0, //    ###         ####
	0x1E, 0x07, 0xE0, //    ####      ######
	0x0F, 0xFF, 0xE0, //     ###############
	0x07, 0xFE, 0xE0, //      ########## ###
	0x01, 0xF8, 0xE0, //        ######   ###
	0x00, 0x00, 0xE0, //                 ###
	0x00, 0x00, 0xC0, //                 ##
	0x00, 0x01, 0xC0, //                ###
	0x00, 0x01, 0xC0, //                ###
	0x00, 0x03, 0x80, //               ###
	0x00, 0x07, 0x80, //              ####
	0x00, 0x3F, 0x00, //           ######
	0x0F, 0xFE, 0x00, //     ###########
	0x0F, 0xF8, 0x00, //     #########
	0x0F, 0xC0, 0x00, //     ######
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @3120 ':' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x78, 0x00, //          ####
	0x00, 0xFC, 0x00, //         ######
	0x00, 0xFC, 0x00, //         ######
	0x00, 0xFC, 0x00, //         ######
	0x00, 0xFC, 0x00, //         ######
	0x00, 0x78, 0x00, //          ####
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x78, 0x00, //          ####
	0x00, 0xFC, 0x00, //         ######
	0x00, 0xFC, 0x00, //         ######
	0x00, 0xFC, 0x00, //         ######
	0x00, 0xFC, 0x00, //         ######
	0x00, 0x78, 0x00, //          ####
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @3240 ';' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x78, 0x00, //          ####
	0x00, 0xFC, 0x00, //         ######
	0x00, 0xFC, 0x00, //         ######
	0x00, 0xFC, 0x00, //         ######
	0x00, 0xFC, 0x00, //         ######
	0x00, 0x78, 0x00, //          ####
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x70, 0x00, //          ###
	0x00, 0xF8, 0x00, //         #####
	0x00, 0xFC, 0x00, //         ######
	0x00, 0xFC, 0x00, //         ######
	0x00, 0x7C, 0x00, //          #####
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x78, 0x00, //          ####
	0x00, 0xF8, 0x00, //         #####
	0x07, 0xF0, 0x00, //      #######
	0x07, 0xC0, 0x00, //      #####
	0x07, 0x00, 0x00, //      ###
	0x00, 0x00, 0x00, //

	// @3360 '<' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x01, 0x00, //                #
	0x00, 0x03, 0x80, //               ###
	0x00, 0x07, 0xC0, //              #####
	0x00, 0x0F, 0x00, //             ####
	0x00, 0x1E, 0x00, //            ####
	0x00, 0x7C, 0x00, //          #####
	0x00, 0xF8, 0x00, //         #####
	0x01, 0xF0, 0x00, //        #####
	0x03, 0xE0, 0x00, //       #####
	0x07, 0xC0, 0x00, //      #####
	0x0F, 0x80, 0x00, //     #####
	0x0F, 0x80, 0x00, //     #####
	0x07, 0xC0, 0x00, //      #####
	0x03, 0xE0, 0x00, //       #####
	0x01, 0xF0, 0x00, //        #####
	0x00, 0xF8, 0x00, //         #####
	0x00, 0x7C, 0x00, //          #####
	0x00, 0x1E, 0x00, //            ####
	0x00, 0x0F, 0x00, //             ####
	0x00, 0x07, 0xC0, //              #####
	0x00, 0x03, 0x80, //               ###
	0x00, 0x01, 0x00, //                #
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @3480 '=' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x1F, 0xFF, 0xF0, //    #################
	0x1F, 0xFF, 0xF0, //    #################
	0x1F, 0xFF, 0xF0, //    #################
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x1F, 0xFF, 0xF0, //    #################
	0x1F, 0xFF, 0xF0, //    #################
	0x1F, 0xFF, 0xF0, //    #################
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @3600 '>' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x02, 0x00, 0x00, //       #
	0x07, 0x00, 0x00, //      ###
	0x0F, 0x80, 0x00, //     #####
	0x07, 0xC0, 0x00, //      #####
	0x01, 0xE0, 0x00, //        ####
	0x00, 0xF8, 0x00, //         #####
	0x00, 0x7C, 0x00, //          #####
	0x00, 0x3E, 0x00, //           #####
	0x00, 0x1F, 0x00, //            #####
	0x00, 0x0F, 0x80, //             #####
	0x00, 0x07, 0xC0, //              #####
	0x00, 0x07, 0xC0, //              #####
	0x00, 0x0F, 0x80, //             #####
	0x00, 0x1F, 0x00, //            #####
	0x00, 0x3E, 0x00, //           #####
	0x00, 0x7C, 0x00, //          #####
	0x00, 0xF8, 0x00, //         #####
	0x01, 0xE0, 0x00, //        ####
	0x03, 0xC0, 0x00, //       ####
	0x0F, 0x80, 0x00, //     #####
	0x07, 0x00, 0x00, //      ###
	0x02, 0x00, 0x00, //       #
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @3720 '?' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x03, 0xE0, 0x00, //       #####
	0x03, 0xF8, 0x00, //       #######
	0x03, 0xFE, 0x00, //       #########
	0x00, 0x3F, 0x00, //           ######
	0x00, 0x0F, 0x80, //             #####
	0x00, 0x07, 0x80, //              ####
	0x00, 0x07, 0xC0, //              #####
	0x00, 0x03, 0xC0, //               ####
	0x00, 0x03, 0xC0, //               ####
	0x00, 0x03, 0xC0, //               ####
	0x00, 0x03, 0xC0, //               ####
	0x00, 0x03, 0xC0, //               ####
	0x00, 0x07, 0x80, //              ####
	0x00, 0xFF, 0x80, //         #########
	0x00, 0xFF, 0x00, //         ########
	0x00, 0xFC, 0x00, //         ######
	0x00, 0xE0, 0x00, //         ###
	0x00, 0xE0, 0x00, //         ###
	0x00, 0xE0, 0x00, //         ###
	0x00, 0xE0, 0x00, //         ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0xE0, 0x00, //         ###
	0x01, 0xF0, 0x00, //        #####
	0x01, 0xF0, 0x00, //        #####
	0x01, 0xF0, 0x00, //        #####
	0x00, 0xE0, 0x00, //         ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @3840 '@' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x3F, 0x00, //           ######
	0x00, 0xFF, 0xC0, //         ##########
	0x03, 0xC1, 0xE0, //       ####     ####
	0x07, 0x80, 0xF0, //      ####       ####
	0x07, 0x00, 0x70, //      ###         ###
	0x0E, 0x00, 0x38, //     ###           ###
	0x1C, 0x00, 0x38, //    ###            ###
	0x1C, 0x00, 0x38, //    ###            ###
	0x38, 0x00, 0x1C, //   ###              ###
	0x38, 0x00, 0x1C, //   ###              ###
	0x38, 0x3F, 0x9C, //   ###     #######  ###
	0x70, 0x7F, 0x9C, //  ###     ########  ###
	0x70, 0xFF, 0x9C, //  ###    #########  ###
	0x71, 0xE7, 0x9C, //  ###   ####  ####  ###
	0x71, 0xC7, 0x9C, //  ###   ###   ####  ###
	0xE1, 0xC7, 0x1C, // ###    ###   ###   ###
	0xE1, 0x87, 0x1C, // ###    ##    ###   ###
	0xE3, 0x87, 0x1C, // ###   ###    ###   ###
	0xE3, 0x87, 0x1C, // ###   ###    ###   ###
	0xE3, 0x87, 0x1C, // ###   ###    ###   ###
	0xE3, 0x87, 0x1C, // ###   ###    ###   ###
	0xE3, 0x87, 0x38, // ###   ###    ###  ###
	0xE3, 0x8F, 0x38, // ###   ###   ####  ###
	0xE3, 0x9F, 0x38, // ###   ###  #####  ###
	0xE3, 0xFF, 0xF0, // ###   ##############
	0xE1, 0xFB, 0xF0, // ###    ###### ######
	0xE0, 0xF1, 0xC0, // ###     ####   ###
	0x70, 0x00, 0x00, //  ###
	0x70, 0x00, 0x00, //  ###
	0x70, 0x00, 0x00, //  ###
	0x38, 0x00, 0x00, //   ###
	0x38, 0x00, 0x00, //   ###
	0x1C, 0x00, 0x80, //    ###          #
	0x0F, 0x07, 0x80, //     ####     ####
	0x07, 0xFF, 0x80, //      ############
	0x01, 0xFC, 0x00, //        #######

	// @3960 'A' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0xF8, 0x00, //         #####
	0x00, 0xFC, 0x00, //         ######
	0x01, 0xFC, 0x00, //        #######
	0x01, 0xDC, 0x00, //        ### ###
	0x01, 0xDC, 0x00, //        ### ###
	0x03, 0xDE, 0x00, //       #### ####
	0x03, 0x8E, 0x00, //       ###   ###
	0x03, 0x8E, 0x00, //       ###   ###
	0x07, 0x8F, 0x00, //      ####   ####
	0x07, 0x07, 0x00, //      ###     ###
	0x07, 0x07, 0x00, //      ###     ###
	0x0F, 0x07, 0x80, //     ####     ####
	0x0E, 0x03, 0x80, //     ###       ###
	0x0E, 0x03, 0x80, //     ###       ###
	0x1E, 0x03, 0xC0, //    ####       ####
	0x1C, 0x03, 0xC0, //    ###        ####
	0x1C, 0x01, 0xC0, //    ###         ###
	0x3F, 0xFF, 0xE0, //   #################
	0x3F, 0xFF, 0xE0, //   #################
	0x3F, 0xFF, 0xE0, //   #################
	0x78, 0x00, 0xF0, //  ####           ####
	0x78, 0x00, 0xF0, //  ####           ####
	0x70, 0x00, 0x70, //  ###             ###
	0xF0, 0x00, 0x78, // ####             ####
	0xF0, 0x00, 0x78, // ####             ####
	0xE0, 0x00, 0x38, // ###               ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @4080 'B' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x1F, 0xFC, 0x00, //    ###########
	0x1F, 0xFF, 0x00, //    #############
	0x1F, 0xFF, 0x80, //    ##############
	0x1C, 0x07, 0x80, //    ###       ####
	0x1C, 0x03, 0xC0, //    ###        ####
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x03, 0x80, //    ###        ###
	0x1C, 0x07, 0x80, //    ###       ####
	0x1F, 0xFE, 0x00, //    ############
	0x1F, 0xFE, 0x00, //    ############
	0x1F, 0xFF, 0x80, //    ##############
	0x1C, 0x07, 0xC0, //    ###       #####
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x07, 0xC0, //    ###       #####
	0x1F, 0xFF, 0x80, //    ##############
	0x1F, 0xFF, 0x00, //    #############
	0x1F, 0xF8, 0x00, //    ##########
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @4200 'C' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x3F, 0x00, //           ######
	0x01, 0xFF, 0xC0, //        ###########
	0x03, 0xFF, 0xE0, //       #############
	0x07, 0xE0, 0xE0, //      ######     ###
	0x0F, 0x80, 0x20, //     #####         #
	0x0F, 0x00, 0x00, //     ####
	0x1E, 0x00, 0x00, //    ####
	0x1E, 0x00, 0x00, //    ####
	0x1E, 0x00, 0x00, //    ####
	0x3C, 0x00, 0x00, //   ####
	0x3C, 0x00, 0x00, //   ####
	0x3C, 0x00, 0x00, //   ####
	0x3C, 0x00, 0x00, //   ####
	0x3C, 0x00, 0x00, //   ####
	0x3C, 0x00, 0x00, //   ####
	0x3C, 0x00, 0x00, //   ####
	0x3C, 0x00, 0x00, //   ####
	0x3E, 0x00, 0x00, //   #####
	0x1E, 0x00, 0x00, //    ####
	0x1E, 0x00, 0x00, //    ####
	0x1F, 0x00, 0x00, //    #####
	0x0F, 0x80, 0x00, //     #####
	0x07, 0xC0, 0x60, //      #####       ##
	0x07, 0xFF, 0xE0, //      ##############
	0x01, 0xFF, 0xE0, //        ############
	0x00, 0x7F, 0x80, //          ########
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @4320 'D' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x3F, 0xF8, 0x00, //   ###########
	0x3F, 0xFF, 0x00, //   ##############
	0x3F, 0xFF, 0x80, //   ###############
	0x38, 0x0F, 0xC0, //   ###       ######
	0x38, 0x03, 0xE0, //   ###         #####
	0x38, 0x01, 0xF0, //   ###          #####
	0x38, 0x00, 0xF0, //   ###           ####
	0x38, 0x00, 0xF0, //   ###           ####
	0x38, 0x00, 0x78, //   ###            ####
	0x38, 0x00, 0x78, //   ###            ####
	0x38, 0x00, 0x78, //   ###            ####
	0x38, 0x00, 0x78, //   ###            ####
	0x38, 0x00, 0x78, //   ###            ####
	0x38, 0x00, 0x78, //   ###            ####
	0x38, 0x00, 0x78, //   ###            ####
	0x38, 0x00, 0x78, //   ###            ####
	0x38, 0x00, 0x78, //   ###            ####
	0x38, 0x00, 0xF0, //   ###           ####
	0x38, 0x00, 0xF0, //   ###           ####
	0x38, 0x01, 0xF0, //   ###          #####
	0x38, 0x01, 0xE0, //   ###          ####
	0x38, 0x03, 0xE0, //   ###         #####
	0x38, 0x1F, 0xC0, //   ###      #######
	0x3F, 0xFF, 0x80, //   ###############
	0x3F, 0xFE, 0x00, //   #############
	0x3F, 0xF0, 0x00, //   ##########
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @4440 'E' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x0F, 0xFF, 0xE0, //     ###############
	0x0F, 0xFF, 0xE0, //     ###############
	0x0F, 0xFF, 0xE0, //     ###############
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0F, 0xFF, 0xE0, //     ###############
	0x0F, 0xFF, 0xE0, //     ###############
	0x0F, 0xFF, 0xE0, //     ###############
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0F, 0xFF, 0xE0, //     ###############
	0x0F, 0xFF, 0xE0, //     ###############
	0x0F, 0xFF, 0xE0, //     ###############
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @4560 'F' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x0F, 0xFF, 0xC0, //     ##############
	0x0F, 0xFF, 0xC0, //     ##############
	0x0F, 0xFF, 0xC0, //     ##############
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0F, 0xFF, 0x80, //     #############
	0x0F, 0xFF, 0x80, //     #############
	0x0F, 0xFF, 0x80, //     #############
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @4680 'G' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x7F, 0x00, //          #######
	0x01, 0xFF, 0xC0, //        ###########
	0x07, 0xFF, 0xE0, //      ##############
	0x0F, 0xC0, 0xE0, //     ######      ###
	0x1F, 0x00, 0x20, //    #####          #
	0x1E, 0x00, 0x00, //    ####
	0x3E, 0x00, 0x00, //   #####
	0x3C, 0x00, 0x00, //   ####
	0x3C, 0x00, 0x00, //   ####
	0x78, 0x00, 0x00, //  ####
	0x78, 0x00, 0x00, //  ####
	0x78, 0x1F, 0xE0, //  ####      ########
	0x78, 0x1F, 0xE0, //  ####      ########
	0x78, 0x1F, 0xE0, //  ####      ########
	0x78, 0x00, 0xE0, //  ####           ###
	0x78, 0x00, 0xE0, //  ####           ###
	0x78, 0x00, 0xE0, //  ####           ###
	0x7C, 0x00, 0xE0, //  #####          ###
	0x3C, 0x00, 0xE0, //   ####          ###
	0x3C, 0x00, 0xE0, //   ####          ###
	0x3E, 0x00, 0xE0, //   #####         ###
	0x1F, 0x00, 0xE0, //    #####        ###
	0x0F, 0xC0, 0xE0, //     ######      ###
	0x07, 0xFF, 0xE0, //      ##############
	0x03, 0xFF, 0xE0, //       #############
	0x00, 0xFF, 0x00, //         ########
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @4800 'H' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x3F, 0xFF, 0xF0, //   ##################
	0x3F, 0xFF, 0xF0, //   ##################
	0x3F, 0xFF, 0xF0, //   ##################
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @4920 'I' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x1F, 0xFF, 0xC0, //    ###############
	0x1F, 0xFF, 0xC0, //    ###############
	0x1F, 0xFF, 0xC0, //    ###############
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x1F, 0xFF, 0xC0, //    ###############
	0x1F, 0xFF, 0xC0, //    ###############
	0x1F, 0xFF, 0xC0, //    ###############
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @5040 'J' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x0F, 0xFF, 0x80, //     #############
	0x0F, 0xFF, 0x80, //     #############
	0x0F, 0xFF, 0x80, //     #############
	0x00, 0x03, 0x80, //               ###
	0x00, 0x03, 0x80, //               ###
	0x00, 0x03, 0x80, //               ###
	0x00, 0x03, 0x80, //               ###
	0x00, 0x03, 0x80, //               ###
	0x00, 0x03, 0x80, //               ###
	0x00, 0x03, 0x80, //               ###
	0x00, 0x03, 0x80, //               ###
	0x00, 0x03, 0x80, //               ###
	0x00, 0x03, 0x80, //               ###
	0x00, 0x03, 0x80, //               ###
	0x00, 0x03, 0x80, //               ###
	0x00, 0x03, 0x80, //               ###
	0x00, 0x03, 0x80, //               ###
	0x00, 0x03, 0x80, //               ###
	0x00, 0x03, 0x80, //               ###
	0x00, 0x03, 0x80, //               ###
	0x00, 0x03, 0x80, //               ###
	0x08, 0x07, 0x00, //     #        ###
	0x0E, 0x0F, 0x00, //     ###     ####
	0x0F, 0xFE, 0x00, //     ###########
	0x07, 0xFC, 0x00, //      #########
	0x01, 0xF0, 0x00, //        #####
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @5160 'K' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x1C, 0x00, 0xF0, //    ###          ####
	0x1C, 0x01, 0xE0, //    ###         ####
	0x1C, 0x03, 0xC0, //    ###        ####
	0x1C, 0x07, 0x80, //    ###       ####
	0x1C, 0x0F, 0x00, //    ###      ####
	0x1C, 0x0E, 0x00, //    ###      ###
	0x1C, 0x1E, 0x00, //    ###     ####
	0x1C, 0x3C, 0x00, //    ###    ####
	0x1C, 0x78, 0x00, //    ###   ####
	0x1C, 0xF0, 0x00, //    ###  ####
	0x1C, 0xE0, 0x00, //    ###  ###
	0x1D, 0xC0, 0x00, //    ### ###
	0x1F, 0x80, 0x00, //    ######
	0x1F, 0xC0, 0x00, //    #######
	0x1D, 0xE0, 0x00, //    ### ####
	0x1C, 0xF0, 0x00, //    ###  ####
	0x1C, 0x78, 0x00, //    ###   ####
	0x1C, 0x78, 0x00, //    ###   ####
	0x1C, 0x3C, 0x00, //    ###    ####
	0x1C, 0x1E, 0x00, //    ###     ####
	0x1C, 0x0F, 0x00, //    ###      ####
	0x1C, 0x0F, 0x80, //    ###      #####
	0x1C, 0x07, 0xC0, //    ###       #####
	0x1C, 0x03, 0xC0, //    ###        ####
	0x1C, 0x01, 0xE0, //    ###         ####
	0x1C, 0x00, 0xF0, //    ###          ####
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @5280 'L' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x07, 0x00, 0x00, //      ###
	0x07, 0x00, 0x00, //      ###
	0x07, 0x00, 0x00, //      ###
	0x07, 0x00, 0x00, //      ###
	0x07, 0x00, 0x00, //      ###
	0x07, 0x00, 0x00, //      ###
	0x07, 0x00, 0x00, //      ###
	0x07, 0x00, 0x00, //      ###
	0x07, 0x00, 0x00, //      ###
	0x07, 0x00, 0x00, //      ###
	0x07, 0x00, 0x00, //      ###
	0x07, 0x00, 0x00, //      ###
	0x07, 0x00, 0x00, //      ###
	0x07, 0x00, 0x00, //      ###
	0x07, 0x00, 0x00, //      ###
	0x07, 0x00, 0x00, //      ###
	0x07, 0x00, 0x00, //      ###
	0x07, 0x00, 0x00, //      ###
	0x07, 0x00, 0x00, //      ###
	0x07, 0x00, 0x00, //      ###
	0x07, 0x00, 0x00, //      ###
	0x07, 0x00, 0x00, //      ###
	0x07, 0x00, 0x00, //      ###
	0x07, 0xFF, 0xF0, //      ###############
	0x07, 0xFF, 0xF0, //      ###############
	0x07, 0xFF, 0xF0, //      ###############
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @5400 'M' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x3C, 0x00, 0xF0, //   ####          ####
	0x3E, 0x00, 0xF0, //   #####         ####
	0x3E, 0x01, 0xF0, //   #####        #####
	0x3E, 0x01, 0xF8, //   #####        ######
	0x37, 0x03, 0xB8, //   ## ###      ### ###
	0x37, 0x03, 0xB8, //   ## ###      ### ###
	0x37, 0x03, 0x38, //   ## ###      ##  ###
	0x33, 0x87, 0x38, //   ##  ###    ###  ###
	0x33, 0x87, 0x38, //   ##  ###    ###  ###
	0x71, 0x86, 0x38, //  ###   ##    ##   ###
	0x71, 0xCE, 0x38, //  ###   ###  ###   ###
	0x71, 0xCE, 0x38, //  ###   ###  ###   ###
	0x70, 0xCC, 0x38, //  ###    ##  ##    ###
	0x70, 0xFC, 0x38, //  ###    ######    ###
	0x70, 0xF8, 0x38, //  ###    #####     ###
	0x70, 0x78, 0x38, //  ###     ####     ###
	0x70, 0x78, 0x38, //  ###     ####     ###
	0x70, 0x70, 0x38, //  ###     ###      ###
	0x70, 0x00, 0x38, //  ###              ###
	0x70, 0x00, 0x38, //  ###              ###
	0x70, 0x00, 0x38, //  ###              ###
	0x70, 0x00, 0x38, //  ###              ###
	0x70, 0x00, 0x38, //  ###              ###
	0x70, 0x00, 0x38, //  ###              ###
	0x70, 0x00, 0x38, //  ###              ###
	0x70, 0x00, 0x38, //  ###              ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @5520 'N' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x3E, 0x00, 0x70, //   #####          ###
	0x3E, 0x00, 0x70, //   #####          ###
	0x3F, 0x00, 0x70, //   ######         ###
	0x3F, 0x00, 0x70, //   ######         ###
	0x3F, 0x80, 0x70, //   #######        ###
	0x3B, 0x80, 0x70, //   ### ###        ###
	0x3B, 0xC0, 0x70, //   ### ####       ###
	0x39, 0xC0, 0x70, //   ###  ###       ###
	0x39, 0xE0, 0x70, //   ###  ####      ###
	0x39, 0xE0, 0x70, //   ###  ####      ###
	0x38, 0xF0, 0x70, //   ###   ####     ###
	0x38, 0xF0, 0x70, //   ###   ####     ###
	0x38, 0x78, 0x70, //   ###    ####    ###
	0x38, 0x78, 0x70, //   ###    ####    ###
	0x38, 0x3C, 0x70, //   ###     ####   ###
	0x38, 0x3C, 0x70, //   ###     ####   ###
	0x38, 0x1C, 0x70, //   ###      ###   ###
	0x38, 0x1E, 0x70, //   ###      ####  ###
	0x38, 0x0E, 0x70, //   ###       ###  ###
	0x38, 0x0F, 0x70, //   ###       #### ###
	0x38, 0x07, 0x70, //   ###        ### ###
	0x38, 0x07, 0xF0, //   ###        #######
	0x38, 0x03, 0xF0, //   ###         ######
	0x38, 0x03, 0xF0, //   ###         ######
	0x38, 0x01, 0xF0, //   ###          #####
	0x38, 0x01, 0xF0, //   ###          #####
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @5640 'O' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0xFE, 0x00, //         #######
	0x03, 0xFF, 0x80, //       ###########
	0x07, 0xFF, 0xC0, //      #############
	0x0F, 0x03, 0xE0, //     ####      #####
	0x1E, 0x01, 0xE0, //    ####        ####
	0x1C, 0x00, 0xF0, //    ###          ####
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x78, 0x00, 0x38, //  ####             ###
	0x70, 0x00, 0x38, //  ###              ###
	0x70, 0x00, 0x38, //  ###              ###
	0x70, 0x00, 0x38, //  ###              ###
	0x70, 0x00, 0x38, //  ###              ###
	0x70, 0x00, 0x38, //  ###              ###
	0x70, 0x00, 0x38, //  ###              ###
	0x70, 0x00, 0x38, //  ###              ###
	0x70, 0x00, 0x38, //  ###              ###
	0x78, 0x00, 0x78, //  ####            ####
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x3C, 0x00, 0xE0, //   ####          ###
	0x1E, 0x01, 0xE0, //    ####        ####
	0x1F, 0x03, 0xC0, //    #####      ####
	0x0F, 0xFF, 0x80, //     #############
	0x07, 0xFF, 0x00, //      ###########
	0x01, 0xFC, 0x00, //        #######
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @5760 'P' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x1F, 0xFC, 0x00, //    ###########
	0x1F, 0xFF, 0x80, //    ##############
	0x1F, 0xFF, 0xC0, //    ###############
	0x1C, 0x07, 0xE0, //    ###       ######
	0x1C, 0x01, 0xE0, //    ###         ####
	0x1C, 0x01, 0xF0, //    ###         #####
	0x1C, 0x00, 0xF0, //    ###          ####
	0x1C, 0x00, 0xF0, //    ###          ####
	0x1C, 0x00, 0xF0, //    ###          ####
	0x1C, 0x00, 0xF0, //    ###          ####
	0x1C, 0x00, 0xF0, //    ###          ####
	0x1C, 0x01, 0xE0, //    ###         ####
	0x1C, 0x03, 0xE0, //    ###        #####
	0x1C, 0x07, 0xC0, //    ###       #####
	0x1F, 0xFF, 0x80, //    ##############
	0x1F, 0xFF, 0x00, //    #############
	0x1F, 0xF8, 0x00, //    ##########
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @5880 'Q' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0xFE, 0x00, //         #######
	0x03, 0xFF, 0x80, //       ###########
	0x07, 0xFF, 0xC0, //      #############
	0x0F, 0x87, 0xE0, //     #####    ######
	0x1E, 0x01, 0xE0, //    ####        ####
	0x1E, 0x01, 0xF0, //    ####        #####
	0x3C, 0x00, 0xF0, //   ####          ####
	0x3C, 0x00, 0xF0, //   ####          ####
	0x38, 0x00, 0x78, //   ###            ####
	0x78, 0x00, 0x78, //  ####            ####
	0x78, 0x00, 0x78, //  ####            ####
	0x78, 0x00, 0x78, //  ####            ####
	0x78, 0x00, 0x78, //  ####            ####
	0x78, 0x00, 0x78, //  ####            ####
	0x78, 0x00, 0x78, //  ####            ####
	0x78, 0x00, 0x78, //  ####            ####
	0x78, 0x00, 0x78, //  ####            ####
	0x78, 0x00, 0x78, //  ####            ####
	0x3C, 0x00, 0xF0, //   ####          ####
	0x3C, 0x00, 0xF0, //   ####          ####
	0x3E, 0x01, 0xE0, //   #####        ####
	0x1E, 0x01, 0xE0, //    ####        ####
	0x1F, 0x87, 0xC0, //    ######    #####
	0x0F, 0xFF, 0x80, //     #############
	0x07, 0xFF, 0x00, //      ###########
	0x01, 0xFC, 0x00, //        #######
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x78, 0x00, //          ####
	0x00, 0x3C, 0x18, //           ####     ##
	0x00, 0x1F, 0xFC, //            ###########
	0x00, 0x0F, 0xF8, //             #########
	0x00, 0x07, 0xE0, //              ######
	0x00, 0x00, 0x00, //

	// @6000 'R' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x1F, 0xFC, 0x00, //    ###########
	0x1F, 0xFF, 0x00, //    #############
	0x1F, 0xFF, 0x80, //    ##############
	0x1C, 0x07, 0xC0, //    ###       #####
	0x1C, 0x03, 0xE0, //    ###        #####
	0x1C, 0x01, 0xE0, //    ###         ####
	0x1C, 0x01, 0xE0, //    ###         ####
	0x1C, 0x01, 0xE0, //    ###         ####
	0x1C, 0x01, 0xE0, //    ###         ####
	0x1C, 0x03, 0xE0, //    ###        #####
	0x1C, 0x03, 0xC0, //    ###        ####
	0x1C, 0x0F, 0x80, //    ###      #####
	0x1F, 0xFF, 0x00, //    #############
	0x1F, 0xFE, 0x00, //    ############
	0x1F, 0xFC, 0x00, //    ###########
	0x1C, 0x1E, 0x00, //    ###     ####
	0x1C, 0x0F, 0x00, //    ###      ####
	0x1C, 0x07, 0x80, //    ###       ####
	0x1C, 0x07, 0x80, //    ###       ####
	0x1C, 0x03, 0xC0, //    ###        ####
	0x1C, 0x03, 0xC0, //    ###        ####
	0x1C, 0x01, 0xE0, //    ###         ####
	0x1C, 0x01, 0xE0, //    ###         ####
	0x1C, 0x00, 0xF0, //    ###          ####
	0x1C, 0x00, 0xF0, //    ###          ####
	0x1C, 0x00, 0x78, //    ###           ####
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @6120 'S' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x01, 0xFE, 0x00, //        ########
	0x07, 0xFF, 0x80, //      ############
	0x0F, 0xFF, 0x80, //     #############
	0x1F, 0x01, 0x80, //    #####       ##
	0x3E, 0x00, 0x00, //   #####
	0x3C, 0x00, 0x00, //   ####
	0x3C, 0x00, 0x00, //   ####
	0x3C, 0x00, 0x00, //   ####
	0x3E, 0x00, 0x00, //   #####
	0x1F, 0x00, 0x00, //    #####
	0x1F, 0xC0, 0x00, //    #######
	0x0F, 0xF0, 0x00, //     ########
	0x03, 0xFC, 0x00, //       ########
	0x00, 0xFF, 0x00, //         ########
	0x00, 0x3F, 0x80, //           #######
	0x00, 0x0F, 0xC0, //             ######
	0x00, 0x03, 0xE0, //               #####
	0x00, 0x01, 0xE0, //                ####
	0x00, 0x01, 0xE0, //                ####
	0x00, 0x01, 0xE0, //                ####
	0x00, 0x01, 0xE0, //                ####
	0x00, 0x03, 0xC0, //               ####
	0x30, 0x07, 0xC0, //   ##         #####
	0x3F, 0xFF, 0x80, //   ###############
	0x3F, 0xFF, 0x00, //   ##############
	0x0F, 0xF8, 0x00, //     #########
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @6240 'T' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x7F, 0xFF, 0xF0, //  ###################
	0x7F, 0xFF, 0xF0, //  ###################
	0x7F, 0xFF, 0xF0, //  ###################
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @6360 'U' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x38, 0x00, 0xE0, //   ###           ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x3C, 0x01, 0xC0, //   ####         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1F, 0x07, 0xC0, //    #####     #####
	0x0F, 0xFF, 0x80, //     #############
	0x07, 0xFF, 0x00, //      ###########
	0x01, 0xFC, 0x00, //        #######
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @6480 'V' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x78, 0x00, 0x1C, //  ####              ###
	0x78, 0x00, 0x3C, //  ####             ####
	0x78, 0x00, 0x3C, //  ####             ####
	0x3C, 0x00, 0x38, //   ####            ###
	0x3C, 0x00, 0x78, //   ####           ####
	0x3C, 0x00, 0x78, //   ####           ####
	0x1C, 0x00, 0x70, //    ###           ###
	0x1E, 0x00, 0xF0, //    ####         ####
	0x1E, 0x00, 0xF0, //    ####         ####
	0x0E, 0x00, 0xE0, //     ###         ###
	0x0F, 0x01, 0xE0, //     ####       ####
	0x0F, 0x01, 0xE0, //     ####       ####
	0x07, 0x01, 0xC0, //      ###       ###
	0x07, 0x83, 0xC0, //      ####     ####
	0x07, 0x83, 0xC0, //      ####     ####
	0x03, 0x83, 0x80, //       ###     ###
	0x03, 0xC7, 0x80, //       ####   ####
	0x03, 0xC7, 0x80, //       ####   ####
	0x01, 0xC7, 0x00, //        ###   ###
	0x01, 0xE7, 0x00, //        ####  ###
	0x01, 0xEF, 0x00, //        #### ####
	0x00, 0xEE, 0x00, //         ### ###
	0x00, 0xEE, 0x00, //         ### ###
	0x00, 0xFE, 0x00, //         #######
	0x00, 0xFC, 0x00, //         ######
	0x00, 0x7C, 0x00, //          #####
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @6600 'W' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x70, 0x00, 0x38, //  ###              ###
	0x70, 0x00, 0x38, //  ###              ###
	0x70, 0x00, 0x38, //  ###              ###
	0x70, 0x00, 0x38, //  ###              ###
	0x70, 0x00, 0x38, //  ###              ###
	0x78, 0x00, 0x38, //  ####             ###
	0x78, 0x00, 0x78, //  ####            ####
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x30, 0x70, //   ###     ##     ###
	0x38, 0x38, 0x70, //   ###     ###    ###
	0x38, 0x78, 0x70, //   ###    ####    ###
	0x38, 0x78, 0x70, //   ###    ####    ###
	0x38, 0x78, 0x70, //   ###    ####    ###
	0x38, 0x7C, 0x70, //   ###    #####   ###
	0x38, 0xFC, 0x70, //   ###   ######   ###
	0x3C, 0xCC, 0x70, //   ####  ##  ##   ###
	0x3C, 0xCE, 0x70, //   ####  ##  ###  ###
	0x3D, 0xCE, 0xF0, //   #### ###  ### ####
	0x3D, 0xCE, 0xF0, //   #### ###  ### ####
	0x1D, 0x87, 0xE0, //    ### ##    ######
	0x1D, 0x87, 0xE0, //    ### ##    ######
	0x1F, 0x87, 0xE0, //    ######    ######
	0x1F, 0x87, 0xE0, //    ######    ######
	0x1F, 0x03, 0xE0, //    #####      #####
	0x1F, 0x03, 0xE0, //    #####      #####
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @6720 'X' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x78, 0x00, 0x78, //  ####            ####
	0x3C, 0x00, 0xF0, //   ####          ####
	0x1E, 0x01, 0xE0, //    ####        ####
	0x1E, 0x01, 0xE0, //    ####        ####
	0x0F, 0x03, 0xC0, //     ####      ####
	0x07, 0x87, 0x80, //      ####    ####
	0x07, 0x87, 0x80, //      ####    ####
	0x03, 0xCF, 0x00, //       ####  ####
	0x03, 0xDF, 0x00, //       #### #####
	0x01, 0xFE, 0x00, //        ########
	0x00, 0xFC, 0x00, //         ######
	0x00, 0xFC, 0x00, //         ######
	0x00, 0x78, 0x00, //          ####
	0x00, 0xFC, 0x00, //         ######
	0x00, 0xFC, 0x00, //         ######
	0x01, 0xFE, 0x00, //        ########
	0x03, 0xCF, 0x00, //       ####  ####
	0x03, 0xCF, 0x00, //       ####  ####
	0x07, 0x87, 0x80, //      ####    ####
	0x0F, 0x07, 0xC0, //     ####     #####
	0x0F, 0x03, 0xC0, //     ####      ####
	0x1E, 0x01, 0xE0, //    ####        ####
	0x3E, 0x01, 0xF0, //   #####        #####
	0x3C, 0x00, 0xF0, //   ####          ####
	0x78, 0x00, 0x78, //  ####            ####
	0xF8, 0x00, 0x7C, // #####            #####
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @6840 'Y' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0xF0, 0x00, 0x78, // ####             ####
	0x78, 0x00, 0xF0, //  ####           ####
	0x78, 0x00, 0xF0, //  ####           ####
	0x3C, 0x01, 0xE0, //   ####         ####
	0x3C, 0x01, 0xE0, //   ####         ####
	0x1E, 0x03, 0xC0, //    ####       ####
	0x1E, 0x03, 0xC0, //    ####       ####
	0x0F, 0x07, 0x80, //     ####     ####
	0x0F, 0x07, 0x80, //     ####     ####
	0x07, 0x87, 0x00, //      ####    ###
	0x03, 0x8E, 0x00, //       ###   ###
	0x03, 0xCE, 0x00, //       ####  ###
	0x01, 0xDC, 0x00, //        ### ###
	0x01, 0xFC, 0x00, //        #######
	0x00, 0xF8, 0x00, //         #####
	0x00, 0xF8, 0x00, //         #####
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @6960 'Z' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x3F, 0xFF, 0xE0, //   #################
	0x3F, 0xFF, 0xE0, //   #################
	0x3F, 0xFF, 0xE0, //   #################
	0x00, 0x03, 0xC0, //               ####
	0x00, 0x03, 0xC0, //               ####
	0x00, 0x07, 0x80, //              ####
	0x00, 0x07, 0x00, //              ###
	0x00, 0x0F, 0x00, //             ####
	0x00, 0x1E, 0x00, //            ####
	0x00, 0x1E, 0x00, //            ####
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x38, 0x00, //           ###
	0x00, 0x78, 0x00, //          ####
	0x00, 0xF0, 0x00, //         ####
	0x00, 0xE0, 0x00, //         ###
	0x01, 0xE0, 0x00, //        ####
	0x01, 0xC0, 0x00, //        ###
	0x03, 0xC0, 0x00, //       ####
	0x07, 0x80, 0x00, //      ####
	0x07, 0x00, 0x00, //      ###
	0x0F, 0x00, 0x00, //     ####
	0x0E, 0x00, 0x00, //     ###
	0x1E, 0x00, 0x00, //    ####
	0x3F, 0xFF, 0xF0, //   ##################
	0x3F, 0xFF, 0xF0, //   ##################
	0x3F, 0xFF, 0xF0, //   ##################
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @7080 '[' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x01, 0xFF, 0x00, //        #########
	0x01, 0xFF, 0x00, //        #########
	0x01, 0xFF, 0x00, //        #########
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xFF, 0x00, //        #########
	0x01, 0xFF, 0x00, //        #########
	0x01, 0xFF, 0x00, //        #########

	// @7200 '\' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x1C, 0x00, 0x00, //    ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0F, 0x00, 0x00, //     ####
	0x07, 0x00, 0x00, //      ###
	0x07, 0x00, 0x00, //      ###
	0x03, 0x80, 0x00, //       ###
	0x03, 0x80, 0x00, //       ###
	0x03, 0xC0, 0x00, //       ####
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xE0, 0x00, //        ####
	0x00, 0xE0, 0x00, //         ###
	0x00, 0xE0, 0x00, //         ###
	0x00, 0xF0, 0x00, //         ####
	0x00, 0x70, 0x00, //          ###
	0x00, 0x78, 0x00, //          ####
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x1C, 0x00, //            ###
	0x00, 0x1C, 0x00, //            ###
	0x00, 0x1E, 0x00, //            ####
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x80, //              ####
	0x00, 0x03, 0x80, //               ###
	0x00, 0x03, 0x80, //               ###
	0x00, 0x01, 0xC0, //                ###
	0x00, 0x01, 0xC0, //                ###
	0x00, 0x01, 0xE0, //                ####
	0x00, 0x00, 0xE0, //                 ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @7320 ']' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x03, 0xFE, 0x00, //       #########
	0x03, 0xFE, 0x00, //       #########
	0x03, 0xFE, 0x00, //       #########
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x00, 0x0E, 0x00, //             ###
	0x03, 0xFE, 0x00, //       #########
	0x03, 0xFE, 0x00, //       #########
	0x03, 0xFE, 0x00, //       #########

	// @7440 '^' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x70, 0x00, //          ###
	0x00, 0xF8, 0x00, //         #####
	0x00, 0xFC, 0x00, //         ######
	0x01, 0xDC, 0x00, //        ### ###
	0x01, 0x8E, 0x00, //        ##   ###
	0x03, 0x8E, 0x00, //       ###   ###
	0x03, 0x07, 0x00, //       ##     ###
	0x07, 0x03, 0x80, //      ###      ###
	0x0E, 0x03, 0x80, //     ###       ###
	0x0E, 0x01, 0xC0, //     ###        ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @7560 '_' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0xFF, 0xFF, 0xFC, // ######################
	0xFF, 0xFF, 0xFC, // ######################
	0xFF, 0xFF, 0xFC, // ######################

	// @7680 '`' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x0F, 0x00, 0x00, //     ####
	0x07, 0x80, 0x00, //      ####
	0x03, 0xC0, 0x00, //       ####
	0x01, 0xE0, 0x00, //        ####
	0x00, 0xF0, 0x00, //         ####
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @7800 'a' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x01, 0xFE, 0x00, //        ########
	0x07, 0xFF, 0x80, //      ############
	0x07, 0xFF, 0xC0, //      #############
	0x06, 0x03, 0xC0, //      ##       ####
	0x00, 0x01, 0xE0, //                ####
	0x00, 0x00, 0xE0, //                 ###
	0x00, 0x00, 0xE0, //                 ###
	0x00, 0x00, 0xE0, //                 ###
	0x00, 0xFF, 0xE0, //         ###########
	0x03, 0xFF, 0xE0, //       #############
	0x0F, 0xFF, 0xE0, //     ###############
	0x0F, 0x80, 0xE0, //     #####       ###
	0x1F, 0x00, 0xE0, //    #####        ###
	0x1E, 0x00, 0xE0, //    ####         ###
	0x1E, 0x00, 0xE0, //    ####         ###
	0x1E, 0x03, 0xE0, //    ####       #####
	0x1F, 0x0F, 0xE0, //    #####    #######
	0x0F, 0xFF, 0xE0, //     ###############
	0x07, 0xFE, 0xE0, //      ########## ###
	0x03, 0xF8, 0xE0, //       #######   ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @7920 'b' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x3E, 0x00, //    ###    #####
	0x1C, 0xFF, 0x00, //    ###  ########
	0x1D, 0xFF, 0x80, //    ### ##########
	0x1F, 0xC3, 0xC0, //    #######    ####
	0x1F, 0x01, 0xC0, //    #####       ###
	0x1E, 0x01, 0xE0, //    ####        ####
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1C, 0x01, 0xE0, //    ###         ####
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x03, 0xC0, //    ###        ####
	0x1E, 0x07, 0x80, //    ####      ####
	0x1F, 0xFF, 0x00, //    #############
	0x1F, 0xFE, 0x00, //    ############
	0x03, 0xF8, 0x00, //       #######
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @8040 'c' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x7F, 0x80, //          ########
	0x01, 0xFF, 0xC0, //        ###########
	0x03, 0xFF, 0xC0, //       ############
	0x07, 0xC0, 0x40, //      #####       #
	0x0F, 0x00, 0x00, //     ####
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1E, 0x00, 0x00, //    ####
	0x0E, 0x00, 0x00, //     ###
	0x0F, 0x00, 0x00, //     ####
	0x07, 0xC0, 0x40, //      #####       #
	0x07, 0xFF, 0xC0, //      #############
	0x01, 0xFF, 0xC0, //        ###########
	0x00, 0x7F, 0x00, //          #######
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @8160 'd' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x01, 0xC0, //                ###
	0x00, 0x01, 0xC0, //                ###
	0x00, 0x01, 0xC0, //                ###
	0x00, 0x01, 0xC0, //                ###
	0x00, 0x01, 0xC0, //                ###
	0x00, 0x01, 0xC0, //                ###
	0x00, 0x01, 0xC0, //                ###
	0x00, 0x01, 0xC0, //                ###
	0x00, 0xFF, 0xC0, //         ##########
	0x03, 0xFF, 0xC0, //       ############
	0x07, 0xFF, 0xC0, //      #############
	0x0F, 0x03, 0xC0, //     ####      ####
	0x1E, 0x01, 0xC0, //    ####        ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x3C, 0x01, 0xC0, //   ####         ###
	0x38, 0x01, 0xC0, //   ###          ###
	0x38, 0x01, 0xC0, //   ###          ###
	0x38, 0x01, 0xC0, //   ###          ###
	0x38, 0x01, 0xC0, //   ###          ###
	0x38, 0x01, 0xC0, //   ###          ###
	0x38, 0x01, 0xC0, //   ###          ###
	0x38, 0x03, 0xC0, //   ###         ####
	0x3C, 0x07, 0xC0, //   ####       #####
	0x1C, 0x0F, 0xC0, //    ###      ######
	0x1E, 0x1F, 0xC0, //    ####    #######
	0x0F, 0xFD, 0xC0, //     ########## ###
	0x07, 0xF9, 0xC0, //      ########  ###
	0x03, 0xE1, 0xC0, //       #####    ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @8280 'e' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0xFC, 0x00, //         ######
	0x03, 0xFF, 0x00, //       ##########
	0x07, 0xFF, 0x80, //      ############
	0x0F, 0x07, 0xC0, //     ####     #####
	0x1E, 0x01, 0xC0, //    ####        ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x38, 0x00, 0xE0, //   ###           ###
	0x3F, 0xFF, 0xE0, //   #################
	0x3F, 0xFF, 0xE0, //   #################
	0x3F, 0xFF, 0xE0, //   #################
	0x38, 0x00, 0x00, //   ###
	0x38, 0x00, 0x00, //   ###
	0x38, 0x00, 0x00, //   ###
	0x1C, 0x00, 0x00, //    ###
	0x1E, 0x00, 0x00, //    ####
	0x0F, 0x00, 0xC0, //     ####        ##
	0x0F, 0xFF, 0xC0, //     ##############
	0x03, 0xFF, 0xC0, //       ############
	0x00, 0xFF, 0x00, //         ########
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @8400 'f' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x07, 0xF0, //              #######
	0x00, 0x1F, 0xF8, //            ##########
	0x00, 0x3F, 0xF8, //           ###########
	0x00, 0x78, 0x18, //          ####      ##
	0x00, 0x70, 0x00, //          ###
	0x00, 0xE0, 0x00, //         ###
	0x00, 0xE0, 0x00, //         ###
	0x00, 0xE0, 0x00, //         ###
	0x00, 0xE0, 0x00, //         ###
	0x00, 0xE0, 0x00, //         ###
	0x00, 0xE0, 0x00, //         ###
	0x3F, 0xFF, 0xF0, //   ##################
	0x3F, 0xFF, 0xF0, //   ##################
	0x3F, 0xFF, 0xF0, //   ##################
	0x00, 0xE0, 0x00, //         ###
	0x00, 0xE0, 0x00, //         ###
	0x00, 0xE0, 0x00, //         ###
	0x00, 0xE0, 0x00, //         ###
	0x00, 0xE0, 0x00, //         ###
	0x00, 0xE0, 0x00, //         ###
	0x00, 0xE0, 0x00, //         ###
	0x00, 0xE0, 0x00, //         ###
	0x00, 0xE0, 0x00, //         ###
	0x00, 0xE0, 0x00, //         ###
	0x00, 0xE0, 0x00, //         ###
	0x00, 0xE0, 0x00, //         ###
	0x00, 0xE0, 0x00, //         ###
	0x00, 0xE0, 0x00, //         ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @8520 'g' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x01, 0xFF, 0xF0, //        #############
	0x03, 0xFF, 0xF0, //       ##############
	0x07, 0xFF, 0xF0, //      ###############
	0x0F, 0x07, 0x80, //     ####     ####
	0x1E, 0x03, 0xC0, //    ####       ####
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1E, 0x03, 0xC0, //    ####       ####
	0x0F, 0x07, 0x80, //     ####     ####
	0x0F, 0xFF, 0x00, //     ############
	0x0F, 0xFE, 0x00, //     ###########
	0x1D, 0xFC, 0x00, //    ### #######
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1E, 0x00, 0x00, //    ####
	0x1F, 0xFF, 0x80, //    ##############
	0x0F, 0xFF, 0xE0, //     ###############
	0x0F, 0xFF, 0xF0, //     ################
	0x1E, 0x00, 0xF8, //    ####         #####
	0x3C, 0x00, 0x78, //   ####           ####
	0x3C, 0x00, 0x78, //   ####           ####
	0x3C, 0x00, 0xF8, //   ####          #####
	0x3F, 0x01, 0xF0, //   ######       #####
	0x1F, 0xFF, 0xE0, //    ################
	0x0F, 0xFF, 0xC0, //     ##############
	0x03, 0xFE, 0x00, //       #########

	// @8640 'h' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x7E, 0x00, //    ###   ######
	0x1C, 0xFF, 0x00, //    ###  ########
	0x1D, 0xFF, 0x80, //    ### ##########
	0x1F, 0xC3, 0x80, //    #######    ###
	0x1F, 0x03, 0xC0, //    #####      ####
	0x1E, 0x01, 0xC0, //    ####        ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @8760 'i' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x38, 0x00, //           ###
	0x00, 0x7C, 0x00, //          #####
	0x00, 0x7C, 0x00, //          #####
	0x00, 0x7C, 0x00, //          #####
	0x00, 0x38, 0x00, //           ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x0F, 0xF8, 0x00, //     #########
	0x0F, 0xF8, 0x00, //     #########
	0x0F, 0xF8, 0x00, //     #########
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x1F, 0xFF, 0xE0, //    ################
	0x1F, 0xFF, 0xE0, //    ################
	0x1F, 0xFF, 0xE0, //    ################
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @8880 'j' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x07, 0x00, //              ###
	0x00, 0x0F, 0x80, //             #####
	0x00, 0x0F, 0x80, //             #####
	0x00, 0x0F, 0x80, //             #####
	0x00, 0x07, 0x00, //              ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x1F, 0xFF, 0x00, //    #############
	0x1F, 0xFF, 0x00, //    #############
	0x1F, 0xFF, 0x00, //    #############
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x0F, 0x00, //             ####
	0x00, 0x0E, 0x00, //             ###
	0x30, 0x1E, 0x00, //   ##       ####
	0x3F, 0xFC, 0x00, //   ############
	0x3F, 0xF8, 0x00, //   ###########
	0x1F, 0xE0, 0x00, //    ########

	// @9000 'k' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0xF0, //     ###         ####
	0x0E, 0x01, 0xE0, //     ###        ####
	0x0E, 0x03, 0xC0, //     ###       ####
	0x0E, 0x07, 0x80, //     ###      ####
	0x0E, 0x0F, 0x00, //     ###     ####
	0x0E, 0x1E, 0x00, //     ###    ####
	0x0E, 0x3C, 0x00, //     ###   ####
	0x0E, 0x78, 0x00, //     ###  ####
	0x0E, 0xF0, 0x00, //     ### ####
	0x0F, 0xE0, 0x00, //     #######
	0x0E, 0xF0, 0x00, //     ### ####
	0x0E, 0x78, 0x00, //     ###  ####
	0x0E, 0x3C, 0x00, //     ###   ####
	0x0E, 0x1E, 0x00, //     ###    ####
	0x0E, 0x0F, 0x00, //     ###     ####
	0x0E, 0x07, 0x80, //     ###      ####
	0x0E, 0x03, 0xC0, //     ###       ####
	0x0E, 0x01, 0xE0, //     ###        ####
	0x0E, 0x00, 0xF0, //     ###         ####
	0x0E, 0x00, 0x78, //     ###          ####
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @9120 'l' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x0F, 0xF8, 0x00, //     #########
	0x0F, 0xF8, 0x00, //     #########
	0x0F, 0xF8, 0x00, //     #########
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x1F, 0xFF, 0xE0, //    ################
	0x1F, 0xFF, 0xE0, //    ################
	0x1F, 0xFF, 0xE0, //    ################
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @9240 'm' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x73, 0xC3, 0xC0, //  ###  ####    ####
	0x77, 0xE7, 0xE0, //  ### ######  ######
	0x7F, 0xEF, 0xF0, //  ########## ########
	0x7E, 0x7E, 0x70, //  ######  ######  ###
	0x7C, 0x7C, 0x70, //  #####   #####   ###
	0x78, 0x78, 0x70, //  ####    ####    ###
	0x78, 0x78, 0x70, //  ####    ####    ###
	0x70, 0x70, 0x70, //  ###     ###     ###
	0x70, 0x70, 0x70, //  ###     ###     ###
	0x70, 0x70, 0x70, //  ###     ###     ###
	0x70, 0x70, 0x70, //  ###     ###     ###
	0x70, 0x70, 0x70, //  ###     ###     ###
	0x70, 0x70, 0x70, //  ###     ###     ###
	0x70, 0x70, 0x70, //  ###     ###     ###
	0x70, 0x70, 0x70, //  ###     ###     ###
	0x70, 0x70, 0x70, //  ###     ###     ###
	0x70, 0x70, 0x70, //  ###     ###     ###
	0x70, 0x70, 0x70, //  ###     ###     ###
	0x70, 0x70, 0x70, //  ###     ###     ###
	0x70, 0x70, 0x70, //  ###     ###     ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @9360 'n' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x1C, 0x7E, 0x00, //    ###   ######
	0x1C, 0xFF, 0x00, //    ###  ########
	0x1F, 0xFF, 0x80, //    ##############
	0x1F, 0xC7, 0x80, //    #######   ####
	0x1F, 0x03, 0xC0, //    #####      ####
	0x1E, 0x01, 0xC0, //    ####        ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @9480 'o' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0xFE, 0x00, //         #######
	0x03, 0xFF, 0x00, //       ##########
	0x07, 0xFF, 0xC0, //      #############
	0x0F, 0x03, 0xC0, //     ####      ####
	0x1E, 0x01, 0xE0, //    ####        ####
	0x1C, 0x00, 0xE0, //    ###          ###
	0x3C, 0x00, 0xF0, //   ####          ####
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x38, 0x00, 0x70, //   ###            ###
	0x3C, 0x00, 0xF0, //   ####          ####
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1E, 0x01, 0xE0, //    ####        ####
	0x0F, 0x03, 0xC0, //     ####      ####
	0x0F, 0xFF, 0x80, //     #############
	0x03, 0xFF, 0x00, //       ##########
	0x00, 0xFC, 0x00, //         ######
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @9600 'p' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x1C, 0x7E, 0x00, //    ###   ######
	0x1C, 0xFF, 0x00, //    ###  ########
	0x1D, 0xFF, 0x80, //    ### ##########
	0x1F, 0xC3, 0xC0, //    #######    ####
	0x1F, 0x01, 0xC0, //    #####       ###
	0x1E, 0x01, 0xE0, //    ####        ####
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1C, 0x00, 0xE0, //    ###          ###
	0x1C, 0x01, 0xE0, //    ###         ####
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x03, 0xC0, //    ###        ####
	0x1E, 0x07, 0x80, //    ####      ####
	0x1F, 0xFF, 0x00, //    #############
	0x1F, 0xFE, 0x00, //    ############
	0x1F, 0xF8, 0x00, //    ##########
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###
	0x1C, 0x00, 0x00, //    ###

	// @9720 'q' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0xFE, 0xC0, //         ####### ##
	0x03, 0xFF, 0xC0, //       ############
	0x07, 0xFF, 0xC0, //      #############
	0x0F, 0x03, 0xC0, //     ####      ####
	0x1E, 0x01, 0xC0, //    ####        ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x38, 0x01, 0xC0, //   ###          ###
	0x38, 0x01, 0xC0, //   ###          ###
	0x38, 0x01, 0xC0, //   ###          ###
	0x38, 0x01, 0xC0, //   ###          ###
	0x38, 0x01, 0xC0, //   ###          ###
	0x38, 0x01, 0xC0, //   ###          ###
	0x38, 0x03, 0xC0, //   ###         ####
	0x3C, 0x07, 0xC0, //   ####       #####
	0x1C, 0x0F, 0xC0, //    ###      ######
	0x1E, 0x1F, 0xC0, //    ####    #######
	0x0F, 0xFD, 0xC0, //     ########## ###
	0x07, 0xF9, 0xC0, //      ########  ###
	0x03, 0xE1, 0xC0, //       #####    ###
	0x00, 0x01, 0xC0, //                ###
	0x00, 0x01, 0xC0, //                ###
	0x00, 0x01, 0xC0, //                ###
	0x00, 0x01, 0xC0, //                ###
	0x00, 0x01, 0xC0, //                ###
	0x00, 0x01, 0xC0, //                ###
	0x00, 0x01, 0xC0, //                ###
	0x00, 0x01, 0xC0, //                ###

	// @9840 'r' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x0E, 0x1F, 0x80, //     ###    ######
	0x0E, 0x7F, 0xC0, //     ###  #########
	0x0E, 0xFF, 0xE0, //     ### ###########
	0x0F, 0xF1, 0xE0, //     ########   ####
	0x0F, 0xC0, 0xF0, //     ######      ####
	0x0F, 0x80, 0x70, //     #####        ###
	0x0F, 0x00, 0x70, //     ####         ###
	0x0E, 0x00, 0x70, //     ###          ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @9960 's' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0xFF, 0x00, //         ########
	0x03, 0xFF, 0xC0, //       ############
	0x07, 0xFF, 0xC0, //      #############
	0x0F, 0x00, 0xC0, //     ####        ##
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0E, 0x00, 0x00, //     ###
	0x0F, 0x80, 0x00, //     #####
	0x07, 0xF0, 0x00, //      #######
	0x03, 0xFE, 0x00, //       #########
	0x00, 0xFF, 0x80, //         #########
	0x00, 0x1F, 0xC0, //            #######
	0x00, 0x03, 0xE0, //               #####
	0x00, 0x00, 0xE0, //                 ###
	0x00, 0x00, 0xE0, //                 ###
	0x00, 0x00, 0xE0, //                 ###
	0x0C, 0x01, 0xE0, //     ##         ####
	0x0F, 0xFF, 0xC0, //     ##############
	0x0F, 0xFF, 0x80, //     #############
	0x03, 0xFC, 0x00, //       ########
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @10080 't' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0xC0, 0x00, //         ##
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x7F, 0xFF, 0xE0, //  ##################
	0x7F, 0xFF, 0xE0, //  ##################
	0x7F, 0xFF, 0xE0, //  ##################
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xC0, 0x00, //        ###
	0x01, 0xF0, 0x20, //        #####      #
	0x00, 0xFF, 0xE0, //         ###########
	0x00, 0x7F, 0xE0, //          ##########
	0x00, 0x3F, 0xC0, //           ########
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @10200 'u' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x01, 0xC0, //    ###         ###
	0x1C, 0x03, 0xC0, //    ###        ####
	0x1E, 0x07, 0xC0, //    ####      #####
	0x0F, 0x1F, 0xC0, //     ####   #######
	0x0F, 0xFF, 0xC0, //     ##############
	0x07, 0xF9, 0xC0, //      ########  ###
	0x03, 0xF1, 0xC0, //       ######   ###
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @10320 'v' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x3C, 0x00, 0x38, //   ####            ###
	0x3C, 0x00, 0x78, //   ####           ####
	0x3C, 0x00, 0x70, //   ####           ###
	0x1E, 0x00, 0xF0, //    ####         ####
	0x1E, 0x00, 0xF0, //    ####         ####
	0x0E, 0x00, 0xE0, //     ###         ###
	0x0F, 0x01, 0xE0, //     ####       ####
	0x0F, 0x01, 0xC0, //     ####       ###
	0x07, 0x01, 0xC0, //      ###       ###
	0x07, 0x83, 0xC0, //      ####     ####
	0x03, 0x83, 0x80, //       ###     ###
	0x03, 0xC7, 0x80, //       ####   ####
	0x03, 0xC7, 0x00, //       ####   ###
	0x01, 0xC7, 0x00, //        ###   ###
	0x01, 0xEF, 0x00, //        #### ####
	0x00, 0xEE, 0x00, //         ### ###
	0x00, 0xEE, 0x00, //         ### ###
	0x00, 0xFC, 0x00, //         ######
	0x00, 0x7C, 0x00, //          #####
	0x00, 0x7C, 0x00, //          #####
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @10440 'w' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x70, 0x00, 0x70, //  ###             ###
	0x70, 0x00, 0x70, //  ###             ###
	0x70, 0x00, 0x70, //  ###             ###
	0x70, 0x00, 0x70, //  ###             ###
	0x70, 0x00, 0x70, //  ###             ###
	0x70, 0x70, 0x70, //  ###     ###     ###
	0x70, 0x70, 0x70, //  ###     ###     ###
	0x78, 0x78, 0xE0, //  ####    ####   ###
	0x38, 0xF8, 0xE0, //   ###   #####   ###
	0x38, 0xD8, 0xE0, //   ###   ## ##   ###
	0x38, 0xD8, 0xE0, //   ###   ## ##   ###
	0x39, 0xDC, 0xE0, //   ###  ### ###  ###
	0x39, 0x9C, 0xE0, //   ###  ##  ###  ###
	0x39, 0x8C, 0xE0, //   ###  ##   ##  ###
	0x3B, 0x8E, 0xE0, //   ### ###   ### ###
	0x3B, 0x0E, 0xC0, //   ### ##    ### ##
	0x1B, 0x07, 0xC0, //    ## ##     #####
	0x1F, 0x07, 0xC0, //    #####     #####
	0x1F, 0x07, 0xC0, //    #####     #####
	0x1E, 0x03, 0xC0, //    ####       ####
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @10560 'x' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x3E, 0x01, 0xF0, //   #####        #####
	0x1E, 0x01, 0xE0, //    ####        ####
	0x0F, 0x03, 0xC0, //     ####      ####
	0x07, 0x87, 0x80, //      ####    ####
	0x07, 0x87, 0x80, //      ####    ####
	0x03, 0xCF, 0x00, //       ####  ####
	0x01, 0xDE, 0x00, //        ### ####
	0x01, 0xFE, 0x00, //        ########
	0x00, 0xFC, 0x00, //         ######
	0x00, 0x78, 0x00, //          ####
	0x00, 0xFC, 0x00, //         ######
	0x01, 0xFE, 0x00, //        ########
	0x01, 0xEE, 0x00, //        #### ###
	0x03, 0xCF, 0x00, //       ####  ####
	0x07, 0x87, 0x80, //      ####    ####
	0x0F, 0x03, 0xC0, //     ####      ####
	0x0F, 0x03, 0xC0, //     ####      ####
	0x1E, 0x01, 0xE0, //    ####        ####
	0x3C, 0x00, 0xF0, //   ####          ####
	0x7C, 0x00, 0xF8, //  #####          #####
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @10680 'y' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x3C, 0x00, 0x70, //   ####           ###
	0x3C, 0x00, 0xF0, //   ####          ####
	0x1C, 0x00, 0xF0, //    ###          ####
	0x1E, 0x00, 0xE0, //    ####         ###
	0x1E, 0x01, 0xE0, //    ####        ####
	0x0E, 0x01, 0xC0, //     ###        ###
	0x0F, 0x01, 0xC0, //     ####       ###
	0x07, 0x03, 0xC0, //      ###      ####
	0x07, 0x83, 0x80, //      ####     ###
	0x07, 0x83, 0x80, //      ####     ###
	0x03, 0x87, 0x80, //       ###    ####
	0x03, 0xC7, 0x00, //       ####   ###
	0x01, 0xC7, 0x00, //        ###   ###
	0x01, 0xCF, 0x00, //        ###  ####
	0x01, 0xEE, 0x00, //        #### ###
	0x00, 0xEE, 0x00, //         ### ###
	0x00, 0xFC, 0x00, //         ######
	0x00, 0x7C, 0x00, //          #####
	0x00, 0x7C, 0x00, //          #####
	0x00, 0x78, 0x00, //          ####
	0x00, 0x78, 0x00, //          ####
	0x00, 0x70, 0x00, //          ###
	0x00, 0xF0, 0x00, //         ####
	0x01, 0xE0, 0x00, //        ####
	0x03, 0xE0, 0x00, //       #####
	0x7F, 0xC0, 0x00, //  #########
	0x7F, 0x80, 0x00, //  ########
	0x7E, 0x00, 0x00, //  ######

	// @10800 'z' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x1F, 0xFF, 0xC0, //    ###############
	0x1F, 0xFF, 0xC0, //    ###############
	0x1F, 0xFF, 0xC0, //    ###############
	0x00, 0x03, 0x80, //               ###
	0x00, 0x07, 0x00, //              ###
	0x00, 0x0F, 0x00, //             ####
	0x00, 0x1E, 0x00, //            ####
	0x00, 0x1C, 0x00, //            ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x78, 0x00, //          ####
	0x00, 0xF0, 0x00, //         ####
	0x00, 0xE0, 0x00, //         ###
	0x01, 0xE0, 0x00, //        ####
	0x03, 0xC0, 0x00, //       ####
	0x03, 0x80, 0x00, //       ###
	0x07, 0x00, 0x00, //      ###
	0x0F, 0x00, 0x00, //     ####
	0x1F, 0xFF, 0xE0, //    ################
	0x1F, 0xFF, 0xE0, //    ################
	0x1F, 0xFF, 0xE0, //    ################
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //

	// @10920 '{' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x07, 0xC0, //              #####
	0x00, 0x1F, 0xC0, //            #######
	0x00, 0x3F, 0xC0, //           ########
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x78, 0x00, //          ####
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0xE0, 0x00, //         ###
	0x0F, 0xC0, 0x00, //     ######
	0x0F, 0x00, 0x00, //     ####
	0x0F, 0xC0, 0x00, //     ######
	0x01, 0xE0, 0x00, //        ####
	0x00, 0xF0, 0x00, //         ####
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x78, 0x00, //          ####
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x3F, 0xC0, //           ########
	0x00, 0x1F, 0xC0, //            #######
	0x00, 0x07, 0xC0, //              #####

	// @11040 '|' (22 pixels wide)
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###
	0x00, 0x70, 0x00, //          ###

	// @11160 '}' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x0F, 0x80, 0x00, //     #####
	0x0F, 0xE0, 0x00, //     #######
	0x0F, 0xF0, 0x00, //     ########
	0x00, 0xF0, 0x00, //         ####
	0x00, 0x78, 0x00, //          ####
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x3C, 0x00, //           ####
	0x00, 0x1E, 0x00, //            ####
	0x00, 0x1F, 0xC0, //            #######
	0x00, 0x03, 0xC0, //               ####
	0x00, 0x0F, 0xC0, //             ######
	0x00, 0x1C, 0x00, //            ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x38, 0x00, //           ###
	0x00, 0x78, 0x00, //          ####
	0x00, 0xF0, 0x00, //         ####
	0x0F, 0xF0, 0x00, //     ########
	0x0F, 0xE0, 0x00, //     #######
	0x0F, 0x80, 0x00, //     #####

	// @11280 '~' (22 pixels wide)
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x0F, 0x80, 0x00, //     #####
	0x1F, 0xC0, 0x70, //    #######       ###
	0x3F, 0xE0, 0x70, //   #########      ###
	0x38, 0xF0, 0x70, //   ###   ####     ###
	0x70, 0x78, 0xE0, //  ###     ####   ###
	0x70, 0x3F, 0xE0, //  ###      #########
	0x70, 0x1F, 0xC0, //  ###       #######
	0x00, 0x0F, 0x80, //             #####
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, //
};




// Character bitmaps for Consolas 38pt
//  Font data for MS Reference Sans Serif 16pt
//
// Character bitmaps for MS Reference Sans Serif 16pt
// each char is 132 bytes in size 59 rows by 32 pixels
// 2 blank off to the right 32 pixels wide including spaces

const unsigned char Font38x59[] = {
	// @0 ' ' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @236 '!' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x03, 0x80, 0x00, //               ###
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x0F, 0xE0, 0x00, //             #######
	0x00, 0x0F, 0xE0, 0x00, //             #######
	0x00, 0x0F, 0xE0, 0x00, //             #######
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x03, 0x80, 0x00, //               ###
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @472 '"' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0xFC, 0x1F, 0x80, //         ######     ######
	0x00, 0xFC, 0x1F, 0x80, //         ######     ######
	0x00, 0xFC, 0x1F, 0x80, //         ######     ######
	0x00, 0xFC, 0x1F, 0x80, //         ######     ######
	0x00, 0xFC, 0x1F, 0x80, //         ######     ######
	0x00, 0xFC, 0x1F, 0x80, //         ######     ######
	0x00, 0xFC, 0x1F, 0x80, //         ######     ######
	0x00, 0xFC, 0x1F, 0x80, //         ######     ######
	0x00, 0x78, 0x0F, 0x00, //          ####       ####
	0x00, 0x78, 0x0F, 0x00, //          ####       ####
	0x00, 0x78, 0x0F, 0x00, //          ####       ####
	0x00, 0x78, 0x0F, 0x00, //          ####       ####
	0x00, 0x78, 0x0F, 0x00, //          ####       ####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @708 '#' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x3C, 0x0F, 0x80, //           ####      #####
	0x00, 0x3C, 0x0F, 0x80, //           ####      #####
	0x00, 0x3C, 0x0F, 0x80, //           ####      #####
	0x00, 0x3C, 0x0F, 0x80, //           ####      #####
	0x00, 0x7C, 0x1F, 0x00, //          #####     #####
	0x00, 0x7C, 0x1F, 0x00, //          #####     #####
	0x00, 0x78, 0x1F, 0x00, //          ####      #####
	0x00, 0x78, 0x1F, 0x00, //          ####      #####
	0x00, 0x78, 0x1F, 0x00, //          ####      #####
	0x3F, 0xFF, 0xFF, 0xFC, //   ############################
	0x3F, 0xFF, 0xFF, 0xFC, //   ############################
	0x3F, 0xFF, 0xFF, 0xFC, //   ############################
	0x3F, 0xFF, 0xFF, 0xFC, //   ############################
	0x00, 0x78, 0x1F, 0x00, //          ####      #####
	0x00, 0xF8, 0x3E, 0x00, //         #####     #####
	0x00, 0xF8, 0x3E, 0x00, //         #####     #####
	0x00, 0xF8, 0x3E, 0x00, //         #####     #####
	0x00, 0xF8, 0x3E, 0x00, //         #####     #####
	0x00, 0xF8, 0x3E, 0x00, //         #####     #####
	0x00, 0xF0, 0x3E, 0x00, //         ####      #####
	0x00, 0xF0, 0x3E, 0x00, //         ####      #####
	0x00, 0xF0, 0x3E, 0x00, //         ####      #####
	0x00, 0xF0, 0x3E, 0x00, //         ####      #####
	0x7F, 0xFF, 0xFF, 0xF8, //  ############################
	0x7F, 0xFF, 0xFF, 0xF8, //  ############################
	0x7F, 0xFF, 0xFF, 0xF8, //  ############################
	0x7F, 0xFF, 0xFF, 0xF8, //  ############################
	0x01, 0xF0, 0x7C, 0x00, //        #####     #####
	0x01, 0xF0, 0x7C, 0x00, //        #####     #####
	0x01, 0xF0, 0x7C, 0x00, //        #####     #####
	0x01, 0xF0, 0x7C, 0x00, //        #####     #####
	0x01, 0xE0, 0x7C, 0x00, //        ####      #####
	0x03, 0xE0, 0xF8, 0x00, //       #####     #####
	0x03, 0xE0, 0xF8, 0x00, //       #####     #####
	0x03, 0xE0, 0xF8, 0x00, //       #####     #####
	0x03, 0xE0, 0xF8, 0x00, //       #####     #####
	0x03, 0xE0, 0xF8, 0x00, //       #####     #####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @944 '$' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0xF0, 0x00, //                 ####
	0x00, 0x00, 0xF0, 0x00, //                 ####
	0x00, 0x00, 0xF0, 0x00, //                 ####
	0x00, 0x00, 0xF0, 0x00, //                 ####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x0F, 0xFE, 0x00, //             ###########
	0x00, 0x7F, 0xFF, 0x80, //          ################
	0x01, 0xFF, 0xFF, 0x80, //        ##################
	0x03, 0xFF, 0xFF, 0x80, //       ###################
	0x07, 0xF1, 0xE1, 0x80, //      #######   ####    ##
	0x0F, 0xC1, 0xE0, 0x00, //     ######     ####
	0x0F, 0x81, 0xE0, 0x00, //     #####      ####
	0x1F, 0x03, 0xE0, 0x00, //    #####      #####
	0x1F, 0x03, 0xC0, 0x00, //    #####      ####
	0x1F, 0x03, 0xC0, 0x00, //    #####      ####
	0x1F, 0x03, 0xC0, 0x00, //    #####      ####
	0x1F, 0x83, 0xC0, 0x00, //    ######     ####
	0x1F, 0x83, 0xC0, 0x00, //    ######     ####
	0x0F, 0xE3, 0xC0, 0x00, //     #######   ####
	0x0F, 0xFB, 0xC0, 0x00, //     ######### ####
	0x07, 0xFF, 0xC0, 0x00, //      #############
	0x03, 0xFF, 0xC0, 0x00, //       ############
	0x00, 0xFF, 0xF0, 0x00, //         ############
	0x00, 0x3F, 0xFC, 0x00, //           ############
	0x00, 0x0F, 0xFF, 0x00, //             ############
	0x00, 0x07, 0xFF, 0x80, //              ############
	0x00, 0x07, 0xFF, 0xC0, //              #############
	0x00, 0x07, 0x9F, 0xE0, //              ####  ########
	0x00, 0x0F, 0x87, 0xE0, //             #####    ######
	0x00, 0x0F, 0x03, 0xF0, //             ####      ######
	0x00, 0x0F, 0x01, 0xF0, //             ####       #####
	0x00, 0x0F, 0x01, 0xF0, //             ####       #####
	0x00, 0x0F, 0x01, 0xF0, //             ####       #####
	0x00, 0x0F, 0x01, 0xF0, //             ####       #####
	0x00, 0x0F, 0x03, 0xF0, //             ####      ######
	0x00, 0x0F, 0x03, 0xE0, //             ####      #####
	0x10, 0x1F, 0x07, 0xE0, //    #       #####     ######
	0x1F, 0x1E, 0x3F, 0xC0, //    #####   ####   ########
	0x1F, 0xFF, 0xFF, 0x80, //    ######################
	0x1F, 0xFF, 0xFF, 0x00, //    #####################
	0x1F, 0xFF, 0xFC, 0x00, //    ###################
	0x03, 0xFF, 0xE0, 0x00, //       #############
	0x00, 0x1E, 0x00, 0x00, //            ####
	0x00, 0x1E, 0x00, 0x00, //            ####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3C, 0x00, 0x00, //           ####
	0x00, 0x3C, 0x00, 0x00, //           ####
	0x00, 0x3C, 0x00, 0x00, //           ####
	0x00, 0x3C, 0x00, 0x00, //           ####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @1180 '%' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x03, 0xF0, 0x00, 0x00, //       ######
	0x0F, 0xFC, 0x00, 0x1E, //     ##########             ####
	0x1F, 0xFE, 0x00, 0x3E, //    ############           #####
	0x3F, 0xFF, 0x00, 0x7C, //   ##############         #####
	0x3F, 0x1F, 0x00, 0x78, //   ######   #####         ####
	0x7E, 0x1F, 0x80, 0xF8, //  ######    ######       #####
	0x7C, 0x0F, 0x81, 0xF0, //  #####      #####      #####
	0x7C, 0x0F, 0x81, 0xE0, //  #####      #####      ####
	0x7C, 0x0F, 0x83, 0xE0, //  #####      #####     #####
	0x7C, 0x0F, 0x87, 0xC0, //  #####      #####    #####
	0x7C, 0x0F, 0x87, 0xC0, //  #####      #####    #####
	0x7E, 0x1F, 0x8F, 0x80, //  ######    ######   #####
	0x3E, 0x1F, 0x0F, 0x00, //   #####    #####    ####
	0x3F, 0xFF, 0x1F, 0x00, //   ##############   #####
	0x1F, 0xFE, 0x3E, 0x00, //    ############   #####
	0x0F, 0xFC, 0x3C, 0x00, //     ##########    ####
	0x03, 0xF0, 0x7C, 0x00, //       ######     #####
	0x00, 0x00, 0xF8, 0x00, //                 #####
	0x00, 0x00, 0xF0, 0x00, //                 ####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x0F, 0x80, 0x00, //             #####
	0x00, 0x0F, 0x00, 0x00, //             ####
	0x00, 0x1F, 0x07, 0xE0, //            #####     ######
	0x00, 0x3E, 0x1F, 0xF8, //           #####    ##########
	0x00, 0x3C, 0x3F, 0xFC, //           ####    ############
	0x00, 0x7C, 0x7F, 0xFE, //          #####   ##############
	0x00, 0xF8, 0x7C, 0x3E, //         #####    #####    #####
	0x00, 0xF0, 0xFC, 0x3F, //         ####    ######    ######
	0x01, 0xF0, 0xF8, 0x1F, //        #####    #####      #####
	0x01, 0xE0, 0xF8, 0x1F, //        ####     #####      #####
	0x03, 0xE0, 0xF8, 0x1F, //       #####     #####      #####
	0x07, 0xC0, 0xF8, 0x1F, //      #####      #####      #####
	0x07, 0x80, 0xF8, 0x1F, //      ####       #####      #####
	0x0F, 0x80, 0xFC, 0x3F, //     #####       ######    ######
	0x1F, 0x00, 0x7C, 0x7E, //    #####         #####   ######
	0x1E, 0x00, 0x7F, 0xFE, //    ####          ##############
	0x3E, 0x00, 0x3F, 0xFC, //   #####           ############
	0x7C, 0x00, 0x1F, 0xF8, //  #####             ##########
	0x00, 0x00, 0x07, 0xE0, //                      ######
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @1416 '&' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x1F, 0xC0, 0x00, //            #######
	0x00, 0x7F, 0xF8, 0x00, //          ############
	0x00, 0xFF, 0xFC, 0x00, //         ##############
	0x01, 0xFF, 0xFE, 0x00, //        ################
	0x03, 0xF0, 0x7E, 0x00, //       ######     ######
	0x03, 0xE0, 0x3F, 0x00, //       #####       ######
	0x07, 0xC0, 0x1F, 0x00, //      #####         #####
	0x07, 0xC0, 0x1F, 0x00, //      #####         #####
	0x07, 0xC0, 0x1F, 0x00, //      #####         #####
	0x07, 0xC0, 0x1F, 0x00, //      #####         #####
	0x07, 0xC0, 0x1F, 0x00, //      #####         #####
	0x07, 0xC0, 0x3E, 0x00, //      #####        #####
	0x07, 0xE0, 0x7E, 0x00, //      ######      ######
	0x03, 0xF0, 0xFC, 0x00, //       ######    ######
	0x03, 0xF1, 0xFC, 0x00, //       ######   #######
	0x01, 0xFF, 0xF8, 0x00, //        ##############
	0x01, 0xFF, 0xE0, 0x00, //        ############
	0x00, 0xFF, 0xC0, 0x00, //         ##########
	0x00, 0x7F, 0x00, 0x00, //          #######
	0x01, 0xFF, 0x00, 0x00, //        #########
	0x03, 0xFF, 0x00, 0xF8, //       ##########        #####
	0x07, 0xFF, 0x80, 0xF8, //      ############       #####
	0x0F, 0xCF, 0xC0, 0xF8, //     ######  ######      #####
	0x0F, 0x87, 0xE0, 0xF8, //     #####    ######     #####
	0x1F, 0x03, 0xF0, 0xF8, //    #####      ######    #####
	0x1F, 0x03, 0xF0, 0xF8, //    #####      ######    #####
	0x3E, 0x01, 0xF8, 0xF0, //   #####        ######   ####
	0x3E, 0x00, 0xFD, 0xF0, //   #####         ###### #####
	0x3E, 0x00, 0x7F, 0xF0, //   #####          ###########
	0x3E, 0x00, 0x7F, 0xF0, //   #####          ###########
	0x3E, 0x00, 0x3F, 0xE0, //   #####           #########
	0x3E, 0x00, 0x1F, 0xE0, //   #####            ########
	0x3E, 0x00, 0x0F, 0xE0, //   #####             #######
	0x3F, 0x00, 0x0F, 0xE0, //   ######            #######
	0x1F, 0x80, 0x0F, 0xF0, //    ######           ########
	0x1F, 0xC0, 0x1F, 0xF0, //    #######         #########
	0x0F, 0xE0, 0x7F, 0xF8, //     #######      ############
	0x07, 0xFF, 0xFE, 0xFC, //      ################## ######
	0x03, 0xFF, 0xFC, 0xFE, //       ################  #######
	0x01, 0xFF, 0xF0, 0x7F, //        #############     #######
	0x00, 0x3F, 0x80, 0x00, //           #######
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @1652 ''' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @1888 '(' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x02, 0x00, //                       #
	0x00, 0x00, 0x07, 0x00, //                      ###
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x3F, 0x00, //                   ######
	0x00, 0x00, 0x7E, 0x00, //                  ######
	0x00, 0x00, 0xFC, 0x00, //                 ######
	0x00, 0x00, 0xF8, 0x00, //                 #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x03, 0xF0, 0x00, //               ######
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x0F, 0x80, 0x00, //             #####
	0x00, 0x0F, 0x80, 0x00, //             #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7E, 0x00, 0x00, //          ######
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3F, 0x00, 0x00, //           ######
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x0F, 0x80, 0x00, //             #####
	0x00, 0x0F, 0x80, 0x00, //             #####
	0x00, 0x0F, 0xC0, 0x00, //             ######
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xF0, 0x00, //               ######
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xF8, 0x00, //                ######
	0x00, 0x00, 0xFC, 0x00, //                 ######
	0x00, 0x00, 0x7E, 0x00, //                  ######
	0x00, 0x00, 0x3F, 0x00, //                   ######
	0x00, 0x00, 0x1F, 0x80, //                    ######
	0x00, 0x00, 0x0F, 0x00, //                     ####
	0x00, 0x00, 0x06, 0x00, //                      ##
	0x00, 0x00, 0x02, 0x00, //                       #
	// @2124 ')' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x40, 0x00, 0x00, //          #
	0x00, 0x60, 0x00, 0x00, //          ##
	0x00, 0xF0, 0x00, 0x00, //         ####
	0x01, 0xF8, 0x00, 0x00, //        ######
	0x00, 0xFC, 0x00, 0x00, //         ######
	0x00, 0x7E, 0x00, 0x00, //          ######
	0x00, 0x3F, 0x00, 0x00, //           ######
	0x00, 0x1F, 0x80, 0x00, //            ######
	0x00, 0x0F, 0x80, 0x00, //             #####
	0x00, 0x0F, 0xC0, 0x00, //             ######
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x00, 0xF8, 0x00, //                 #####
	0x00, 0x00, 0xF8, 0x00, //                 #####
	0x00, 0x00, 0xFC, 0x00, //                 ######
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x3E, 0x00, //                   #####
	0x00, 0x00, 0x3E, 0x00, //                   #####
	0x00, 0x00, 0x3E, 0x00, //                   #####
	0x00, 0x00, 0x3E, 0x00, //                   #####
	0x00, 0x00, 0x3E, 0x00, //                   #####
	0x00, 0x00, 0x3E, 0x00, //                   #####
	0x00, 0x00, 0x3E, 0x00, //                   #####
	0x00, 0x00, 0x3E, 0x00, //                   #####
	0x00, 0x00, 0x3E, 0x00, //                   #####
	0x00, 0x00, 0x3E, 0x00, //                   #####
	0x00, 0x00, 0x3E, 0x00, //                   #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0xF8, 0x00, //                 #####
	0x00, 0x00, 0xF8, 0x00, //                 #####
	0x00, 0x00, 0xF8, 0x00, //                 #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x0F, 0xC0, 0x00, //             ######
	0x00, 0x0F, 0x80, 0x00, //             #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x3F, 0x00, 0x00, //           ######
	0x00, 0x7E, 0x00, 0x00, //          ######
	0x00, 0xFC, 0x00, 0x00, //         ######
	0x00, 0xF8, 0x00, 0x00, //         #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x00, 0xE0, 0x00, 0x00, //         ###
	0x00, 0x40, 0x00, 0x00, //          #
	// @2360 '*' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x01, 0x03, 0xC0, 0x80, //        #      ####      #
	0x03, 0x83, 0xC1, 0xC0, //       ###     ####     ###
	0x03, 0xC3, 0xC3, 0xC0, //       ####    ####    ####
	0x07, 0xF1, 0x8F, 0xE0, //      #######   ##   #######
	0x01, 0xF9, 0x9F, 0x80, //        ######  ##  ######
	0x00, 0x7D, 0xBF, 0x00, //          ##### ## ######
	0x00, 0x1F, 0xFC, 0x00, //            ###########
	0x00, 0x0F, 0xF0, 0x00, //             ########
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x1F, 0xF8, 0x00, //            ##########
	0x00, 0x7F, 0xFE, 0x00, //          ##############
	0x01, 0xF9, 0x9F, 0x80, //        ######  ##  ######
	0x07, 0xF3, 0x8F, 0xE0, //      #######  ###   #######
	0x07, 0xC3, 0xC3, 0xC0, //      #####    ####    ####
	0x03, 0x83, 0xC1, 0xC0, //       ###     ####     ###
	0x02, 0x03, 0xC0, 0x80, //       #       ####      #
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @2596 '+' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x1F, 0xFF, 0xFF, 0xFC, //    ###########################
	0x1F, 0xFF, 0xFF, 0xFC, //    ###########################
	0x1F, 0xFF, 0xFF, 0xFC, //    ###########################
	0x1F, 0xFF, 0xFF, 0xFC, //    ###########################
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @2832 ',' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x0F, 0xF0, 0x00, //             ########
	0x00, 0x0F, 0xF0, 0x00, //             ########
	0x00, 0x0F, 0xF8, 0x00, //             #########
	0x00, 0x0F, 0xF8, 0x00, //             #########
	0x00, 0x07, 0xF8, 0x00, //              ########
	0x00, 0x03, 0xF8, 0x00, //               #######
	0x00, 0x03, 0xF8, 0x00, //               #######
	0x00, 0x01, 0xF8, 0x00, //                ######
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x03, 0xF0, 0x00, //               ######
	0x00, 0x03, 0xF0, 0x00, //               ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x1F, 0xC0, 0x00, //            #######
	0x01, 0xFF, 0x80, 0x00, //        ##########
	0x01, 0xFF, 0x00, 0x00, //        #########
	0x01, 0xFC, 0x00, 0x00, //        #######
	0x01, 0xE0, 0x00, 0x00, //        ####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @3068 '-' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x01, 0xFF, 0xFF, 0x00, //        #################
	0x01, 0xFF, 0xFF, 0x00, //        #################
	0x01, 0xFF, 0xFF, 0x00, //        #################
	0x01, 0xFF, 0xFF, 0x00, //        #################
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @3304 '.' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x0F, 0xE0, 0x00, //             #######
	0x00, 0x1F, 0xF0, 0x00, //            #########
	0x00, 0x1F, 0xF0, 0x00, //            #########
	0x00, 0x1F, 0xF0, 0x00, //            #########
	0x00, 0x1F, 0xF0, 0x00, //            #########
	0x00, 0x1F, 0xF0, 0x00, //            #########
	0x00, 0x0F, 0xE0, 0x00, //             #######
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @3540 '/' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x03, 0xC0, //                       ####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x07, 0x80, //                      ####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x00, //                     ####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x3E, 0x00, //                   #####
	0x00, 0x00, 0x3E, 0x00, //                   #####
	0x00, 0x00, 0x3C, 0x00, //                   ####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0xF8, 0x00, //                 #####
	0x00, 0x00, 0xF8, 0x00, //                 #####
	0x00, 0x00, 0xF0, 0x00, //                 ####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xE0, 0x00, //                ####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0x80, 0x00, //              ####
	0x00, 0x0F, 0x80, 0x00, //             #####
	0x00, 0x0F, 0x80, 0x00, //             #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1E, 0x00, 0x00, //            ####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x78, 0x00, 0x00, //          ####
	0x00, 0xF8, 0x00, 0x00, //         #####
	0x00, 0xF0, 0x00, 0x00, //         ####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xE0, 0x00, 0x00, //        ####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xC0, 0x00, 0x00, //       ####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x00, 0x00, 0x00, //     ####
	0x1F, 0x00, 0x00, 0x00, //    #####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @3776 '0' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x07, 0xF8, 0x00, //              ########
	0x00, 0x1F, 0xFE, 0x00, //            ############
	0x00, 0x7F, 0xFF, 0x00, //          ###############
	0x00, 0xFF, 0xFF, 0x80, //         #################
	0x01, 0xFC, 0x1F, 0xC0, //        #######     #######
	0x03, 0xF0, 0x07, 0xE0, //       ######         ######
	0x03, 0xE0, 0x03, 0xE0, //       #####           #####
	0x07, 0xE0, 0x03, 0xF0, //      ######           ######
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x0F, 0xC0, 0x01, 0xF8, //     ######             ######
	0x0F, 0x80, 0x00, 0xF8, //     #####               #####
	0x0F, 0x80, 0x01, 0xF8, //     #####              ######
	0x0F, 0x80, 0x03, 0xF8, //     #####             #######
	0x1F, 0x00, 0x07, 0xFC, //    #####             #########
	0x1F, 0x00, 0x1F, 0xFC, //    #####           ###########
	0x1F, 0x00, 0x3F, 0xFC, //    #####          ############
	0x1F, 0x00, 0x7F, 0x7C, //    #####         ####### #####
	0x1F, 0x01, 0xFE, 0x7C, //    #####       ########  #####
	0x1F, 0x03, 0xF8, 0x7C, //    #####      #######    #####
	0x1F, 0x07, 0xF0, 0x7C, //    #####     #######     #####
	0x1F, 0x1F, 0xE0, 0x7C, //    #####   ########      #####
	0x1F, 0x3F, 0xC0, 0x7C, //    #####  ########       #####
	0x1F, 0x7F, 0x00, 0x7C, //    ##### #######         #####
	0x1F, 0xFE, 0x00, 0x7C, //    ############          #####
	0x1F, 0xFC, 0x00, 0x7C, //    ###########           #####
	0x1F, 0xF0, 0x00, 0x7C, //    #########             #####
	0x0F, 0xE0, 0x00, 0xF8, //     #######             #####
	0x0F, 0xC0, 0x00, 0xF8, //     ######              #####
	0x0F, 0x80, 0x00, 0xF8, //     #####               #####
	0x0F, 0xC0, 0x01, 0xF8, //     ######             ######
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x03, 0xF0, //      #####            ######
	0x07, 0xE0, 0x03, 0xE0, //      ######           #####
	0x03, 0xF0, 0x07, 0xE0, //       ######         ######
	0x01, 0xFC, 0x1F, 0xC0, //        #######     #######
	0x00, 0xFF, 0xFF, 0x80, //         #################
	0x00, 0x7F, 0xFF, 0x00, //          ###############
	0x00, 0x3F, 0xFC, 0x00, //           ############
	0x00, 0x07, 0xF0, 0x00, //              #######
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @4012 '1' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x07, 0xF0, 0x00, //              #######
	0x00, 0x1F, 0xF0, 0x00, //            #########
	0x00, 0x7F, 0xF0, 0x00, //          ###########
	0x01, 0xFF, 0xF0, 0x00, //        #############
	0x07, 0xFD, 0xF0, 0x00, //      ######### #####
	0x0F, 0xF1, 0xF0, 0x00, //     ########   #####
	0x07, 0xC1, 0xF0, 0x00, //      #####     #####
	0x07, 0x81, 0xF0, 0x00, //      ####      #####
	0x02, 0x01, 0xF0, 0x00, //       #        #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x07, 0xFF, 0xFF, 0xF8, //      ########################
	0x07, 0xFF, 0xFF, 0xF8, //      ########################
	0x07, 0xFF, 0xFF, 0xF8, //      ########################
	0x07, 0xFF, 0xFF, 0xF8, //      ########################
	0x07, 0xFF, 0xFF, 0xF8, //      ########################
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @4248 '2' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x1F, 0xE0, 0x00, //            ########
	0x00, 0xFF, 0xF8, 0x00, //         #############
	0x01, 0xFF, 0xFE, 0x00, //        ################
	0x07, 0xFF, 0xFF, 0x00, //      ###################
	0x0F, 0xF0, 0x7F, 0x00, //     ########     #######
	0x07, 0xC0, 0x1F, 0x80, //      #####         ######
	0x07, 0x00, 0x0F, 0x80, //      ###            #####
	0x02, 0x00, 0x0F, 0xC0, //       #             ######
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x3F, 0x00, //                   ######
	0x00, 0x00, 0x3E, 0x00, //                   #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0xF8, 0x00, //                 #####
	0x00, 0x01, 0xF8, 0x00, //                ######
	0x00, 0x03, 0xF0, 0x00, //               ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x0F, 0xC0, 0x00, //             ######
	0x00, 0x1F, 0x80, 0x00, //            ######
	0x00, 0x3F, 0x00, 0x00, //           ######
	0x00, 0x7E, 0x00, 0x00, //          ######
	0x00, 0xFC, 0x00, 0x00, //         ######
	0x01, 0xF8, 0x00, 0x00, //        ######
	0x03, 0xF0, 0x00, 0x00, //       ######
	0x07, 0xE0, 0x00, 0x00, //      ######
	0x0F, 0xFF, 0xFF, 0xF0, //     ########################
	0x0F, 0xFF, 0xFF, 0xF0, //     ########################
	0x0F, 0xFF, 0xFF, 0xF0, //     ########################
	0x0F, 0xFF, 0xFF, 0xF0, //     ########################
	0x0F, 0xFF, 0xFF, 0xF0, //     ########################
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @4484 '3' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0xFF, 0xE0, 0x00, //         ###########
	0x03, 0xFF, 0xF8, 0x00, //       ###############
	0x03, 0xFF, 0xFE, 0x00, //       #################
	0x03, 0xFF, 0xFF, 0x00, //       ##################
	0x03, 0x80, 0x7F, 0x80, //       ###        ########
	0x00, 0x00, 0x1F, 0x80, //                    ######
	0x00, 0x00, 0x0F, 0xC0, //                     ######
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x7E, 0x00, //                  ######
	0x00, 0x3F, 0xFC, 0x00, //           ############
	0x00, 0x3F, 0xF0, 0x00, //           ##########
	0x00, 0x3F, 0xFE, 0x00, //           #############
	0x00, 0x3F, 0xFF, 0x80, //           ###############
	0x00, 0x00, 0x3F, 0xC0, //                   ########
	0x00, 0x00, 0x0F, 0xE0, //                     #######
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xF0, //                       ######
	0x00, 0x00, 0x01, 0xF0, //                        #####
	0x00, 0x00, 0x01, 0xF0, //                        #####
	0x00, 0x00, 0x01, 0xF0, //                        #####
	0x00, 0x00, 0x01, 0xF0, //                        #####
	0x00, 0x00, 0x01, 0xF0, //                        #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x07, 0xE0, //                      ######
	0x00, 0x00, 0x0F, 0xC0, //                     ######
	0x06, 0x00, 0x7F, 0x80, //      ##          ########
	0x07, 0xFF, 0xFF, 0x00, //      ###################
	0x07, 0xFF, 0xFE, 0x00, //      ##################
	0x07, 0xFF, 0xF8, 0x00, //      ################
	0x01, 0xFF, 0x80, 0x00, //        ##########
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @4720 '4' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x7F, 0x00, //                  #######
	0x00, 0x00, 0xFF, 0x00, //                 ########
	0x00, 0x01, 0xFF, 0x00, //                #########
	0x00, 0x01, 0xFF, 0x00, //                #########
	0x00, 0x03, 0xFF, 0x00, //               ##########
	0x00, 0x07, 0xFF, 0x00, //              ###########
	0x00, 0x07, 0xDF, 0x00, //              ##### #####
	0x00, 0x0F, 0x9F, 0x00, //             #####  #####
	0x00, 0x0F, 0x9F, 0x00, //             #####  #####
	0x00, 0x1F, 0x1F, 0x00, //            #####   #####
	0x00, 0x3E, 0x1F, 0x00, //           #####    #####
	0x00, 0x3E, 0x1F, 0x00, //           #####    #####
	0x00, 0x7C, 0x1F, 0x00, //          #####     #####
	0x00, 0xF8, 0x1F, 0x00, //         #####      #####
	0x00, 0xF8, 0x1F, 0x00, //         #####      #####
	0x01, 0xF0, 0x1F, 0x00, //        #####       #####
	0x03, 0xE0, 0x1F, 0x00, //       #####        #####
	0x03, 0xE0, 0x1F, 0x00, //       #####        #####
	0x07, 0xC0, 0x1F, 0x00, //      #####         #####
	0x07, 0x80, 0x1F, 0x00, //      ####          #####
	0x0F, 0x80, 0x1F, 0x00, //     #####          #####
	0x1F, 0x00, 0x1F, 0x00, //    #####           #####
	0x1F, 0x00, 0x1F, 0x00, //    #####           #####
	0x3E, 0x00, 0x1F, 0x00, //   #####            #####
	0x7C, 0x00, 0x1F, 0x00, //  #####             #####
	0x7F, 0xFF, 0xFF, 0xFC, //  #############################
	0x7F, 0xFF, 0xFF, 0xFC, //  #############################
	0x7F, 0xFF, 0xFF, 0xFC, //  #############################
	0x7F, 0xFF, 0xFF, 0xFC, //  #############################
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @4956 '5' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x03, 0xFF, 0xFF, 0x80, //       ###################
	0x03, 0xFF, 0xFF, 0x80, //       ###################
	0x03, 0xFF, 0xFF, 0x80, //       ###################
	0x03, 0xFF, 0xFF, 0x80, //       ###################
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xFF, 0xE0, 0x00, //       #############
	0x03, 0xFF, 0xFC, 0x00, //       ################
	0x03, 0xFF, 0xFE, 0x00, //       #################
	0x03, 0xFF, 0xFF, 0x80, //       ###################
	0x00, 0x00, 0x7F, 0x80, //                  ########
	0x00, 0x00, 0x1F, 0xC0, //                    #######
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x07, 0xE0, //                      ######
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x3F, 0x80, //                   #######
	0x06, 0x00, 0xFF, 0x00, //      ##         ########
	0x07, 0xFF, 0xFE, 0x00, //      ##################
	0x07, 0xFF, 0xF8, 0x00, //      ################
	0x07, 0xFF, 0xE0, 0x00, //      ##############
	0x07, 0xFF, 0x00, 0x00, //      ###########
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @5192 '6' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0xFF, 0x80, //                 #########
	0x00, 0x07, 0xFF, 0x80, //              ############
	0x00, 0x1F, 0xFF, 0x80, //            ##############
	0x00, 0x7F, 0xFF, 0x80, //          ################
	0x00, 0xFF, 0x80, 0x00, //         #########
	0x01, 0xFC, 0x00, 0x00, //        #######
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0x80, 0x00, 0x00, //      ####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x00, 0x00, 0x00, //     ####
	0x0F, 0x0F, 0xF8, 0x00, //     ####    #########
	0x1F, 0x7F, 0xFE, 0x00, //    ##### ##############
	0x1F, 0xFF, 0xFF, 0x80, //    ######################
	0x1F, 0xFF, 0xFF, 0xC0, //    #######################
	0x1F, 0xF0, 0x1F, 0xC0, //    #########       #######
	0x1F, 0x80, 0x07, 0xE0, //    ######            ######
	0x1F, 0x00, 0x03, 0xE0, //    #####              #####
	0x1F, 0x00, 0x03, 0xF0, //    #####              ######
	0x1F, 0x00, 0x01, 0xF0, //    #####               #####
	0x1F, 0x00, 0x01, 0xF0, //    #####               #####
	0x1F, 0x00, 0x01, 0xF0, //    #####               #####
	0x1F, 0x00, 0x01, 0xF0, //    #####               #####
	0x1F, 0x00, 0x01, 0xF0, //    #####               #####
	0x0F, 0x80, 0x01, 0xF0, //     #####              #####
	0x0F, 0x80, 0x01, 0xF0, //     #####              #####
	0x0F, 0x80, 0x03, 0xE0, //     #####             #####
	0x0F, 0xC0, 0x03, 0xE0, //     ######            #####
	0x07, 0xC0, 0x07, 0xE0, //      #####           ######
	0x07, 0xE0, 0x0F, 0xC0, //      ######         ######
	0x03, 0xF8, 0x1F, 0x80, //       #######      ######
	0x01, 0xFF, 0xFF, 0x00, //        #################
	0x00, 0xFF, 0xFE, 0x00, //         ###############
	0x00, 0x7F, 0xFC, 0x00, //          #############
	0x00, 0x1F, 0xE0, 0x00, //            ########
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @5428 '7' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x1F, 0xFF, 0xFF, 0xF0, //    #########################
	0x1F, 0xFF, 0xFF, 0xF0, //    #########################
	0x1F, 0xFF, 0xFF, 0xF0, //    #########################
	0x1F, 0xFF, 0xFF, 0xF0, //    #########################
	0x1F, 0xFF, 0xFF, 0xF0, //    #########################
	0x00, 0x00, 0x01, 0xF0, //                        #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x3E, 0x00, //                   #####
	0x00, 0x00, 0x3E, 0x00, //                   #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0xF8, 0x00, //                 #####
	0x00, 0x00, 0xF8, 0x00, //                 #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x03, 0xF0, 0x00, //               ######
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x0F, 0xC0, 0x00, //             ######
	0x00, 0x0F, 0x80, 0x00, //             #####
	0x00, 0x1F, 0x80, 0x00, //            ######
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x3F, 0x00, 0x00, //           ######
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x7E, 0x00, 0x00, //          ######
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0xFC, 0x00, 0x00, //         ######
	0x00, 0xF8, 0x00, 0x00, //         #####
	0x01, 0xF8, 0x00, 0x00, //        ######
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @5664 '8' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x1F, 0xF0, 0x00, //            #########
	0x00, 0x7F, 0xFE, 0x00, //          ##############
	0x01, 0xFF, 0xFF, 0x00, //        #################
	0x03, 0xFF, 0xFF, 0x80, //       ###################
	0x03, 0xF0, 0x1F, 0xC0, //       ######       #######
	0x07, 0xE0, 0x0F, 0xC0, //      ######         ######
	0x07, 0xC0, 0x07, 0xE0, //      #####           ######
	0x0F, 0x80, 0x03, 0xE0, //     #####             #####
	0x0F, 0x80, 0x03, 0xE0, //     #####             #####
	0x0F, 0x80, 0x03, 0xE0, //     #####             #####
	0x0F, 0x80, 0x03, 0xE0, //     #####             #####
	0x0F, 0x80, 0x03, 0xE0, //     #####             #####
	0x0F, 0xC0, 0x07, 0xC0, //     ######           #####
	0x07, 0xE0, 0x07, 0xC0, //      ######          #####
	0x07, 0xF0, 0x0F, 0x80, //      #######        #####
	0x03, 0xF8, 0x3F, 0x80, //       #######     #######
	0x01, 0xFE, 0x7F, 0x00, //        ########  #######
	0x00, 0xFF, 0xFC, 0x00, //         ##############
	0x00, 0x3F, 0xF8, 0x00, //           ###########
	0x00, 0x3F, 0xF8, 0x00, //           ###########
	0x00, 0x7F, 0xFE, 0x00, //          ##############
	0x01, 0xFC, 0xFF, 0x00, //        #######  ########
	0x03, 0xF0, 0x3F, 0x80, //       ######      #######
	0x07, 0xE0, 0x1F, 0xC0, //      ######        #######
	0x0F, 0xC0, 0x07, 0xE0, //     ######           ######
	0x0F, 0x80, 0x03, 0xE0, //     #####             #####
	0x1F, 0x80, 0x03, 0xF0, //    ######             ######
	0x1F, 0x00, 0x01, 0xF0, //    #####               #####
	0x1F, 0x00, 0x01, 0xF0, //    #####               #####
	0x1F, 0x00, 0x01, 0xF0, //    #####               #####
	0x1F, 0x00, 0x01, 0xF0, //    #####               #####
	0x1F, 0x00, 0x01, 0xF0, //    #####               #####
	0x1F, 0x80, 0x03, 0xE0, //    ######             #####
	0x0F, 0xC0, 0x07, 0xE0, //     ######           ######
	0x0F, 0xF0, 0x1F, 0xC0, //     ########       #######
	0x07, 0xFF, 0xFF, 0x80, //      ####################
	0x03, 0xFF, 0xFF, 0x00, //       ##################
	0x00, 0xFF, 0xFE, 0x00, //         ###############
	0x00, 0x1F, 0xF0, 0x00, //            #########
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @5900 '9' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x0F, 0xE0, 0x00, //             #######
	0x00, 0x7F, 0xFC, 0x00, //          #############
	0x00, 0xFF, 0xFE, 0x00, //         ###############
	0x01, 0xFF, 0xFF, 0x00, //        #################
	0x03, 0xF0, 0x3F, 0x80, //       ######      #######
	0x07, 0xE0, 0x0F, 0xC0, //      ######         ######
	0x0F, 0xC0, 0x07, 0xC0, //     ######           #####
	0x0F, 0x80, 0x07, 0xC0, //     #####            #####
	0x0F, 0x80, 0x03, 0xE0, //     #####             #####
	0x1F, 0x00, 0x03, 0xE0, //    #####              #####
	0x1F, 0x00, 0x03, 0xE0, //    #####              #####
	0x1F, 0x00, 0x01, 0xF0, //    #####               #####
	0x1F, 0x00, 0x01, 0xF0, //    #####               #####
	0x1F, 0x00, 0x01, 0xF0, //    #####               #####
	0x1F, 0x00, 0x01, 0xF0, //    #####               #####
	0x1F, 0x00, 0x01, 0xF0, //    #####               #####
	0x1F, 0x80, 0x01, 0xF0, //    ######              #####
	0x0F, 0x80, 0x01, 0xF0, //     #####              #####
	0x0F, 0xC0, 0x03, 0xF0, //     ######            ######
	0x07, 0xF0, 0x1F, 0xF0, //      #######       #########
	0x03, 0xFF, 0xFF, 0xF0, //       ######################
	0x03, 0xFF, 0xFF, 0xF0, //       ######################
	0x00, 0xFF, 0xFD, 0xF0, //         ############## #####
	0x00, 0x3F, 0xE1, 0xE0, //           #########    ####
	0x00, 0x00, 0x01, 0xE0, //                        ####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xC0, //                       ####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x07, 0x80, //                      ####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x3F, 0x00, //                   ######
	0x00, 0x00, 0x7E, 0x00, //                  ######
	0x00, 0x03, 0xFC, 0x00, //               ########
	0x07, 0xFF, 0xF8, 0x00, //      ################
	0x07, 0xFF, 0xF0, 0x00, //      ###############
	0x07, 0xFF, 0xC0, 0x00, //      #############
	0x07, 0xFC, 0x00, 0x00, //      #########
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @6136 ':' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x07, 0xF0, 0x00, //              #######
	0x00, 0x0F, 0xF8, 0x00, //             #########
	0x00, 0x0F, 0xF8, 0x00, //             #########
	0x00, 0x0F, 0xF8, 0x00, //             #########
	0x00, 0x0F, 0xF8, 0x00, //             #########
	0x00, 0x0F, 0xF8, 0x00, //             #########
	0x00, 0x07, 0xF0, 0x00, //              #######
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x07, 0xF0, 0x00, //              #######
	0x00, 0x0F, 0xF8, 0x00, //             #########
	0x00, 0x0F, 0xF8, 0x00, //             #########
	0x00, 0x0F, 0xF8, 0x00, //             #########
	0x00, 0x0F, 0xF8, 0x00, //             #########
	0x00, 0x0F, 0xF8, 0x00, //             #########
	0x00, 0x07, 0xF0, 0x00, //              #######
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @6372 ';' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x07, 0xF0, 0x00, //              #######
	0x00, 0x0F, 0xF8, 0x00, //             #########
	0x00, 0x0F, 0xF8, 0x00, //             #########
	0x00, 0x0F, 0xF8, 0x00, //             #########
	0x00, 0x0F, 0xF8, 0x00, //             #########
	0x00, 0x0F, 0xF8, 0x00, //             #########
	0x00, 0x07, 0xF0, 0x00, //              #######
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x0F, 0xF0, 0x00, //             ########
	0x00, 0x0F, 0xF0, 0x00, //             ########
	0x00, 0x0F, 0xF8, 0x00, //             #########
	0x00, 0x0F, 0xF8, 0x00, //             #########
	0x00, 0x07, 0xF8, 0x00, //              ########
	0x00, 0x03, 0xF8, 0x00, //               #######
	0x00, 0x03, 0xF8, 0x00, //               #######
	0x00, 0x01, 0xF8, 0x00, //                ######
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x03, 0xF0, 0x00, //               ######
	0x00, 0x03, 0xF0, 0x00, //               ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x1F, 0xC0, 0x00, //            #######
	0x01, 0xFF, 0x80, 0x00, //        ##########
	0x01, 0xFF, 0x00, 0x00, //        #########
	0x01, 0xFC, 0x00, 0x00, //        #######
	0x01, 0xE0, 0x00, 0x00, //        ####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @6608 '<' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x02, 0x00, //                       #
	0x00, 0x00, 0x07, 0x00, //                      ###
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x1F, 0xC0, //                    #######
	0x00, 0x00, 0x3F, 0x00, //                   ######
	0x00, 0x00, 0xFE, 0x00, //                 #######
	0x00, 0x01, 0xFC, 0x00, //                #######
	0x00, 0x03, 0xF8, 0x00, //               #######
	0x00, 0x07, 0xF0, 0x00, //              #######
	0x00, 0x0F, 0xE0, 0x00, //             #######
	0x00, 0x1F, 0x80, 0x00, //            ######
	0x00, 0x7F, 0x00, 0x00, //          #######
	0x00, 0xFE, 0x00, 0x00, //         #######
	0x01, 0xFC, 0x00, 0x00, //        #######
	0x03, 0xF8, 0x00, 0x00, //       #######
	0x07, 0xF0, 0x00, 0x00, //      #######
	0x07, 0xF0, 0x00, 0x00, //      #######
	0x03, 0xF8, 0x00, 0x00, //       #######
	0x01, 0xFC, 0x00, 0x00, //        #######
	0x00, 0xFE, 0x00, 0x00, //         #######
	0x00, 0x7F, 0x00, 0x00, //          #######
	0x00, 0x1F, 0x80, 0x00, //            ######
	0x00, 0x0F, 0xE0, 0x00, //             #######
	0x00, 0x07, 0xF0, 0x00, //              #######
	0x00, 0x03, 0xF8, 0x00, //               #######
	0x00, 0x01, 0xFC, 0x00, //                #######
	0x00, 0x00, 0xFE, 0x00, //                 #######
	0x00, 0x00, 0x3F, 0x00, //                   ######
	0x00, 0x00, 0x1F, 0xC0, //                    #######
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x07, 0x00, //                      ###
	0x00, 0x00, 0x02, 0x00, //                       #
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @6844 '=' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x0F, 0xFF, 0xFF, 0xF0, //     ########################
	0x0F, 0xFF, 0xFF, 0xF0, //     ########################
	0x0F, 0xFF, 0xFF, 0xF0, //     ########################
	0x0F, 0xFF, 0xFF, 0xF0, //     ########################
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x0F, 0xFF, 0xFF, 0xF0, //     ########################
	0x0F, 0xFF, 0xFF, 0xF0, //     ########################
	0x0F, 0xFF, 0xFF, 0xF0, //     ########################
	0x0F, 0xFF, 0xFF, 0xF0, //     ########################
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @7080 '>' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x40, 0x00, 0x00, //          #
	0x00, 0xE0, 0x00, 0x00, //         ###
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x03, 0xF8, 0x00, 0x00, //       #######
	0x00, 0xFC, 0x00, 0x00, //         ######
	0x00, 0x7F, 0x00, 0x00, //          #######
	0x00, 0x3F, 0x80, 0x00, //           #######
	0x00, 0x1F, 0xC0, 0x00, //            #######
	0x00, 0x0F, 0xE0, 0x00, //             #######
	0x00, 0x07, 0xF0, 0x00, //              #######
	0x00, 0x01, 0xF8, 0x00, //                ######
	0x00, 0x00, 0xFE, 0x00, //                 #######
	0x00, 0x00, 0x7F, 0x00, //                  #######
	0x00, 0x00, 0x3F, 0x80, //                   #######
	0x00, 0x00, 0x1F, 0xC0, //                    #######
	0x00, 0x00, 0x0F, 0xE0, //                     #######
	0x00, 0x00, 0x0F, 0xE0, //                     #######
	0x00, 0x00, 0x1F, 0xC0, //                    #######
	0x00, 0x00, 0x3F, 0x80, //                   #######
	0x00, 0x00, 0x7F, 0x00, //                  #######
	0x00, 0x00, 0xFE, 0x00, //                 #######
	0x00, 0x01, 0xF8, 0x00, //                ######
	0x00, 0x07, 0xF0, 0x00, //              #######
	0x00, 0x0F, 0xE0, 0x00, //             #######
	0x00, 0x1F, 0xC0, 0x00, //            #######
	0x00, 0x3F, 0x80, 0x00, //           #######
	0x00, 0x7F, 0x00, 0x00, //          #######
	0x00, 0xFC, 0x00, 0x00, //         ######
	0x03, 0xF8, 0x00, 0x00, //       #######
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x00, 0xE0, 0x00, 0x00, //         ###
	0x00, 0x40, 0x00, 0x00, //          #
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @7316 '?' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x7E, 0x00, 0x00, //          ######
	0x00, 0x7F, 0xC0, 0x00, //          #########
	0x00, 0x7F, 0xF0, 0x00, //          ###########
	0x00, 0x7F, 0xF8, 0x00, //          ############
	0x00, 0x03, 0xFC, 0x00, //               ########
	0x00, 0x00, 0xFE, 0x00, //                 #######
	0x00, 0x00, 0x3F, 0x00, //                   ######
	0x00, 0x00, 0x1F, 0x80, //                    ######
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x0F, 0xC0, //                     ######
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x3F, 0x80, //                   #######
	0x00, 0x1F, 0xFF, 0x00, //            #############
	0x00, 0x1F, 0xFE, 0x00, //            ############
	0x00, 0x1F, 0xFC, 0x00, //            ###########
	0x00, 0x1F, 0xE0, 0x00, //            ########
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x0E, 0x00, 0x00, //             ###
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x3F, 0x80, 0x00, //           #######
	0x00, 0x3F, 0x80, 0x00, //           #######
	0x00, 0x3F, 0x80, 0x00, //           #######
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x0E, 0x00, 0x00, //             ###
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @7552 '@' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x01, 0xFC, 0x00, //                #######
	0x00, 0x0F, 0xFF, 0x00, //             ############
	0x00, 0x1F, 0xFF, 0x80, //            ##############
	0x00, 0x7E, 0x07, 0xC0, //          ######      #####
	0x00, 0xF8, 0x03, 0xE0, //         #####         #####
	0x01, 0xF0, 0x01, 0xF0, //        #####           #####
	0x01, 0xE0, 0x00, 0xF0, //        ####             ####
	0x03, 0xC0, 0x00, 0x78, //       ####               ####
	0x07, 0xC0, 0x00, 0x78, //      #####               ####
	0x07, 0x80, 0x00, 0x3C, //      ####                 ####
	0x0F, 0x00, 0x00, 0x3C, //     ####                  ####
	0x0F, 0x00, 0x00, 0x3C, //     ####                  ####
	0x1F, 0x00, 0x00, 0x3C, //    #####                  ####
	0x1E, 0x00, 0x00, 0x3C, //    ####                   ####
	0x1E, 0x01, 0xF3, 0x1E, //    ####        #####  ##   ####
	0x3C, 0x07, 0xFF, 0x1E, //   ####       ###########   ####
	0x3C, 0x0F, 0xFF, 0x1E, //   ####      ############   ####
	0x3C, 0x1F, 0xFF, 0x1E, //   ####     #############   ####
	0x7C, 0x1F, 0x1E, 0x1E, //  #####     #####   ####    ####
	0x78, 0x3E, 0x1E, 0x1E, //  ####     #####    ####    ####
	0x78, 0x3E, 0x1E, 0x1E, //  ####     #####    ####    ####
	0x78, 0x7C, 0x1E, 0x1E, //  ####    #####     ####    ####
	0x78, 0x7C, 0x3E, 0x1E, //  ####    #####    #####    ####
	0x78, 0x7C, 0x3E, 0x1E, //  ####    #####    #####    ####
	0xF0, 0x7C, 0x3E, 0x1E, // ####     #####    #####    ####
	0xF0, 0xF8, 0x3E, 0x1E, // ####    #####     #####    ####
	0xF0, 0xF8, 0x3E, 0x1E, // ####    #####     #####    ####
	0xF0, 0xF8, 0x3C, 0x1E, // ####    #####     ####     ####
	0xF0, 0xF8, 0x3C, 0x1E, // ####    #####     ####     ####
	0xF0, 0xF8, 0x3C, 0x1C, // ####    #####     ####     ###
	0xF0, 0xF8, 0x3C, 0x3C, // ####    #####     ####    ####
	0xF0, 0xF8, 0x3C, 0x3C, // ####    #####     ####    ####
	0xF0, 0xF8, 0x7C, 0x3C, // ####    #####    #####    ####
	0xF0, 0xF8, 0x7C, 0x3C, // ####    #####    #####    ####
	0xF0, 0xF8, 0xFC, 0x78, // ####    #####   ######   ####
	0xF0, 0xFC, 0xFC, 0x78, // ####    ######  ######   ####
	0xF0, 0x7F, 0xDF, 0xF0, // ####     ######### #########
	0xF0, 0x7F, 0xDF, 0xF0, // ####     ######### #########
	0xF0, 0x3F, 0x8F, 0xE0, // ####      #######   #######
	0x78, 0x1F, 0x07, 0x80, //  ####      #####     ####
	0x78, 0x00, 0x00, 0x00, //  ####
	0x78, 0x00, 0x00, 0x00, //  ####
	0x78, 0x00, 0x00, 0x00, //  ####
	0x7C, 0x00, 0x00, 0x00, //  #####
	0x3C, 0x00, 0x00, 0x00, //   ####
	0x3C, 0x00, 0x00, 0x00, //   ####
	0x1E, 0x00, 0x00, 0x00, //    ####
	0x1F, 0x00, 0x00, 0x00, //    #####
	0x0F, 0x00, 0x00, 0x00, //     ####
	0x0F, 0xC0, 0x03, 0x00, //     ######            ##
	0x07, 0xE0, 0x1F, 0x00, //      ######        #####
	0x03, 0xFF, 0xFF, 0x00, //       ##################
	0x00, 0xFF, 0xFE, 0x00, //         ###############
	0x00, 0x3F, 0xE0, 0x00, //           #########
	// @7788 'A' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x0F, 0xE0, 0x00, //             #######
	0x00, 0x0F, 0xF0, 0x00, //             ########
	0x00, 0x1F, 0xF0, 0x00, //            #########
	0x00, 0x1F, 0xF0, 0x00, //            #########
	0x00, 0x1E, 0xF8, 0x00, //            #### #####
	0x00, 0x3E, 0xF8, 0x00, //           ##### #####
	0x00, 0x3E, 0xF8, 0x00, //           ##### #####
	0x00, 0x3C, 0x7C, 0x00, //           ####   #####
	0x00, 0x7C, 0x7C, 0x00, //          #####   #####
	0x00, 0x7C, 0x7C, 0x00, //          #####   #####
	0x00, 0x78, 0x3E, 0x00, //          ####     #####
	0x00, 0xF8, 0x3E, 0x00, //         #####     #####
	0x00, 0xF8, 0x3E, 0x00, //         #####     #####
	0x00, 0xF0, 0x1F, 0x00, //         ####       #####
	0x01, 0xF0, 0x1F, 0x00, //        #####       #####
	0x01, 0xF0, 0x1F, 0x00, //        #####       #####
	0x01, 0xE0, 0x1F, 0x80, //        ####        ######
	0x03, 0xE0, 0x0F, 0x80, //       #####         #####
	0x03, 0xE0, 0x0F, 0x80, //       #####         #####
	0x03, 0xC0, 0x0F, 0xC0, //       ####          ######
	0x07, 0xC0, 0x07, 0xC0, //      #####           #####
	0x07, 0xC0, 0x07, 0xC0, //      #####           #####
	0x0F, 0x80, 0x07, 0xE0, //     #####            ######
	0x0F, 0x80, 0x03, 0xE0, //     #####             #####
	0x0F, 0xFF, 0xFF, 0xE0, //     #######################
	0x1F, 0xFF, 0xFF, 0xF0, //    #########################
	0x1F, 0xFF, 0xFF, 0xF0, //    #########################
	0x1F, 0xFF, 0xFF, 0xF0, //    #########################
	0x3F, 0xFF, 0xFF, 0xF8, //   ###########################
	0x3E, 0x00, 0x00, 0xF8, //   #####                 #####
	0x3E, 0x00, 0x00, 0xF8, //   #####                 #####
	0x7E, 0x00, 0x00, 0xFC, //  ######                 ######
	0x7C, 0x00, 0x00, 0x7C, //  #####                   #####
	0x7C, 0x00, 0x00, 0x7C, //  #####                   #####
	0xFC, 0x00, 0x00, 0x7E, // ######                   ######
	0xF8, 0x00, 0x00, 0x3E, // #####                     #####
	0xF8, 0x00, 0x00, 0x3E, // #####                     #####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @8024 'B' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x0F, 0xFF, 0xF0, 0x00, //     ################
	0x0F, 0xFF, 0xFE, 0x00, //     ###################
	0x0F, 0xFF, 0xFF, 0x00, //     ####################
	0x0F, 0xFF, 0xFF, 0x80, //     #####################
	0x0F, 0x80, 0x3F, 0xC0, //     #####         ########
	0x0F, 0x80, 0x0F, 0xC0, //     #####           ######
	0x0F, 0x80, 0x07, 0xE0, //     #####            ######
	0x0F, 0x80, 0x03, 0xE0, //     #####             #####
	0x0F, 0x80, 0x03, 0xE0, //     #####             #####
	0x0F, 0x80, 0x03, 0xE0, //     #####             #####
	0x0F, 0x80, 0x03, 0xE0, //     #####             #####
	0x0F, 0x80, 0x03, 0xE0, //     #####             #####
	0x0F, 0x80, 0x07, 0xC0, //     #####            #####
	0x0F, 0x80, 0x07, 0xC0, //     #####            #####
	0x0F, 0x80, 0x0F, 0x80, //     #####           #####
	0x0F, 0x80, 0x3F, 0x00, //     #####         ######
	0x0F, 0xFF, 0xFE, 0x00, //     ###################
	0x0F, 0xFF, 0xF8, 0x00, //     #################
	0x0F, 0xFF, 0xFF, 0x00, //     ####################
	0x0F, 0xFF, 0xFF, 0x80, //     #####################
	0x0F, 0x80, 0x3F, 0xC0, //     #####         ########
	0x0F, 0x80, 0x0F, 0xE0, //     #####           #######
	0x0F, 0x80, 0x03, 0xE0, //     #####             #####
	0x0F, 0x80, 0x03, 0xF0, //     #####             ######
	0x0F, 0x80, 0x01, 0xF0, //     #####              #####
	0x0F, 0x80, 0x01, 0xF0, //     #####              #####
	0x0F, 0x80, 0x01, 0xF0, //     #####              #####
	0x0F, 0x80, 0x01, 0xF0, //     #####              #####
	0x0F, 0x80, 0x01, 0xF0, //     #####              #####
	0x0F, 0x80, 0x03, 0xE0, //     #####             #####
	0x0F, 0x80, 0x03, 0xE0, //     #####             #####
	0x0F, 0x80, 0x07, 0xE0, //     #####            ######
	0x0F, 0x80, 0x3F, 0xC0, //     #####         ########
	0x0F, 0xFF, 0xFF, 0x80, //     #####################
	0x0F, 0xFF, 0xFF, 0x00, //     ####################
	0x0F, 0xFF, 0xFC, 0x00, //     ##################
	0x0F, 0xFF, 0xE0, 0x00, //     ###############
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @8260 'C' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x01, 0xFF, 0x00, //                #########
	0x00, 0x0F, 0xFF, 0xE0, //             ###############
	0x00, 0x1F, 0xFF, 0xF0, //            #################
	0x00, 0x7F, 0xFF, 0xF0, //          ###################
	0x00, 0xFF, 0xFF, 0xF0, //         ####################
	0x01, 0xFF, 0x00, 0xF0, //        #########        ####
	0x01, 0xFC, 0x00, 0x10, //        #######             #
	0x03, 0xF0, 0x00, 0x00, //       ######
	0x07, 0xE0, 0x00, 0x00, //      ######
	0x07, 0xE0, 0x00, 0x00, //      ######
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x1F, 0x00, 0x00, 0x00, //    #####
	0x1F, 0x00, 0x00, 0x00, //    #####
	0x1F, 0x00, 0x00, 0x00, //    #####
	0x1F, 0x00, 0x00, 0x00, //    #####
	0x1F, 0x00, 0x00, 0x00, //    #####
	0x1F, 0x00, 0x00, 0x00, //    #####
	0x1F, 0x00, 0x00, 0x00, //    #####
	0x1F, 0x00, 0x00, 0x00, //    #####
	0x1F, 0x00, 0x00, 0x00, //    #####
	0x1F, 0x00, 0x00, 0x00, //    #####
	0x1F, 0x00, 0x00, 0x00, //    #####
	0x1F, 0x80, 0x00, 0x00, //    ######
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0xC0, 0x00, 0x00, //     ######
	0x0F, 0xC0, 0x00, 0x00, //     ######
	0x07, 0xE0, 0x00, 0x00, //      ######
	0x07, 0xF0, 0x00, 0x00, //      #######
	0x03, 0xF8, 0x00, 0x10, //       #######              #
	0x01, 0xFF, 0x00, 0xF0, //        #########        ####
	0x01, 0xFF, 0xFF, 0xF0, //        #####################
	0x00, 0xFF, 0xFF, 0xF0, //         ####################
	0x00, 0x3F, 0xFF, 0xF0, //           ##################
	0x00, 0x1F, 0xFF, 0xE0, //            ################
	0x00, 0x03, 0xFF, 0x00, //               ##########
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @8496 'D' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x1F, 0xFF, 0x80, 0x00, //    ##############
	0x1F, 0xFF, 0xF8, 0x00, //    ##################
	0x1F, 0xFF, 0xFE, 0x00, //    ####################
	0x1F, 0xFF, 0xFF, 0x00, //    #####################
	0x1F, 0x00, 0x7F, 0x80, //    #####         ########
	0x1F, 0x00, 0x1F, 0xC0, //    #####           #######
	0x1F, 0x00, 0x0F, 0xC0, //    #####            ######
	0x1F, 0x00, 0x07, 0xE0, //    #####             ######
	0x1F, 0x00, 0x03, 0xE0, //    #####              #####
	0x1F, 0x00, 0x01, 0xF0, //    #####               #####
	0x1F, 0x00, 0x01, 0xF0, //    #####               #####
	0x1F, 0x00, 0x01, 0xF0, //    #####               #####
	0x1F, 0x00, 0x01, 0xF8, //    #####               ######
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x01, 0xF0, //    #####               #####
	0x1F, 0x00, 0x01, 0xF0, //    #####               #####
	0x1F, 0x00, 0x01, 0xF0, //    #####               #####
	0x1F, 0x00, 0x03, 0xE0, //    #####              #####
	0x1F, 0x00, 0x03, 0xE0, //    #####              #####
	0x1F, 0x00, 0x07, 0xC0, //    #####             #####
	0x1F, 0x00, 0x0F, 0xC0, //    #####            ######
	0x1F, 0x00, 0x3F, 0x80, //    #####          #######
	0x1F, 0x00, 0xFF, 0x00, //    #####        ########
	0x1F, 0xFF, 0xFE, 0x00, //    ####################
	0x1F, 0xFF, 0xFC, 0x00, //    ###################
	0x1F, 0xFF, 0xE0, 0x00, //    ################
	0x1F, 0xFF, 0x00, 0x00, //    #############
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @8732 'E' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x03, 0xFF, 0xFF, 0xE0, //       #####################
	0x03, 0xFF, 0xFF, 0xE0, //       #####################
	0x03, 0xFF, 0xFF, 0xE0, //       #####################
	0x03, 0xFF, 0xFF, 0xE0, //       #####################
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xFF, 0xFF, 0xC0, //       ####################
	0x03, 0xFF, 0xFF, 0xC0, //       ####################
	0x03, 0xFF, 0xFF, 0xC0, //       ####################
	0x03, 0xFF, 0xFF, 0xC0, //       ####################
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xFF, 0xFF, 0xE0, //       #####################
	0x03, 0xFF, 0xFF, 0xE0, //       #####################
	0x03, 0xFF, 0xFF, 0xE0, //       #####################
	0x03, 0xFF, 0xFF, 0xE0, //       #####################
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @8968 'F' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x03, 0xFF, 0xFF, 0xE0, //       #####################
	0x03, 0xFF, 0xFF, 0xE0, //       #####################
	0x03, 0xFF, 0xFF, 0xE0, //       #####################
	0x03, 0xFF, 0xFF, 0xE0, //       #####################
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xFF, 0xFF, 0xC0, //       ####################
	0x03, 0xFF, 0xFF, 0xC0, //       ####################
	0x03, 0xFF, 0xFF, 0xC0, //       ####################
	0x03, 0xFF, 0xFF, 0xC0, //       ####################
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @9204 'G' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x01, 0xFF, 0x80, //                ##########
	0x00, 0x0F, 0xFF, 0xF0, //             ################
	0x00, 0x3F, 0xFF, 0xF8, //           ###################
	0x00, 0x7F, 0xFF, 0xF8, //          ####################
	0x00, 0xFF, 0xFF, 0xF8, //         #####################
	0x01, 0xFF, 0x00, 0x78, //        #########         ####
	0x03, 0xF8, 0x00, 0x08, //       #######               #
	0x07, 0xF0, 0x00, 0x00, //      #######
	0x07, 0xE0, 0x00, 0x00, //      ######
	0x0F, 0xC0, 0x00, 0x00, //     ######
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x1F, 0x80, 0x00, 0x00, //    ######
	0x1F, 0x00, 0x00, 0x00, //    #####
	0x1F, 0x00, 0x00, 0x00, //    #####
	0x3F, 0x00, 0x00, 0x00, //   ######
	0x3E, 0x00, 0x00, 0x00, //   #####
	0x3E, 0x00, 0x00, 0x00, //   #####
	0x3E, 0x00, 0x00, 0x00, //   #####
	0x3E, 0x00, 0xFF, 0xF8, //   #####         #############
	0x3E, 0x00, 0xFF, 0xF8, //   #####         #############
	0x3E, 0x00, 0xFF, 0xF8, //   #####         #############
	0x3E, 0x00, 0xFF, 0xF8, //   #####         #############
	0x3E, 0x00, 0x00, 0xF8, //   #####                 #####
	0x3E, 0x00, 0x00, 0xF8, //   #####                 #####
	0x3E, 0x00, 0x00, 0xF8, //   #####                 #####
	0x3F, 0x00, 0x00, 0xF8, //   ######                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x0F, 0x80, 0x00, 0xF8, //     #####               #####
	0x0F, 0xC0, 0x00, 0xF8, //     ######              #####
	0x07, 0xC0, 0x00, 0xF8, //      #####              #####
	0x07, 0xE0, 0x00, 0xF8, //      ######             #####
	0x03, 0xF8, 0x00, 0xF8, //       #######           #####
	0x01, 0xFE, 0x01, 0xF8, //        ########        ######
	0x00, 0xFF, 0xFF, 0xF8, //         #####################
	0x00, 0x7F, 0xFF, 0xF8, //          ####################
	0x00, 0x1F, 0xFF, 0xE0, //            ################
	0x00, 0x03, 0xFF, 0x00, //               ##########
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @9440 'H' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0xFF, 0xFF, 0xF8, //    ##########################
	0x1F, 0xFF, 0xFF, 0xF8, //    ##########################
	0x1F, 0xFF, 0xFF, 0xF8, //    ##########################
	0x1F, 0xFF, 0xFF, 0xF8, //    ##########################
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @9676 'I' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x0F, 0xFF, 0xFF, 0xE0, //     #######################
	0x0F, 0xFF, 0xFF, 0xE0, //     #######################
	0x0F, 0xFF, 0xFF, 0xE0, //     #######################
	0x0F, 0xFF, 0xFF, 0xE0, //     #######################
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x0F, 0xFF, 0xFF, 0xE0, //     #######################
	0x0F, 0xFF, 0xFF, 0xE0, //     #######################
	0x0F, 0xFF, 0xFF, 0xE0, //     #######################
	0x0F, 0xFF, 0xFF, 0xE0, //     #######################
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @9912 'J' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x07, 0xFF, 0xFF, 0x80, //      ####################
	0x07, 0xFF, 0xFF, 0x80, //      ####################
	0x07, 0xFF, 0xFF, 0x80, //      ####################
	0x07, 0xFF, 0xFF, 0x80, //      ####################
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x04, 0x00, 0x1F, 0x00, //      #             #####
	0x06, 0x00, 0x3F, 0x00, //      ##           ######
	0x07, 0xC0, 0xFE, 0x00, //      #####      #######
	0x07, 0xFF, 0xFC, 0x00, //      #################
	0x07, 0xFF, 0xF8, 0x00, //      ################
	0x03, 0xFF, 0xF0, 0x00, //       ##############
	0x00, 0x7F, 0x80, 0x00, //          ########
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @10148 'K' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x0F, 0x80, 0x01, 0xF8, //     #####              ######
	0x0F, 0x80, 0x03, 0xF0, //     #####             ######
	0x0F, 0x80, 0x07, 0xE0, //     #####            ######
	0x0F, 0x80, 0x0F, 0xC0, //     #####           ######
	0x0F, 0x80, 0x1F, 0x80, //     #####          ######
	0x0F, 0x80, 0x1F, 0x00, //     #####          #####
	0x0F, 0x80, 0x3E, 0x00, //     #####         #####
	0x0F, 0x80, 0x7E, 0x00, //     #####        ######
	0x0F, 0x80, 0xFC, 0x00, //     #####       ######
	0x0F, 0x81, 0xF8, 0x00, //     #####      ######
	0x0F, 0x81, 0xF0, 0x00, //     #####      #####
	0x0F, 0x83, 0xE0, 0x00, //     #####     #####
	0x0F, 0x87, 0xC0, 0x00, //     #####    #####
	0x0F, 0x8F, 0xC0, 0x00, //     #####   ######
	0x0F, 0x8F, 0x80, 0x00, //     #####   #####
	0x0F, 0x9F, 0x00, 0x00, //     #####  #####
	0x0F, 0xBE, 0x00, 0x00, //     ##### #####
	0x0F, 0xFC, 0x00, 0x00, //     ##########
	0x0F, 0xFC, 0x00, 0x00, //     ##########
	0x0F, 0xFE, 0x00, 0x00, //     ###########
	0x0F, 0xBF, 0x00, 0x00, //     ##### ######
	0x0F, 0x9F, 0x80, 0x00, //     #####  ######
	0x0F, 0x8F, 0xC0, 0x00, //     #####   ######
	0x0F, 0x87, 0xC0, 0x00, //     #####    #####
	0x0F, 0x87, 0xE0, 0x00, //     #####    ######
	0x0F, 0x83, 0xF0, 0x00, //     #####     ######
	0x0F, 0x81, 0xF8, 0x00, //     #####      ######
	0x0F, 0x80, 0xFC, 0x00, //     #####       ######
	0x0F, 0x80, 0xFE, 0x00, //     #####       #######
	0x0F, 0x80, 0x7E, 0x00, //     #####        ######
	0x0F, 0x80, 0x3F, 0x00, //     #####         ######
	0x0F, 0x80, 0x1F, 0x80, //     #####          ######
	0x0F, 0x80, 0x0F, 0xC0, //     #####           ######
	0x0F, 0x80, 0x0F, 0xE0, //     #####           #######
	0x0F, 0x80, 0x07, 0xE0, //     #####            ######
	0x0F, 0x80, 0x03, 0xF0, //     #####             ######
	0x0F, 0x80, 0x01, 0xF8, //     #####              ######
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @10384 'L' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xFF, 0xFF, 0xF0, //        #####################
	0x01, 0xFF, 0xFF, 0xF0, //        #####################
	0x01, 0xFF, 0xFF, 0xF0, //        #####################
	0x01, 0xFF, 0xFF, 0xF0, //        #####################
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @10620 'M' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x1F, 0x80, 0x03, 0xF8, //    ######             #######
	0x1F, 0x80, 0x03, 0xF8, //    ######             #######
	0x1F, 0xC0, 0x03, 0xF8, //    #######            #######
	0x1F, 0xC0, 0x07, 0xF8, //    #######           ########
	0x1F, 0xC0, 0x07, 0xF8, //    #######           ########
	0x1D, 0xE0, 0x07, 0x78, //    ### ####          ### ####
	0x1D, 0xE0, 0x0F, 0x78, //    ### ####         #### ####
	0x3D, 0xF0, 0x0F, 0x78, //   #### #####        #### ####
	0x3C, 0xF0, 0x0E, 0x78, //   ####  ####        ###  ####
	0x3C, 0xF0, 0x1E, 0x78, //   ####  ####       ####  ####
	0x3C, 0xF8, 0x1E, 0x78, //   ####  #####      ####  ####
	0x3C, 0x78, 0x1C, 0x78, //   ####   ####      ###   ####
	0x3C, 0x7C, 0x3C, 0x78, //   ####   #####    ####   ####
	0x3C, 0x3C, 0x3C, 0x7C, //   ####    ####    ####   #####
	0x3C, 0x3C, 0x78, 0x7C, //   ####    ####   ####    #####
	0x3C, 0x3E, 0x78, 0x7C, //   ####    #####  ####    #####
	0x3C, 0x1E, 0x78, 0x7C, //   ####     ####  ####    #####
	0x3C, 0x1E, 0x70, 0x7C, //   ####     ####  ###     #####
	0x3C, 0x0F, 0xF0, 0x7C, //   ####      ########     #####
	0x3C, 0x0F, 0xE0, 0x7C, //   ####      #######      #####
	0x3C, 0x0F, 0xE0, 0x7C, //   ####      #######      #####
	0x3C, 0x07, 0xE0, 0x7C, //   ####       ######      #####
	0x3C, 0x07, 0xC0, 0x7C, //   ####       #####       #####
	0x3C, 0x07, 0xC0, 0x7C, //   ####       #####       #####
	0x3C, 0x03, 0xC0, 0x7C, //   ####        ####       #####
	0x3C, 0x00, 0x00, 0x7C, //   ####                   #####
	0x3C, 0x00, 0x00, 0x3C, //   ####                    ####
	0x3C, 0x00, 0x00, 0x3C, //   ####                    ####
	0x3C, 0x00, 0x00, 0x3C, //   ####                    ####
	0x3C, 0x00, 0x00, 0x3C, //   ####                    ####
	0x3C, 0x00, 0x00, 0x3E, //   ####                    #####
	0x7C, 0x00, 0x00, 0x3E, //  #####                    #####
	0x7C, 0x00, 0x00, 0x3E, //  #####                    #####
	0x7C, 0x00, 0x00, 0x3E, //  #####                    #####
	0x7C, 0x00, 0x00, 0x3E, //  #####                    #####
	0x7C, 0x00, 0x00, 0x3E, //  #####                    #####
	0x7C, 0x00, 0x00, 0x3E, //  #####                    #####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @10856 'N' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x1F, 0xC0, 0x00, 0xF8, //    #######              #####
	0x1F, 0xE0, 0x00, 0xF8, //    ########             #####
	0x1F, 0xE0, 0x00, 0xF8, //    ########             #####
	0x1F, 0xE0, 0x00, 0xF8, //    ########             #####
	0x1F, 0xF0, 0x00, 0xF8, //    #########            #####
	0x1F, 0xF0, 0x00, 0xF8, //    #########            #####
	0x1F, 0xF8, 0x00, 0xF8, //    ##########           #####
	0x1F, 0x78, 0x00, 0xF8, //    ##### ####           #####
	0x1F, 0x7C, 0x00, 0xF8, //    ##### #####          #####
	0x1F, 0x7C, 0x00, 0xF8, //    ##### #####          #####
	0x1F, 0x3E, 0x00, 0xF8, //    #####  #####         #####
	0x1F, 0x3E, 0x00, 0xF8, //    #####  #####         #####
	0x1F, 0x1F, 0x00, 0xF8, //    #####   #####        #####
	0x1F, 0x1F, 0x00, 0xF8, //    #####   #####        #####
	0x1F, 0x0F, 0x80, 0xF8, //    #####    #####       #####
	0x1F, 0x0F, 0x80, 0xF8, //    #####    #####       #####
	0x1F, 0x07, 0xC0, 0xF8, //    #####     #####      #####
	0x1F, 0x07, 0xC0, 0xF8, //    #####     #####      #####
	0x1F, 0x07, 0xC0, 0xF8, //    #####     #####      #####
	0x1F, 0x03, 0xE0, 0xF8, //    #####      #####     #####
	0x1F, 0x03, 0xE0, 0xF8, //    #####      #####     #####
	0x1F, 0x01, 0xF0, 0xF8, //    #####       #####    #####
	0x1F, 0x01, 0xF0, 0xF8, //    #####       #####    #####
	0x1F, 0x00, 0xF8, 0xF8, //    #####        #####   #####
	0x1F, 0x00, 0xF8, 0xF8, //    #####        #####   #####
	0x1F, 0x00, 0x7C, 0xF8, //    #####         #####  #####
	0x1F, 0x00, 0x7C, 0xF8, //    #####         #####  #####
	0x1F, 0x00, 0x3C, 0xF8, //    #####          ####  #####
	0x1F, 0x00, 0x3E, 0xF8, //    #####          ##### #####
	0x1F, 0x00, 0x1E, 0xF8, //    #####           #### #####
	0x1F, 0x00, 0x1F, 0xF8, //    #####           ##########
	0x1F, 0x00, 0x0F, 0xF8, //    #####            #########
	0x1F, 0x00, 0x0F, 0xF8, //    #####            #########
	0x1F, 0x00, 0x0F, 0xF8, //    #####            #########
	0x1F, 0x00, 0x07, 0xF8, //    #####             ########
	0x1F, 0x00, 0x07, 0xF8, //    #####             ########
	0x1F, 0x00, 0x03, 0xF8, //    #####              #######
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @11092 'O' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x07, 0xF0, 0x00, //              #######
	0x00, 0x3F, 0xFE, 0x00, //           #############
	0x00, 0x7F, 0xFF, 0x00, //          ###############
	0x01, 0xFF, 0xFF, 0x80, //        ##################
	0x03, 0xF8, 0x1F, 0xC0, //       #######      #######
	0x03, 0xF0, 0x07, 0xE0, //       ######         ######
	0x07, 0xE0, 0x03, 0xE0, //      ######           #####
	0x0F, 0xC0, 0x03, 0xF0, //     ######            ######
	0x0F, 0x80, 0x01, 0xF0, //     #####              #####
	0x0F, 0x80, 0x01, 0xF8, //     #####              ######
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0x7C, //    #####                 #####
	0x3E, 0x00, 0x00, 0x7C, //   #####                  #####
	0x3E, 0x00, 0x00, 0x7C, //   #####                  #####
	0x3E, 0x00, 0x00, 0x7C, //   #####                  #####
	0x3E, 0x00, 0x00, 0x7C, //   #####                  #####
	0x3E, 0x00, 0x00, 0x7C, //   #####                  #####
	0x3E, 0x00, 0x00, 0x7C, //   #####                  #####
	0x3E, 0x00, 0x00, 0x7C, //   #####                  #####
	0x3E, 0x00, 0x00, 0x7C, //   #####                  #####
	0x3E, 0x00, 0x00, 0x7C, //   #####                  #####
	0x3E, 0x00, 0x00, 0x7C, //   #####                  #####
	0x3E, 0x00, 0x00, 0x7C, //   #####                  #####
	0x3E, 0x00, 0x00, 0xF8, //   #####                 #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x80, 0x01, 0xF0, //    ######              #####
	0x0F, 0x80, 0x01, 0xF0, //     #####              #####
	0x0F, 0xC0, 0x03, 0xE0, //     ######            #####
	0x07, 0xC0, 0x07, 0xE0, //      #####           ######
	0x07, 0xE0, 0x0F, 0xC0, //      ######         ######
	0x03, 0xF8, 0x1F, 0xC0, //       #######      #######
	0x01, 0xFF, 0xFF, 0x80, //        ##################
	0x00, 0xFF, 0xFE, 0x00, //         ###############
	0x00, 0x7F, 0xFC, 0x00, //          #############
	0x00, 0x0F, 0xE0, 0x00, //             #######
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @11328 'P' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x0F, 0xFF, 0xE0, 0x00, //     ###############
	0x0F, 0xFF, 0xFC, 0x00, //     ##################
	0x0F, 0xFF, 0xFF, 0x00, //     ####################
	0x0F, 0xFF, 0xFF, 0x80, //     #####################
	0x0F, 0x80, 0x3F, 0xC0, //     #####         ########
	0x0F, 0x80, 0x0F, 0xE0, //     #####           #######
	0x0F, 0x80, 0x07, 0xE0, //     #####            ######
	0x0F, 0x80, 0x03, 0xE0, //     #####             #####
	0x0F, 0x80, 0x03, 0xF0, //     #####             ######
	0x0F, 0x80, 0x01, 0xF0, //     #####              #####
	0x0F, 0x80, 0x01, 0xF0, //     #####              #####
	0x0F, 0x80, 0x01, 0xF0, //     #####              #####
	0x0F, 0x80, 0x01, 0xF0, //     #####              #####
	0x0F, 0x80, 0x01, 0xF0, //     #####              #####
	0x0F, 0x80, 0x01, 0xF0, //     #####              #####
	0x0F, 0x80, 0x03, 0xE0, //     #####             #####
	0x0F, 0x80, 0x03, 0xE0, //     #####             #####
	0x0F, 0x80, 0x07, 0xC0, //     #####            #####
	0x0F, 0x80, 0x0F, 0xC0, //     #####           ######
	0x0F, 0x80, 0x3F, 0x80, //     #####         #######
	0x0F, 0xFF, 0xFF, 0x00, //     ####################
	0x0F, 0xFF, 0xFE, 0x00, //     ###################
	0x0F, 0xFF, 0xF8, 0x00, //     #################
	0x0F, 0xFF, 0xC0, 0x00, //     ##############
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @11564 'Q' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x07, 0xF0, 0x00, //              #######
	0x00, 0x3F, 0xFE, 0x00, //           #############
	0x00, 0x7F, 0xFF, 0x00, //          ###############
	0x01, 0xFF, 0xFF, 0x80, //        ##################
	0x03, 0xFF, 0xFF, 0xC0, //       ####################
	0x03, 0xF8, 0x1F, 0xE0, //       #######      ########
	0x07, 0xE0, 0x07, 0xE0, //      ######          ######
	0x07, 0xC0, 0x03, 0xF0, //      #####            ######
	0x0F, 0xC0, 0x01, 0xF0, //     ######             #####
	0x0F, 0x80, 0x01, 0xF8, //     #####              ######
	0x1F, 0x80, 0x00, 0xF8, //    ######               #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xFC, //    #####                ######
	0x3E, 0x00, 0x00, 0x7C, //   #####                  #####
	0x3E, 0x00, 0x00, 0x7C, //   #####                  #####
	0x3E, 0x00, 0x00, 0x7C, //   #####                  #####
	0x3E, 0x00, 0x00, 0x7C, //   #####                  #####
	0x3E, 0x00, 0x00, 0x7C, //   #####                  #####
	0x3E, 0x00, 0x00, 0x7C, //   #####                  #####
	0x3E, 0x00, 0x00, 0x7C, //   #####                  #####
	0x3E, 0x00, 0x00, 0x7C, //   #####                  #####
	0x3E, 0x00, 0x00, 0x7C, //   #####                  #####
	0x3E, 0x00, 0x00, 0x7C, //   #####                  #####
	0x3E, 0x00, 0x00, 0x7C, //   #####                  #####
	0x3E, 0x00, 0x00, 0x78, //   #####                  ####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x01, 0xF0, //    #####               #####
	0x0F, 0x80, 0x01, 0xF0, //     #####              #####
	0x0F, 0x80, 0x03, 0xF0, //     #####             ######
	0x0F, 0xC0, 0x03, 0xE0, //     ######            #####
	0x07, 0xE0, 0x0F, 0xC0, //      ######         ######
	0x03, 0xF8, 0x1F, 0xC0, //       #######      #######
	0x01, 0xFF, 0xFF, 0x80, //        ##################
	0x00, 0xFF, 0xFF, 0x00, //         ################
	0x00, 0x7F, 0xFC, 0x00, //          #############
	0x00, 0x1F, 0xF0, 0x00, //            #########
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x03, 0xF0, 0x04, //               ######         #
	0x00, 0x03, 0xF8, 0x1E, //               #######      ####
	0x00, 0x01, 0xFF, 0xFF, //                #################
	0x00, 0x00, 0xFF, 0xFE, //                 ###############
	0x00, 0x00, 0x7F, 0xFC, //                  #############
	0x00, 0x00, 0x0F, 0xE0, //                     #######
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @11800 'R' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x07, 0xFF, 0xF0, 0x00, //      ###############
	0x07, 0xFF, 0xFC, 0x00, //      #################
	0x07, 0xFF, 0xFF, 0x00, //      ###################
	0x07, 0xFF, 0xFF, 0x80, //      ####################
	0x07, 0xC0, 0x3F, 0xC0, //      #####        ########
	0x07, 0xC0, 0x0F, 0xC0, //      #####          ######
	0x07, 0xC0, 0x07, 0xE0, //      #####           ######
	0x07, 0xC0, 0x03, 0xE0, //      #####            #####
	0x07, 0xC0, 0x03, 0xE0, //      #####            #####
	0x07, 0xC0, 0x03, 0xE0, //      #####            #####
	0x07, 0xC0, 0x03, 0xE0, //      #####            #####
	0x07, 0xC0, 0x03, 0xE0, //      #####            #####
	0x07, 0xC0, 0x07, 0xE0, //      #####           ######
	0x07, 0xC0, 0x07, 0xC0, //      #####           #####
	0x07, 0xC0, 0x0F, 0xC0, //      #####          ######
	0x07, 0xC0, 0x3F, 0x80, //      #####        #######
	0x07, 0xFF, 0xFF, 0x00, //      ###################
	0x07, 0xFF, 0xFE, 0x00, //      ##################
	0x07, 0xFF, 0xF0, 0x00, //      ###############
	0x07, 0xFF, 0xF0, 0x00, //      ###############
	0x07, 0xC1, 0xF8, 0x00, //      #####     ######
	0x07, 0xC0, 0x7C, 0x00, //      #####       #####
	0x07, 0xC0, 0x7E, 0x00, //      #####       ######
	0x07, 0xC0, 0x3E, 0x00, //      #####        #####
	0x07, 0xC0, 0x3F, 0x00, //      #####        ######
	0x07, 0xC0, 0x1F, 0x00, //      #####         #####
	0x07, 0xC0, 0x1F, 0x80, //      #####         ######
	0x07, 0xC0, 0x0F, 0x80, //      #####          #####
	0x07, 0xC0, 0x0F, 0xC0, //      #####          ######
	0x07, 0xC0, 0x07, 0xC0, //      #####           #####
	0x07, 0xC0, 0x07, 0xE0, //      #####           ######
	0x07, 0xC0, 0x03, 0xE0, //      #####            #####
	0x07, 0xC0, 0x03, 0xF0, //      #####            ######
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF8, //      #####             ######
	0x07, 0xC0, 0x00, 0xF8, //      #####              #####
	0x07, 0xC0, 0x00, 0xFC, //      #####              ######
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @12036 'S' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x07, 0xFF, 0xC0, //              #############
	0x00, 0x3F, 0xFF, 0xC0, //           ################
	0x00, 0xFF, 0xFF, 0xC0, //         ##################
	0x01, 0xFF, 0xFF, 0xC0, //        ###################
	0x03, 0xF8, 0x01, 0xC0, //       #######          ###
	0x07, 0xE0, 0x00, 0x00, //      ######
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x0F, 0xC0, 0x00, 0x00, //     ######
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0xC0, 0x00, 0x00, //     ######
	0x0F, 0xE0, 0x00, 0x00, //     #######
	0x07, 0xF0, 0x00, 0x00, //      #######
	0x03, 0xFC, 0x00, 0x00, //       ########
	0x03, 0xFF, 0x00, 0x00, //       ##########
	0x01, 0xFF, 0xC0, 0x00, //        ###########
	0x00, 0x7F, 0xF0, 0x00, //          ###########
	0x00, 0x1F, 0xFC, 0x00, //            ###########
	0x00, 0x07, 0xFF, 0x00, //              ###########
	0x00, 0x01, 0xFF, 0x80, //                ##########
	0x00, 0x00, 0x7F, 0xC0, //                  #########
	0x00, 0x00, 0x1F, 0xE0, //                    ########
	0x00, 0x00, 0x07, 0xE0, //                      ######
	0x00, 0x00, 0x03, 0xF0, //                       ######
	0x00, 0x00, 0x01, 0xF0, //                        #####
	0x00, 0x00, 0x01, 0xF0, //                        #####
	0x00, 0x00, 0x01, 0xF0, //                        #####
	0x00, 0x00, 0x01, 0xF0, //                        #####
	0x00, 0x00, 0x01, 0xF0, //                        #####
	0x00, 0x00, 0x03, 0xF0, //                       ######
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x08, 0x00, 0x07, 0xE0, //     #                ######
	0x0F, 0x80, 0x1F, 0xC0, //     #####          #######
	0x0F, 0xFF, 0xFF, 0x80, //     #####################
	0x0F, 0xFF, 0xFF, 0x00, //     ####################
	0x0F, 0xFF, 0xFC, 0x00, //     ##################
	0x01, 0xFF, 0xE0, 0x00, //        ############
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @12272 'T' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x3F, 0xFF, 0xFF, 0xF8, //   ###########################
	0x3F, 0xFF, 0xFF, 0xF8, //   ###########################
	0x3F, 0xFF, 0xFF, 0xF8, //   ###########################
	0x3F, 0xFF, 0xFF, 0xF8, //   ###########################
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @12508 'U' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x80, 0x01, 0xF0, //    ######              #####
	0x0F, 0x80, 0x01, 0xF0, //     #####              #####
	0x0F, 0xC0, 0x03, 0xF0, //     ######            ######
	0x07, 0xE0, 0x07, 0xE0, //      ######          ######
	0x07, 0xF0, 0x1F, 0xC0, //      #######       #######
	0x03, 0xFF, 0xFF, 0x80, //       ###################
	0x01, 0xFF, 0xFF, 0x00, //        #################
	0x00, 0x7F, 0xFE, 0x00, //          ##############
	0x00, 0x1F, 0xF0, 0x00, //            #########
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @12744 'V' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x7C, 0x00, 0x00, 0x1F, //  #####                     #####
	0x7E, 0x00, 0x00, 0x1F, //  ######                    #####
	0x7E, 0x00, 0x00, 0x3F, //  ######                   ######
	0x3E, 0x00, 0x00, 0x3E, //   #####                   #####
	0x3F, 0x00, 0x00, 0x3E, //   ######                  #####
	0x3F, 0x00, 0x00, 0x7E, //   ######                 ######
	0x1F, 0x00, 0x00, 0x7C, //    #####                 #####
	0x1F, 0x80, 0x00, 0x7C, //    ######                #####
	0x1F, 0x80, 0x00, 0xFC, //    ######               ######
	0x0F, 0x80, 0x00, 0xF8, //     #####               #####
	0x0F, 0xC0, 0x00, 0xF8, //     ######              #####
	0x0F, 0xC0, 0x01, 0xF8, //     ######             ######
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xE0, 0x01, 0xF0, //      ######            #####
	0x07, 0xE0, 0x03, 0xE0, //      ######           #####
	0x03, 0xE0, 0x03, 0xE0, //       #####           #####
	0x03, 0xF0, 0x03, 0xE0, //       ######          #####
	0x03, 0xF0, 0x07, 0xC0, //       ######         #####
	0x01, 0xF0, 0x07, 0xC0, //        #####         #####
	0x01, 0xF0, 0x07, 0xC0, //        #####         #####
	0x01, 0xF8, 0x0F, 0x80, //        ######       #####
	0x00, 0xF8, 0x0F, 0x80, //         #####       #####
	0x00, 0xF8, 0x0F, 0x80, //         #####       #####
	0x00, 0xFC, 0x1F, 0x00, //         ######     #####
	0x00, 0x7C, 0x1F, 0x00, //          #####     #####
	0x00, 0x7C, 0x1F, 0x00, //          #####     #####
	0x00, 0x7E, 0x3E, 0x00, //          ######   #####
	0x00, 0x3E, 0x3E, 0x00, //           #####   #####
	0x00, 0x3E, 0x3E, 0x00, //           #####   #####
	0x00, 0x3F, 0x7C, 0x00, //           ###### #####
	0x00, 0x1F, 0x7C, 0x00, //            ##### #####
	0x00, 0x1F, 0x7C, 0x00, //            ##### #####
	0x00, 0x1F, 0xF8, 0x00, //            ##########
	0x00, 0x0F, 0xF8, 0x00, //             #########
	0x00, 0x0F, 0xF8, 0x00, //             #########
	0x00, 0x0F, 0xF0, 0x00, //             ########
	0x00, 0x07, 0xF0, 0x00, //              #######
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @12980 'W' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x3E, 0x00, 0x00, 0x3E, //   #####                   #####
	0x3E, 0x00, 0x00, 0x3E, //   #####                   #####
	0x3E, 0x00, 0x00, 0x3E, //   #####                   #####
	0x3E, 0x00, 0x00, 0x3E, //   #####                   #####
	0x3E, 0x00, 0x00, 0x3E, //   #####                   #####
	0x3E, 0x00, 0x00, 0x3E, //   #####                   #####
	0x1E, 0x00, 0x00, 0x3E, //    ####                   #####
	0x1E, 0x00, 0x00, 0x3E, //    ####                   #####
	0x1E, 0x00, 0x00, 0x3E, //    ####                   #####
	0x1F, 0x00, 0x00, 0x3C, //    #####                  ####
	0x1F, 0x00, 0x00, 0x3C, //    #####                  ####
	0x1F, 0x00, 0x00, 0x3C, //    #####                  ####
	0x1F, 0x03, 0xC0, 0x3C, //    #####      ####        ####
	0x1F, 0x03, 0xE0, 0x3C, //    #####      #####       ####
	0x1F, 0x03, 0xE0, 0x3C, //    #####      #####       ####
	0x1F, 0x03, 0xE0, 0x3C, //    #####      #####       ####
	0x1F, 0x07, 0xF0, 0x3C, //    #####     #######      ####
	0x1F, 0x07, 0xF0, 0x3C, //    #####     #######      ####
	0x1F, 0x07, 0xF0, 0x7C, //    #####     #######     #####
	0x0F, 0x0F, 0xF8, 0x7C, //     ####    #########    #####
	0x0F, 0x0F, 0x78, 0x7C, //     ####    #### ####    #####
	0x0F, 0x0E, 0x78, 0x7C, //     ####    ###  ####    #####
	0x0F, 0x0E, 0x7C, 0x7C, //     ####    ###  #####   #####
	0x0F, 0x1E, 0x7C, 0x7C, //     ####   ####  #####   #####
	0x0F, 0x1E, 0x3C, 0x7C, //     ####   ####   ####   #####
	0x0F, 0x1C, 0x3E, 0x7C, //     ####   ###    #####  #####
	0x0F, 0xBC, 0x3E, 0x7C, //     ##### ####    #####  #####
	0x0F, 0xBC, 0x1E, 0x7C, //     ##### ####     ####  #####
	0x0F, 0xB8, 0x1F, 0x78, //     ##### ###      ##### ####
	0x0F, 0xB8, 0x1F, 0x78, //     ##### ###      ##### ####
	0x0F, 0xF8, 0x0F, 0xF8, //     #########       #########
	0x07, 0xF8, 0x0F, 0xF8, //      ########       #########
	0x07, 0xF0, 0x0F, 0xF8, //      #######        #########
	0x07, 0xF0, 0x07, 0xF8, //      #######         ########
	0x07, 0xF0, 0x07, 0xF8, //      #######         ########
	0x07, 0xE0, 0x07, 0xF8, //      ######          ########
	0x07, 0xE0, 0x03, 0xF8, //      ######           #######
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @13216 'X' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x3F, 0x00, 0x00, 0xFC, //   ######                ######
	0x1F, 0x80, 0x01, 0xF8, //    ######              ######
	0x0F, 0xC0, 0x01, 0xF0, //     ######             #####
	0x0F, 0xC0, 0x03, 0xF0, //     ######            ######
	0x07, 0xE0, 0x07, 0xE0, //      ######          ######
	0x07, 0xE0, 0x07, 0xE0, //      ######          ######
	0x03, 0xF0, 0x0F, 0xC0, //       ######        ######
	0x01, 0xF8, 0x1F, 0x80, //        ######      ######
	0x01, 0xF8, 0x1F, 0x80, //        ######      ######
	0x00, 0xFC, 0x3F, 0x00, //         ######    ######
	0x00, 0xFE, 0x3F, 0x00, //         #######   ######
	0x00, 0x7E, 0x7E, 0x00, //          ######  ######
	0x00, 0x3F, 0xFC, 0x00, //           ############
	0x00, 0x3F, 0xFC, 0x00, //           ############
	0x00, 0x1F, 0xF8, 0x00, //            ##########
	0x00, 0x1F, 0xF0, 0x00, //            #########
	0x00, 0x0F, 0xF0, 0x00, //             ########
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x0F, 0xF0, 0x00, //             ########
	0x00, 0x1F, 0xF8, 0x00, //            ##########
	0x00, 0x1F, 0xF8, 0x00, //            ##########
	0x00, 0x3F, 0xFC, 0x00, //           ############
	0x00, 0x7F, 0xFE, 0x00, //          ##############
	0x00, 0x7E, 0x7E, 0x00, //          ######  ######
	0x00, 0xFC, 0x3F, 0x00, //         ######    ######
	0x00, 0xFC, 0x3F, 0x00, //         ######    ######
	0x01, 0xF8, 0x1F, 0x80, //        ######      ######
	0x03, 0xF0, 0x1F, 0xC0, //       ######       #######
	0x03, 0xF0, 0x0F, 0xC0, //       ######        ######
	0x07, 0xE0, 0x07, 0xE0, //      ######          ######
	0x0F, 0xE0, 0x07, 0xF0, //     #######          #######
	0x0F, 0xC0, 0x03, 0xF0, //     ######            ######
	0x1F, 0x80, 0x03, 0xF8, //    ######             #######
	0x1F, 0x80, 0x01, 0xF8, //    ######              ######
	0x3F, 0x00, 0x00, 0xFC, //   ######                ######
	0x7F, 0x00, 0x00, 0xFE, //  #######                #######
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @13452 'Y' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0xFC, 0x00, 0x00, 0x7E, // ######                   ######
	0x7E, 0x00, 0x00, 0xFC, //  ######                 ######
	0x7E, 0x00, 0x00, 0xFC, //  ######                 ######
	0x3F, 0x00, 0x01, 0xF8, //   ######               ######
	0x3F, 0x00, 0x01, 0xF8, //   ######               ######
	0x1F, 0x80, 0x03, 0xF0, //    ######             ######
	0x0F, 0x80, 0x03, 0xE0, //     #####             #####
	0x0F, 0xC0, 0x07, 0xE0, //     ######           ######
	0x07, 0xC0, 0x07, 0xC0, //      #####           #####
	0x07, 0xE0, 0x0F, 0xC0, //      ######         ######
	0x03, 0xE0, 0x0F, 0x80, //       #####         #####
	0x03, 0xF0, 0x1F, 0x80, //       ######       ######
	0x01, 0xF0, 0x1F, 0x00, //        #####       #####
	0x01, 0xF8, 0x3F, 0x00, //        ######     ######
	0x00, 0xF8, 0x3E, 0x00, //         #####     #####
	0x00, 0xFC, 0x7E, 0x00, //         ######   ######
	0x00, 0x7C, 0x7C, 0x00, //          #####   #####
	0x00, 0x7E, 0x7C, 0x00, //          ######  #####
	0x00, 0x3E, 0xF8, 0x00, //           ##### #####
	0x00, 0x1F, 0xF0, 0x00, //            #########
	0x00, 0x1F, 0xF0, 0x00, //            #########
	0x00, 0x0F, 0xE0, 0x00, //             #######
	0x00, 0x0F, 0xE0, 0x00, //             #######
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @13688 'Z' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x0F, 0xFF, 0xFF, 0xF0, //     ########################
	0x0F, 0xFF, 0xFF, 0xF0, //     ########################
	0x0F, 0xFF, 0xFF, 0xF0, //     ########################
	0x0F, 0xFF, 0xFF, 0xF0, //     ########################
	0x0F, 0xFF, 0xFF, 0xF0, //     ########################
	0x00, 0x00, 0x07, 0xE0, //                      ######
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x0F, 0xC0, //                     ######
	0x00, 0x00, 0x1F, 0x80, //                    ######
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x3F, 0x00, //                   ######
	0x00, 0x00, 0x3E, 0x00, //                   #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0xFC, 0x00, //                 ######
	0x00, 0x00, 0xF8, 0x00, //                 #####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x03, 0xF0, 0x00, //               ######
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x0F, 0xC0, 0x00, //             ######
	0x00, 0x0F, 0x80, 0x00, //             #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x3F, 0x00, 0x00, //           ######
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0xFC, 0x00, 0x00, //         ######
	0x00, 0xF8, 0x00, 0x00, //         #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x03, 0xF0, 0x00, 0x00, //       ######
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x0F, 0xC0, 0x00, 0x00, //     ######
	0x0F, 0xFF, 0xFF, 0xF8, //     #########################
	0x1F, 0xFF, 0xFF, 0xF8, //    ##########################
	0x1F, 0xFF, 0xFF, 0xF8, //    ##########################
	0x1F, 0xFF, 0xFF, 0xF8, //    ##########################
	0x1F, 0xFF, 0xFF, 0xF8, //    ##########################
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @13924 '[' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x7F, 0xFE, 0x00, //          ##############
	0x00, 0x7F, 0xFE, 0x00, //          ##############
	0x00, 0x7F, 0xFE, 0x00, //          ##############
	0x00, 0x7F, 0xFE, 0x00, //          ##############
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7F, 0xFE, 0x00, //          ##############
	0x00, 0x7F, 0xFE, 0x00, //          ##############
	0x00, 0x7F, 0xFE, 0x00, //          ##############
	0x00, 0x7F, 0xFE, 0x00, //          ##############
	0x00, 0x00, 0x00, 0x00, //
	// @14160 '\' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x03, 0xC0, 0x00, 0x00, //       ####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x00, 0xF0, 0x00, 0x00, //         ####
	0x00, 0xF8, 0x00, 0x00, //         #####
	0x00, 0x78, 0x00, 0x00, //          ####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0x3C, 0x00, 0x00, //           ####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x1E, 0x00, 0x00, //            ####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x0F, 0x80, 0x00, //             #####
	0x00, 0x0F, 0x80, 0x00, //             #####
	0x00, 0x07, 0x80, 0x00, //              ####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x01, 0xE0, 0x00, //                ####
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x00, 0xF0, 0x00, //                 ####
	0x00, 0x00, 0xF8, 0x00, //                 #####
	0x00, 0x00, 0xF8, 0x00, //                 #####
	0x00, 0x00, 0x78, 0x00, //                  ####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x3C, 0x00, //                   ####
	0x00, 0x00, 0x3E, 0x00, //                   #####
	0x00, 0x00, 0x3E, 0x00, //                   #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x0F, 0x00, //                     ####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x03, 0xC0, //                       ####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x01, 0xE0, //                        ####
	0x00, 0x00, 0x01, 0xF0, //                        #####
	0x00, 0x00, 0x01, 0xF0, //                        #####
	0x00, 0x00, 0x00, 0xF0, //                         ####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @14396 ']' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0xFF, 0xFC, 0x00, //         ##############
	0x00, 0xFF, 0xFC, 0x00, //         ##############
	0x00, 0xFF, 0xFC, 0x00, //         ##############
	0x00, 0xFF, 0xFC, 0x00, //         ##############
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0xFF, 0xFC, 0x00, //         ##############
	0x00, 0xFF, 0xFC, 0x00, //         ##############
	0x00, 0xFF, 0xFC, 0x00, //         ##############
	0x00, 0xFF, 0xFC, 0x00, //         ##############
	0x00, 0x00, 0x00, 0x00, //
	// @14632 '^' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x0F, 0xE0, 0x00, //             #######
	0x00, 0x0F, 0xF0, 0x00, //             ########
	0x00, 0x1E, 0xF0, 0x00, //            #### ####
	0x00, 0x1E, 0xF8, 0x00, //            #### #####
	0x00, 0x3C, 0x7C, 0x00, //           ####   #####
	0x00, 0x7C, 0x3C, 0x00, //          #####    ####
	0x00, 0x78, 0x3E, 0x00, //          ####     #####
	0x00, 0xF8, 0x1E, 0x00, //         #####      ####
	0x00, 0xF0, 0x1F, 0x00, //         ####       #####
	0x01, 0xF0, 0x0F, 0x80, //        #####        #####
	0x01, 0xE0, 0x0F, 0x80, //        ####         #####
	0x03, 0xE0, 0x07, 0xC0, //       #####          #####
	0x07, 0xC0, 0x03, 0xC0, //      #####            ####
	0x07, 0xC0, 0x03, 0xE0, //      #####            #####
	0x0F, 0x80, 0x01, 0xF0, //     #####              #####
	0x0F, 0x80, 0x01, 0xF0, //     #####              #####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @14868 '_' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0xFF, 0xFF, 0xFF, 0xFF, // ################################
	0xFF, 0xFF, 0xFF, 0xFF, // ################################
	0xFF, 0xFF, 0xFF, 0xFF, // ################################
	0xFF, 0xFF, 0xFF, 0xFF, // ################################
	0x00, 0x00, 0x00, 0x00, //
	// @15104 '`' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x03, 0xF8, 0x00, 0x00, //       #######
	0x01, 0xFC, 0x00, 0x00, //        #######
	0x00, 0xFE, 0x00, 0x00, //         #######
	0x00, 0x7F, 0x00, 0x00, //          #######
	0x00, 0x1F, 0x80, 0x00, //            ######
	0x00, 0x0F, 0xC0, 0x00, //             ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @15340 'a' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x1F, 0xF8, 0x00, //            ##########
	0x01, 0xFF, 0xFF, 0x00, //        #################
	0x03, 0xFF, 0xFF, 0x80, //       ###################
	0x03, 0xFF, 0xFF, 0xC0, //       ####################
	0x03, 0xE0, 0x0F, 0xE0, //       #####         #######
	0x02, 0x00, 0x07, 0xE0, //       #              ######
	0x00, 0x00, 0x03, 0xF0, //                       ######
	0x00, 0x00, 0x01, 0xF0, //                        #####
	0x00, 0x00, 0x01, 0xF0, //                        #####
	0x00, 0x00, 0x01, 0xF0, //                        #####
	0x00, 0x00, 0x01, 0xF0, //                        #####
	0x00, 0x00, 0x01, 0xF0, //                        #####
	0x00, 0x0F, 0xFF, 0xF0, //             ################
	0x00, 0x7F, 0xFF, 0xF0, //          ###################
	0x01, 0xFF, 0xFF, 0xF0, //        #####################
	0x03, 0xFF, 0xFF, 0xF0, //       ######################
	0x07, 0xF8, 0x01, 0xF0, //      ########          #####
	0x07, 0xE0, 0x01, 0xF0, //      ######            #####
	0x0F, 0xC0, 0x01, 0xF0, //     ######             #####
	0x0F, 0x80, 0x01, 0xF0, //     #####              #####
	0x0F, 0x80, 0x01, 0xF0, //     #####              #####
	0x0F, 0x80, 0x01, 0xF0, //     #####              #####
	0x0F, 0x80, 0x03, 0xF0, //     #####             ######
	0x0F, 0x80, 0x0F, 0xF0, //     #####           ########
	0x0F, 0xC0, 0x1F, 0xF0, //     ######         #########
	0x07, 0xE0, 0x7F, 0xF0, //      ######      ###########
	0x07, 0xFF, 0xFD, 0xF0, //      ################# #####
	0x03, 0xFF, 0xF9, 0xF0, //       ###############  #####
	0x01, 0xFF, 0xE0, 0xF0, //        ############     ####
	0x00, 0x3F, 0x80, 0x00, //           #######
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @15576 'b' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0xFC, 0x00, //      #####      ######
	0x07, 0xC3, 0xFF, 0x00, //      #####    ##########
	0x07, 0xCF, 0xFF, 0x80, //      #####  #############
	0x07, 0xDF, 0xFF, 0xC0, //      ##### ###############
	0x07, 0xFF, 0x0F, 0xE0, //      ###########    #######
	0x07, 0xFC, 0x03, 0xE0, //      #########        #####
	0x07, 0xF8, 0x03, 0xF0, //      ########         ######
	0x07, 0xF0, 0x01, 0xF0, //      #######           #####
	0x07, 0xE0, 0x01, 0xF0, //      ######            #####
	0x07, 0xE0, 0x00, 0xF8, //      ######             #####
	0x07, 0xC0, 0x00, 0xF8, //      #####              #####
	0x07, 0xC0, 0x00, 0xF8, //      #####              #####
	0x07, 0xC0, 0x00, 0xF8, //      #####              #####
	0x07, 0xC0, 0x00, 0xF8, //      #####              #####
	0x07, 0xC0, 0x00, 0xF8, //      #####              #####
	0x07, 0xC0, 0x00, 0xF8, //      #####              #####
	0x07, 0xC0, 0x00, 0xF8, //      #####              #####
	0x07, 0xC0, 0x00, 0xF8, //      #####              #####
	0x07, 0xC0, 0x00, 0xF8, //      #####              #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x03, 0xE0, //      #####            #####
	0x07, 0xC0, 0x03, 0xE0, //      #####            #####
	0x07, 0xC0, 0x07, 0xC0, //      #####           #####
	0x07, 0xF0, 0x1F, 0xC0, //      #######       #######
	0x07, 0xFF, 0xFF, 0x80, //      ####################
	0x07, 0xFF, 0xFF, 0x00, //      ###################
	0x03, 0xFF, 0xFC, 0x00, //       ################
	0x00, 0x3F, 0xE0, 0x00, //           #########
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @15812 'c' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x03, 0xFC, 0x00, //               ########
	0x00, 0x0F, 0xFF, 0x80, //             #############
	0x00, 0x3F, 0xFF, 0xC0, //           ################
	0x00, 0x7F, 0xFF, 0xC0, //          #################
	0x00, 0xFE, 0x03, 0xC0, //         #######       ####
	0x01, 0xF8, 0x00, 0x40, //        ######            #
	0x03, 0xF0, 0x00, 0x00, //       ######
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x07, 0xE0, 0x00, 0x00, //      ######
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0xC0, 0x00, 0x00, //     ######
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xE0, 0x00, 0x00, //      ######
	0x03, 0xF0, 0x00, 0x00, //       ######
	0x03, 0xF8, 0x00, 0x40, //       #######            #
	0x01, 0xFE, 0x03, 0xC0, //        ########       ####
	0x00, 0xFF, 0xFF, 0xC0, //         ##################
	0x00, 0x7F, 0xFF, 0xC0, //          #################
	0x00, 0x1F, 0xFF, 0x80, //            ##############
	0x00, 0x07, 0xFC, 0x00, //              #########
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @16048 'd' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x07, 0xFB, 0xE0, //              ######## #####
	0x00, 0x3F, 0xFF, 0xE0, //           #################
	0x00, 0xFF, 0xFF, 0xE0, //         ###################
	0x01, 0xFF, 0xFF, 0xE0, //        ####################
	0x03, 0xF8, 0x0F, 0xE0, //       #######       #######
	0x03, 0xF0, 0x03, 0xE0, //       ######          #####
	0x07, 0xC0, 0x03, 0xE0, //      #####            #####
	0x07, 0xC0, 0x03, 0xE0, //      #####            #####
	0x0F, 0x80, 0x03, 0xE0, //     #####             #####
	0x0F, 0x80, 0x03, 0xE0, //     #####             #####
	0x0F, 0x00, 0x03, 0xE0, //     ####              #####
	0x1F, 0x00, 0x03, 0xE0, //    #####              #####
	0x1F, 0x00, 0x03, 0xE0, //    #####              #####
	0x1F, 0x00, 0x03, 0xE0, //    #####              #####
	0x1F, 0x00, 0x03, 0xE0, //    #####              #####
	0x1F, 0x00, 0x03, 0xE0, //    #####              #####
	0x1F, 0x00, 0x03, 0xE0, //    #####              #####
	0x1F, 0x00, 0x03, 0xE0, //    #####              #####
	0x1F, 0x00, 0x03, 0xE0, //    #####              #####
	0x1F, 0x00, 0x03, 0xE0, //    #####              #####
	0x1F, 0x00, 0x07, 0xE0, //    #####             ######
	0x0F, 0x80, 0x0F, 0xE0, //     #####           #######
	0x0F, 0x80, 0x1F, 0xE0, //     #####          ########
	0x0F, 0xC0, 0x3F, 0xE0, //     ######        #########
	0x07, 0xC0, 0x7F, 0xE0, //      #####       ##########
	0x07, 0xF0, 0xFB, 0xE0, //      #######    ##### #####
	0x03, 0xFF, 0xF3, 0xE0, //       ##############  #####
	0x01, 0xFF, 0xE3, 0xE0, //        ############   #####
	0x00, 0xFF, 0xC1, 0xE0, //         ##########     ####
	0x00, 0x3F, 0x00, 0x00, //           ######
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @16284 'e' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x0F, 0xF0, 0x00, //             ########
	0x00, 0x3F, 0xFC, 0x00, //           ############
	0x00, 0xFF, 0xFF, 0x00, //         ################
	0x01, 0xFF, 0xFF, 0x80, //        ##################
	0x03, 0xF8, 0x1F, 0xC0, //       #######      #######
	0x03, 0xE0, 0x0F, 0xC0, //       #####         ######
	0x07, 0xC0, 0x07, 0xE0, //      #####           ######
	0x07, 0x80, 0x03, 0xE0, //      ####             #####
	0x0F, 0x80, 0x01, 0xE0, //     #####              ####
	0x0F, 0x00, 0x01, 0xF0, //     ####               #####
	0x0F, 0x00, 0x01, 0xF0, //     ####               #####
	0x1F, 0x00, 0x01, 0xF0, //    #####               #####
	0x1F, 0xFF, 0xFF, 0xF0, //    #########################
	0x1F, 0xFF, 0xFF, 0xF0, //    #########################
	0x1F, 0xFF, 0xFF, 0xF0, //    #########################
	0x1F, 0xFF, 0xFF, 0xF0, //    #########################
	0x1F, 0x00, 0x00, 0x00, //    #####
	0x1F, 0x00, 0x00, 0x00, //    #####
	0x1F, 0x00, 0x00, 0x00, //    #####
	0x1F, 0x00, 0x00, 0x00, //    #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0xC0, 0x00, 0x00, //     ######
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xF0, 0x00, 0x00, //      #######
	0x03, 0xFC, 0x01, 0xC0, //       ########         ###
	0x01, 0xFF, 0xFF, 0xC0, //        ###################
	0x00, 0xFF, 0xFF, 0xC0, //         ##################
	0x00, 0x7F, 0xFF, 0xC0, //          #################
	0x00, 0x0F, 0xFE, 0x00, //             ###########
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @16520 'f' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x1F, 0xF0, //                    #########
	0x00, 0x00, 0xFF, 0xFC, //                 ##############
	0x00, 0x03, 0xFF, 0xFC, //               ################
	0x00, 0x07, 0xFF, 0xFC, //              #################
	0x00, 0x07, 0xF0, 0x0C, //              #######        ##
	0x00, 0x0F, 0xC0, 0x00, //             ######
	0x00, 0x0F, 0x80, 0x00, //             #####
	0x00, 0x1F, 0x80, 0x00, //            ######
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x3F, 0xFF, 0xFF, 0xF8, //   ###########################
	0x3F, 0xFF, 0xFF, 0xF8, //   ###########################
	0x3F, 0xFF, 0xFF, 0xF8, //   ###########################
	0x3F, 0xFF, 0xFF, 0xF8, //   ###########################
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @16756 'g' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x0F, 0xE0, 0x00, //             #######
	0x00, 0x3F, 0xFF, 0xFC, //           ####################
	0x00, 0xFF, 0xFF, 0xFC, //         ######################
	0x01, 0xFF, 0xFF, 0xFC, //        #######################
	0x01, 0xF8, 0x1F, 0xFC, //        ######      ###########
	0x03, 0xF0, 0x0F, 0xC0, //       ######        ######
	0x03, 0xE0, 0x07, 0xC0, //       #####          #####
	0x07, 0xC0, 0x03, 0xE0, //      #####            #####
	0x07, 0xC0, 0x03, 0xE0, //      #####            #####
	0x07, 0xC0, 0x03, 0xE0, //      #####            #####
	0x07, 0xC0, 0x03, 0xE0, //      #####            #####
	0x07, 0xC0, 0x03, 0xE0, //      #####            #####
	0x07, 0xC0, 0x03, 0xE0, //      #####            #####
	0x03, 0xE0, 0x07, 0xC0, //       #####          #####
	0x03, 0xF0, 0x0F, 0xC0, //       ######        ######
	0x01, 0xF8, 0x1F, 0x80, //        ######      ######
	0x01, 0xFF, 0xFF, 0x80, //        ##################
	0x03, 0xFF, 0xFF, 0x00, //       ##################
	0x07, 0xFF, 0xFC, 0x00, //      #################
	0x07, 0xCF, 0xF0, 0x00, //      #####  ########
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0x80, 0x00, 0x00, //     #####
	0x0F, 0xC0, 0x00, 0x00, //     ######
	0x0F, 0xE0, 0x00, 0x00, //     #######
	0x07, 0xFF, 0xFF, 0x00, //      ###################
	0x03, 0xFF, 0xFF, 0xE0, //       #####################
	0x01, 0xFF, 0xFF, 0xF0, //        #####################
	0x03, 0xFF, 0xFF, 0xF8, //       #######################
	0x07, 0xC0, 0x01, 0xF8, //      #####             ######
	0x0F, 0x80, 0x00, 0xFC, //     #####               ######
	0x1F, 0x80, 0x00, 0x7C, //    ######                #####
	0x1F, 0x00, 0x00, 0x7C, //    #####                 #####
	0x1F, 0x00, 0x00, 0x7C, //    #####                 #####
	0x1F, 0x00, 0x00, 0x7C, //    #####                 #####
	0x1F, 0x00, 0x00, 0xF8, //    #####                #####
	0x1F, 0x80, 0x01, 0xF8, //    ######              ######
	0x0F, 0xF0, 0x07, 0xF0, //     ########         #######
	0x0F, 0xFF, 0xFF, 0xE0, //     #######################
	0x03, 0xFF, 0xFF, 0xC0, //       ####################
	0x01, 0xFF, 0xFF, 0x00, //        #################
	0x00, 0x3F, 0xF8, 0x00, //           ###########
	// @16992 'h' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0xFC, 0x00, //      #####      ######
	0x07, 0xC3, 0xFF, 0x00, //      #####    ##########
	0x07, 0xCF, 0xFF, 0xC0, //      #####  ##############
	0x07, 0xDF, 0xFF, 0xC0, //      ##### ###############
	0x07, 0xFF, 0x0F, 0xE0, //      ###########    #######
	0x07, 0xFC, 0x03, 0xE0, //      #########        #####
	0x07, 0xF8, 0x03, 0xF0, //      ########         ######
	0x07, 0xF0, 0x01, 0xF0, //      #######           #####
	0x07, 0xE0, 0x01, 0xF0, //      ######            #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @17228 'i' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x0F, 0xF0, 0x00, //             ########
	0x00, 0x0F, 0xF0, 0x00, //             ########
	0x00, 0x0F, 0xF0, 0x00, //             ########
	0x00, 0x0F, 0xF0, 0x00, //             ########
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x03, 0xC0, 0x00, //               ####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x03, 0xFF, 0xE0, 0x00, //       #############
	0x03, 0xFF, 0xE0, 0x00, //       #############
	0x03, 0xFF, 0xE0, 0x00, //       #############
	0x03, 0xFF, 0xE0, 0x00, //       #############
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x07, 0xFF, 0xFF, 0xF0, //      #######################
	0x07, 0xFF, 0xFF, 0xF0, //      #######################
	0x07, 0xFF, 0xFF, 0xF0, //      #######################
	0x07, 0xFF, 0xFF, 0xF0, //      #######################
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @17464 'j' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x1E, 0x00, //                    ####
	0x00, 0x00, 0x3F, 0x00, //                   ######
	0x00, 0x00, 0x7F, 0x80, //                  ########
	0x00, 0x00, 0x7F, 0x80, //                  ########
	0x00, 0x00, 0x7F, 0x80, //                  ########
	0x00, 0x00, 0x7F, 0x80, //                  ########
	0x00, 0x00, 0x3F, 0x00, //                   ######
	0x00, 0x00, 0x1E, 0x00, //                    ####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x07, 0xFF, 0xFF, 0x00, //      ###################
	0x07, 0xFF, 0xFF, 0x00, //      ###################
	0x07, 0xFF, 0xFF, 0x00, //      ###################
	0x07, 0xFF, 0xFF, 0x00, //      ###################
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x1F, 0x00, //                    #####
	0x00, 0x00, 0x3F, 0x00, //                   ######
	0x00, 0x00, 0x3E, 0x00, //                   #####
	0x00, 0x00, 0x7E, 0x00, //                  ######
	0x08, 0x00, 0xFC, 0x00, //     #           ######
	0x0F, 0x01, 0xFC, 0x00, //     ####       #######
	0x0F, 0xFF, 0xF8, 0x00, //     #################
	0x0F, 0xFF, 0xF0, 0x00, //     ################
	0x07, 0xFF, 0xC0, 0x00, //      #############
	0x00, 0xFF, 0x00, 0x00, //         ########
	// @17700 'k' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x03, 0xF0, //      #####            ######
	0x07, 0xC0, 0x07, 0xE0, //      #####           ######
	0x07, 0xC0, 0x0F, 0xC0, //      #####          ######
	0x07, 0xC0, 0x1F, 0x80, //      #####         ######
	0x07, 0xC0, 0x3F, 0x00, //      #####        ######
	0x07, 0xC0, 0x7E, 0x00, //      #####       ######
	0x07, 0xC0, 0xFC, 0x00, //      #####      ######
	0x07, 0xC1, 0xF8, 0x00, //      #####     ######
	0x07, 0xC3, 0xF0, 0x00, //      #####    ######
	0x07, 0xC7, 0xE0, 0x00, //      #####   ######
	0x07, 0xCF, 0xC0, 0x00, //      #####  ######
	0x07, 0xDF, 0x80, 0x00, //      ##### ######
	0x07, 0xFF, 0x00, 0x00, //      ###########
	0x07, 0xDF, 0x80, 0x00, //      ##### ######
	0x07, 0xDF, 0xC0, 0x00, //      ##### #######
	0x07, 0xCF, 0xE0, 0x00, //      #####  #######
	0x07, 0xC7, 0xE0, 0x00, //      #####   ######
	0x07, 0xC3, 0xF0, 0x00, //      #####    ######
	0x07, 0xC1, 0xF8, 0x00, //      #####     ######
	0x07, 0xC0, 0xFC, 0x00, //      #####      ######
	0x07, 0xC0, 0x7E, 0x00, //      #####       ######
	0x07, 0xC0, 0x7F, 0x00, //      #####       #######
	0x07, 0xC0, 0x3F, 0x80, //      #####        #######
	0x07, 0xC0, 0x1F, 0xC0, //      #####         #######
	0x07, 0xC0, 0x0F, 0xE0, //      #####          #######
	0x07, 0xC0, 0x07, 0xF0, //      #####           #######
	0x07, 0xC0, 0x03, 0xF8, //      #####            #######
	0x07, 0xC0, 0x01, 0xFC, //      #####             #######
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @17936 'l' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x03, 0xFF, 0xE0, 0x00, //       #############
	0x03, 0xFF, 0xE0, 0x00, //       #############
	0x03, 0xFF, 0xE0, 0x00, //       #############
	0x03, 0xFF, 0xE0, 0x00, //       #############
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x07, 0xFF, 0xFF, 0xF0, //      #######################
	0x07, 0xFF, 0xFF, 0xF0, //      #######################
	0x07, 0xFF, 0xFF, 0xF0, //      #######################
	0x07, 0xFF, 0xFF, 0xF0, //      #######################
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @18172 'm' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x1F, 0x03, 0xE0, //            #####      #####
	0x1E, 0x3F, 0x87, 0xF0, //    ####   #######    #######
	0x1E, 0x7F, 0xCF, 0xF8, //    ####  #########  #########
	0x1E, 0x7F, 0xCF, 0xF8, //    ####  #########  #########
	0x1E, 0xE7, 0xDC, 0xFC, //    #### ###  ##### ###  ######
	0x1E, 0xC3, 0xDC, 0x7C, //    #### ##    #### ###   #####
	0x1F, 0xC3, 0xF8, 0x7C, //    #######    #######    #####
	0x1F, 0x83, 0xF0, 0x7C, //    ######     ######     #####
	0x1F, 0x83, 0xF0, 0x7C, //    ######     ######     #####
	0x1F, 0x03, 0xF0, 0x7C, //    #####      ######     #####
	0x1F, 0x03, 0xE0, 0x7C, //    #####      #####      #####
	0x1F, 0x03, 0xE0, 0x7C, //    #####      #####      #####
	0x1F, 0x03, 0xE0, 0x7C, //    #####      #####      #####
	0x1F, 0x03, 0xE0, 0x7C, //    #####      #####      #####
	0x1F, 0x03, 0xE0, 0x7C, //    #####      #####      #####
	0x1F, 0x03, 0xE0, 0x7C, //    #####      #####      #####
	0x1F, 0x03, 0xE0, 0x7C, //    #####      #####      #####
	0x1F, 0x03, 0xE0, 0x7C, //    #####      #####      #####
	0x1F, 0x03, 0xE0, 0x7C, //    #####      #####      #####
	0x1F, 0x03, 0xE0, 0x7C, //    #####      #####      #####
	0x1F, 0x03, 0xE0, 0x7C, //    #####      #####      #####
	0x1F, 0x03, 0xE0, 0x7C, //    #####      #####      #####
	0x1F, 0x03, 0xE0, 0x7C, //    #####      #####      #####
	0x1F, 0x03, 0xE0, 0x7C, //    #####      #####      #####
	0x1F, 0x03, 0xE0, 0x7C, //    #####      #####      #####
	0x1F, 0x03, 0xE0, 0x7C, //    #####      #####      #####
	0x1F, 0x03, 0xE0, 0x7C, //    #####      #####      #####
	0x1F, 0x03, 0xE0, 0x7C, //    #####      #####      #####
	0x1F, 0x03, 0xE0, 0x7C, //    #####      #####      #####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @18408 'n' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0xFE, 0x00, //                 #######
	0x07, 0x83, 0xFF, 0x80, //      ####     ###########
	0x07, 0xCF, 0xFF, 0xC0, //      #####  ##############
	0x07, 0xDF, 0xFF, 0xC0, //      ##### ###############
	0x07, 0xFF, 0x0F, 0xE0, //      ###########    #######
	0x07, 0xFC, 0x03, 0xE0, //      #########        #####
	0x07, 0xF8, 0x03, 0xF0, //      ########         ######
	0x07, 0xF0, 0x01, 0xF0, //      #######           #####
	0x07, 0xE0, 0x01, 0xF0, //      ######            #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @18644 'o' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x07, 0xF8, 0x00, //              ########
	0x00, 0x3F, 0xFE, 0x00, //           #############
	0x00, 0x7F, 0xFF, 0x80, //          ################
	0x01, 0xFF, 0xFF, 0xC0, //        ###################
	0x03, 0xF8, 0x0F, 0xE0, //       #######       #######
	0x03, 0xF0, 0x07, 0xF0, //       ######         #######
	0x07, 0xE0, 0x03, 0xF0, //      ######           ######
	0x07, 0xC0, 0x01, 0xF8, //      #####             ######
	0x0F, 0x80, 0x00, 0xF8, //     #####               #####
	0x0F, 0x80, 0x00, 0xF8, //     #####               #####
	0x0F, 0x80, 0x00, 0xFC, //     #####               ######
	0x1F, 0x00, 0x00, 0x7C, //    #####                 #####
	0x1F, 0x00, 0x00, 0x7C, //    #####                 #####
	0x1F, 0x00, 0x00, 0x7C, //    #####                 #####
	0x1F, 0x00, 0x00, 0x7C, //    #####                 #####
	0x1F, 0x00, 0x00, 0x7C, //    #####                 #####
	0x1F, 0x00, 0x00, 0x7C, //    #####                 #####
	0x1F, 0x00, 0x00, 0x7C, //    #####                 #####
	0x1F, 0x00, 0x00, 0x7C, //    #####                 #####
	0x1F, 0x80, 0x00, 0xF8, //    ######               #####
	0x0F, 0x80, 0x00, 0xF8, //     #####               #####
	0x0F, 0x80, 0x00, 0xF8, //     #####               #####
	0x0F, 0xC0, 0x01, 0xF0, //     ######             #####
	0x07, 0xE0, 0x03, 0xF0, //      ######           ######
	0x07, 0xF0, 0x07, 0xE0, //      #######         ######
	0x03, 0xF8, 0x0F, 0xE0, //       #######       #######
	0x01, 0xFF, 0xFF, 0xC0, //        ###################
	0x00, 0xFF, 0xFF, 0x00, //         ################
	0x00, 0x3F, 0xFE, 0x00, //           #############
	0x00, 0x0F, 0xF0, 0x00, //             ########
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @18880 'p' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0xFC, 0x00, //                 ######
	0x07, 0x83, 0xFF, 0x00, //      ####     ##########
	0x07, 0xCF, 0xFF, 0x80, //      #####  #############
	0x07, 0xDF, 0xFF, 0xC0, //      ##### ###############
	0x07, 0xDF, 0x0F, 0xE0, //      ##### #####    #######
	0x07, 0xFC, 0x03, 0xE0, //      #########        #####
	0x07, 0xF8, 0x03, 0xF0, //      ########         ######
	0x07, 0xF0, 0x01, 0xF0, //      #######           #####
	0x07, 0xE0, 0x01, 0xF0, //      ######            #####
	0x07, 0xE0, 0x00, 0xF8, //      ######             #####
	0x07, 0xC0, 0x00, 0xF8, //      #####              #####
	0x07, 0xC0, 0x00, 0xF8, //      #####              #####
	0x07, 0xC0, 0x00, 0xF8, //      #####              #####
	0x07, 0xC0, 0x00, 0xF8, //      #####              #####
	0x07, 0xC0, 0x00, 0xF8, //      #####              #####
	0x07, 0xC0, 0x00, 0xF8, //      #####              #####
	0x07, 0xC0, 0x00, 0xF8, //      #####              #####
	0x07, 0xC0, 0x00, 0xF8, //      #####              #####
	0x07, 0xC0, 0x00, 0xF8, //      #####              #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x03, 0xF0, //      #####            ######
	0x07, 0xC0, 0x03, 0xE0, //      #####            #####
	0x07, 0xC0, 0x0F, 0xC0, //      #####          ######
	0x07, 0xF0, 0x1F, 0xC0, //      #######       #######
	0x07, 0xFF, 0xFF, 0x80, //      ####################
	0x07, 0xFF, 0xFF, 0x00, //      ###################
	0x07, 0xFF, 0xFC, 0x00, //      #################
	0x07, 0xCF, 0xE0, 0x00, //      #####  #######
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x00, 0x00, 0x00, 0x00, //
	// @19116 'q' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x07, 0xF8, 0x60, //              ########    ##
	0x00, 0x3F, 0xFF, 0xE0, //           #################
	0x00, 0xFF, 0xFF, 0xE0, //         ###################
	0x01, 0xFF, 0xFF, 0xE0, //        ####################
	0x03, 0xF8, 0x0F, 0xE0, //       #######       #######
	0x03, 0xF0, 0x03, 0xE0, //       ######          #####
	0x07, 0xC0, 0x03, 0xE0, //      #####            #####
	0x07, 0xC0, 0x03, 0xE0, //      #####            #####
	0x0F, 0x80, 0x03, 0xE0, //     #####             #####
	0x0F, 0x80, 0x03, 0xE0, //     #####             #####
	0x0F, 0x80, 0x03, 0xE0, //     #####             #####
	0x1F, 0x00, 0x03, 0xE0, //    #####              #####
	0x1F, 0x00, 0x03, 0xE0, //    #####              #####
	0x1F, 0x00, 0x03, 0xE0, //    #####              #####
	0x1F, 0x00, 0x03, 0xE0, //    #####              #####
	0x1F, 0x00, 0x03, 0xE0, //    #####              #####
	0x1F, 0x00, 0x03, 0xE0, //    #####              #####
	0x1F, 0x00, 0x03, 0xE0, //    #####              #####
	0x1F, 0x00, 0x03, 0xE0, //    #####              #####
	0x1F, 0x00, 0x03, 0xE0, //    #####              #####
	0x1F, 0x80, 0x07, 0xE0, //    ######            ######
	0x0F, 0x80, 0x0F, 0xE0, //     #####           #######
	0x0F, 0x80, 0x1F, 0xE0, //     #####          ########
	0x0F, 0xC0, 0x3F, 0xE0, //     ######        #########
	0x07, 0xC0, 0x7F, 0xE0, //      #####       ##########
	0x07, 0xF0, 0xFB, 0xE0, //      #######    ##### #####
	0x03, 0xFF, 0xF3, 0xE0, //       ##############  #####
	0x01, 0xFF, 0xE3, 0xE0, //        ############   #####
	0x00, 0xFF, 0xC3, 0xE0, //         ##########    #####
	0x00, 0x3F, 0x03, 0xE0, //           ######      #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x00, 0x00, //
	// @19352 'r' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x3F, 0x00, //                   ######
	0x03, 0xE0, 0xFF, 0x80, //       #####     #########
	0x03, 0xE3, 0xFF, 0xE0, //       #####   #############
	0x03, 0xE7, 0xFF, 0xE0, //       #####  ##############
	0x03, 0xEF, 0x83, 0xF0, //       ##### #####     ######
	0x03, 0xFF, 0x01, 0xF0, //       ##########       #####
	0x03, 0xFE, 0x01, 0xF8, //       #########        ######
	0x03, 0xFC, 0x00, 0xF8, //       ########          #####
	0x03, 0xF8, 0x00, 0xF8, //       #######           #####
	0x03, 0xF0, 0x00, 0xF8, //       ######            #####
	0x03, 0xF0, 0x00, 0xF8, //       ######            #####
	0x03, 0xE0, 0x00, 0xF8, //       #####             #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @19588 's' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x0F, 0xFE, 0x00, //             ###########
	0x00, 0x3F, 0xFF, 0x80, //           ###############
	0x00, 0xFF, 0xFF, 0x80, //         #################
	0x01, 0xFF, 0xFF, 0x80, //        ##################
	0x03, 0xF8, 0x03, 0x80, //       #######         ###
	0x03, 0xE0, 0x00, 0x00, //       #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xC0, 0x00, 0x00, //      #####
	0x07, 0xE0, 0x00, 0x00, //      ######
	0x03, 0xF8, 0x00, 0x00, //       #######
	0x03, 0xFF, 0x00, 0x00, //       ##########
	0x01, 0xFF, 0xE0, 0x00, //        ############
	0x00, 0x7F, 0xFC, 0x00, //          #############
	0x00, 0x3F, 0xFF, 0x00, //           ##############
	0x00, 0x07, 0xFF, 0x80, //              ############
	0x00, 0x00, 0xFF, 0xC0, //                 ##########
	0x00, 0x00, 0x1F, 0xC0, //                    #######
	0x00, 0x00, 0x07, 0xE0, //                      ######
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x03, 0xE0, //                       #####
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x07, 0x00, 0x1F, 0xC0, //      ###           #######
	0x07, 0xFF, 0xFF, 0x80, //      ####################
	0x07, 0xFF, 0xFF, 0x00, //      ###################
	0x07, 0xFF, 0xFC, 0x00, //      #################
	0x00, 0xFF, 0xE0, 0x00, //         ###########
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @19824 't' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x06, 0x00, 0x00, //              ##
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x3F, 0xFF, 0xFF, 0xF0, //   ##########################
	0x3F, 0xFF, 0xFF, 0xF0, //   ##########################
	0x3F, 0xFF, 0xFF, 0xF0, //   ##########################
	0x3F, 0xFF, 0xFF, 0xF0, //   ##########################
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x3F, 0x00, 0x00, //           ######
	0x00, 0x1F, 0x80, 0x00, //            ######
	0x00, 0x1F, 0xC0, 0x30, //            #######        ##
	0x00, 0x0F, 0xFF, 0xF0, //             ################
	0x00, 0x07, 0xFF, 0xF0, //              ###############
	0x00, 0x03, 0xFF, 0xF0, //               ##############
	0x00, 0x00, 0xFF, 0xC0, //                 ##########
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @20060 'u' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x03, 0xF0, //      #####            ######
	0x07, 0xC0, 0x07, 0xF0, //      #####           #######
	0x07, 0xE0, 0x0F, 0xF0, //      ######         ########
	0x03, 0xE0, 0x1F, 0xF0, //       #####        #########
	0x03, 0xF8, 0x7D, 0xF0, //       #######    ##### #####
	0x01, 0xFF, 0xFD, 0xF0, //        ############### #####
	0x01, 0xFF, 0xF1, 0xF0, //        #############   #####
	0x00, 0xFF, 0xE1, 0xF0, //         ###########    #####
	0x00, 0x3F, 0x80, 0x00, //           #######
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @20296 'v' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x1F, 0x00, 0x00, 0x7C, //    #####                 #####
	0x1F, 0x80, 0x00, 0x7C, //    ######                #####
	0x1F, 0x80, 0x00, 0xF8, //    ######               #####
	0x0F, 0x80, 0x00, 0xF8, //     #####               #####
	0x0F, 0xC0, 0x01, 0xF8, //     ######             ######
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xE0, 0x03, 0xE0, //      ######           #####
	0x03, 0xE0, 0x03, 0xE0, //       #####           #####
	0x03, 0xF0, 0x03, 0xE0, //       ######          #####
	0x01, 0xF0, 0x07, 0xC0, //        #####         #####
	0x01, 0xF0, 0x07, 0xC0, //        #####         #####
	0x01, 0xF8, 0x0F, 0x80, //        ######       #####
	0x00, 0xF8, 0x0F, 0x80, //         #####       #####
	0x00, 0xF8, 0x0F, 0x80, //         #####       #####
	0x00, 0x7C, 0x1F, 0x00, //          #####     #####
	0x00, 0x7C, 0x1F, 0x00, //          #####     #####
	0x00, 0x7C, 0x1E, 0x00, //          #####     ####
	0x00, 0x3E, 0x3E, 0x00, //           #####   #####
	0x00, 0x3E, 0x3E, 0x00, //           #####   #####
	0x00, 0x1E, 0x3C, 0x00, //            ####   ####
	0x00, 0x1F, 0x7C, 0x00, //            ##### #####
	0x00, 0x1F, 0x78, 0x00, //            ##### ####
	0x00, 0x0F, 0x78, 0x00, //             #### ####
	0x00, 0x0F, 0xF8, 0x00, //             #########
	0x00, 0x07, 0xF0, 0x00, //              #######
	0x00, 0x07, 0xF0, 0x00, //              #######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @20532 'w' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x78, 0x00, 0x00, 0x3C, //  ####                     ####
	0x7C, 0x00, 0x00, 0x7C, //  #####                   #####
	0x7C, 0x00, 0x00, 0x7C, //  #####                   #####
	0x7C, 0x00, 0x00, 0x7C, //  #####                   #####
	0x7C, 0x00, 0x00, 0x7C, //  #####                   #####
	0x7C, 0x00, 0x00, 0x7C, //  #####                   #####
	0x3C, 0x00, 0x00, 0x7C, //   ####                   #####
	0x3C, 0x03, 0xC0, 0x7C, //   ####        ####       #####
	0x3C, 0x07, 0xC0, 0x78, //   ####       #####       ####
	0x3E, 0x07, 0xC0, 0x78, //   #####      #####       ####
	0x3E, 0x07, 0xE0, 0x78, //   #####      ######      ####
	0x3E, 0x0F, 0xE0, 0x78, //   #####     #######      ####
	0x3E, 0x0F, 0xE0, 0x78, //   #####     #######      ####
	0x1E, 0x0E, 0xF0, 0xF8, //    ####     ### ####    #####
	0x1E, 0x1E, 0xF0, 0xF8, //    ####    #### ####    #####
	0x1E, 0x1E, 0xF8, 0xF0, //    ####    #### #####   ####
	0x1F, 0x1C, 0x78, 0xF0, //    #####   ###   ####   ####
	0x1F, 0x1C, 0x78, 0xF0, //    #####   ###   ####   ####
	0x1F, 0x3C, 0x7C, 0xF0, //    #####  ####   #####  ####
	0x0F, 0x38, 0x3C, 0xF0, //     ####  ###     ####  ####
	0x0F, 0x38, 0x3C, 0xF0, //     ####  ###     ####  ####
	0x0F, 0x78, 0x3E, 0xF0, //     #### ####     ##### ####
	0x0F, 0x70, 0x1E, 0xF0, //     #### ###       #### ####
	0x0F, 0xF0, 0x1F, 0xE0, //     ########       ########
	0x0F, 0xF0, 0x0F, 0xE0, //     ########        #######
	0x07, 0xF0, 0x0F, 0xE0, //      #######        #######
	0x07, 0xE0, 0x0F, 0xE0, //      ######         #######
	0x07, 0xE0, 0x07, 0xE0, //      ######          ######
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @20768 'x' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x1F, 0xC0, 0x00, 0xFC, //    #######              ######
	0x0F, 0xC0, 0x01, 0xF8, //     ######             ######
	0x07, 0xE0, 0x03, 0xF0, //      ######           ######
	0x03, 0xF0, 0x07, 0xE0, //       ######         ######
	0x03, 0xF0, 0x07, 0xE0, //       ######         ######
	0x01, 0xF8, 0x0F, 0xC0, //        ######       ######
	0x00, 0xF8, 0x1F, 0x80, //         #####      ######
	0x00, 0xFC, 0x3F, 0x00, //         ######    ######
	0x00, 0x7E, 0x7E, 0x00, //          ######  ######
	0x00, 0x3E, 0x7E, 0x00, //           #####  ######
	0x00, 0x1F, 0xFC, 0x00, //            ###########
	0x00, 0x1F, 0xF8, 0x00, //            ##########
	0x00, 0x0F, 0xF0, 0x00, //             ########
	0x00, 0x07, 0xF0, 0x00, //              #######
	0x00, 0x07, 0xF0, 0x00, //              #######
	0x00, 0x0F, 0xF0, 0x00, //             ########
	0x00, 0x1F, 0xF8, 0x00, //            ##########
	0x00, 0x3F, 0xFC, 0x00, //           ############
	0x00, 0x7E, 0x7E, 0x00, //          ######  ######
	0x00, 0x7E, 0x3E, 0x00, //          ######   #####
	0x00, 0xFC, 0x3F, 0x00, //         ######    ######
	0x01, 0xF8, 0x1F, 0x80, //        ######      ######
	0x03, 0xF0, 0x0F, 0xC0, //       ######        ######
	0x03, 0xF0, 0x0F, 0xE0, //       ######        #######
	0x07, 0xE0, 0x07, 0xE0, //      ######          ######
	0x0F, 0xC0, 0x03, 0xF0, //     ######            ######
	0x1F, 0x80, 0x03, 0xF8, //    ######             #######
	0x3F, 0x80, 0x01, 0xFC, //   #######              #######
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @21004 'y' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x1F, 0x00, 0x00, 0x7C, //    #####                 #####
	0x1F, 0x80, 0x00, 0x7C, //    ######                #####
	0x1F, 0x80, 0x00, 0xFC, //    ######               ######
	0x0F, 0x80, 0x00, 0xF8, //     #####               #####
	0x0F, 0xC0, 0x01, 0xF8, //     ######             ######
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xC0, 0x01, 0xF0, //      #####             #####
	0x07, 0xE0, 0x03, 0xF0, //      ######           ######
	0x03, 0xE0, 0x03, 0xE0, //       #####           #####
	0x03, 0xF0, 0x03, 0xE0, //       ######          #####
	0x01, 0xF0, 0x07, 0xC0, //        #####         #####
	0x01, 0xF0, 0x07, 0xC0, //        #####         #####
	0x01, 0xF8, 0x0F, 0xC0, //        ######       ######
	0x00, 0xF8, 0x0F, 0x80, //         #####       #####
	0x00, 0xF8, 0x0F, 0x80, //         #####       #####
	0x00, 0x7C, 0x1F, 0x00, //          #####     #####
	0x00, 0x7C, 0x1F, 0x00, //          #####     #####
	0x00, 0x7E, 0x1F, 0x00, //          ######    #####
	0x00, 0x3E, 0x3E, 0x00, //           #####   #####
	0x00, 0x3E, 0x3E, 0x00, //           #####   #####
	0x00, 0x1F, 0x7C, 0x00, //            ##### #####
	0x00, 0x1F, 0x7C, 0x00, //            ##### #####
	0x00, 0x1F, 0x7C, 0x00, //            ##### #####
	0x00, 0x0F, 0xF8, 0x00, //             #########
	0x00, 0x0F, 0xF8, 0x00, //             #########
	0x00, 0x07, 0xF0, 0x00, //              #######
	0x00, 0x07, 0xF0, 0x00, //              #######
	0x00, 0x07, 0xF0, 0x00, //              #######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x0F, 0xC0, 0x00, //             ######
	0x00, 0x0F, 0x80, 0x00, //             #####
	0x00, 0x1F, 0x80, 0x00, //            ######
	0x00, 0x3F, 0x00, 0x00, //           ######
	0x00, 0x7F, 0x00, 0x00, //          #######
	0x00, 0xFE, 0x00, 0x00, //         #######
	0x3F, 0xFC, 0x00, 0x00, //   ############
	0x3F, 0xF8, 0x00, 0x00, //   ###########
	0x3F, 0xE0, 0x00, 0x00, //   #########
	0x3F, 0x80, 0x00, 0x00, //   #######
	// @21240 'z' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x07, 0xFF, 0xFF, 0xE0, //      ######################
	0x07, 0xFF, 0xFF, 0xE0, //      ######################
	0x07, 0xFF, 0xFF, 0xE0, //      ######################
	0x07, 0xFF, 0xFF, 0xE0, //      ######################
	0x00, 0x00, 0x07, 0xC0, //                      #####
	0x00, 0x00, 0x0F, 0x80, //                     #####
	0x00, 0x00, 0x1F, 0x80, //                    ######
	0x00, 0x00, 0x3F, 0x00, //                   ######
	0x00, 0x00, 0x3E, 0x00, //                   #####
	0x00, 0x00, 0x7C, 0x00, //                  #####
	0x00, 0x00, 0xF8, 0x00, //                 #####
	0x00, 0x01, 0xF8, 0x00, //                ######
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x0F, 0xC0, 0x00, //             ######
	0x00, 0x0F, 0x80, 0x00, //             #####
	0x00, 0x1F, 0x00, 0x00, //            #####
	0x00, 0x3E, 0x00, 0x00, //           #####
	0x00, 0x7E, 0x00, 0x00, //          ######
	0x00, 0x7C, 0x00, 0x00, //          #####
	0x00, 0xF8, 0x00, 0x00, //         #####
	0x01, 0xF0, 0x00, 0x00, //        #####
	0x03, 0xF0, 0x00, 0x00, //       ######
	0x07, 0xFF, 0xFF, 0xF0, //      #######################
	0x07, 0xFF, 0xFF, 0xF0, //      #######################
	0x07, 0xFF, 0xFF, 0xF0, //      #######################
	0x07, 0xFF, 0xFF, 0xF0, //      #######################
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	// @21476 '{' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x0F, 0xC0, //                     ######
	0x00, 0x00, 0x7F, 0xC0, //                  #########
	0x00, 0x00, 0xFF, 0xC0, //                 ##########
	0x00, 0x01, 0xFF, 0xC0, //                ###########
	0x00, 0x03, 0xF8, 0x00, //               #######
	0x00, 0x03, 0xF0, 0x00, //               ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x0F, 0xC0, 0x00, //             ######
	0x00, 0x0F, 0x80, 0x00, //             #####
	0x00, 0x3F, 0x80, 0x00, //           #######
	0x07, 0xFF, 0x00, 0x00, //      ###########
	0x07, 0xFC, 0x00, 0x00, //      #########
	0x07, 0xFC, 0x00, 0x00, //      #########
	0x07, 0xFF, 0x00, 0x00, //      ###########
	0x00, 0x3F, 0x80, 0x00, //           #######
	0x00, 0x0F, 0x80, 0x00, //             #####
	0x00, 0x0F, 0xC0, 0x00, //             ######
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xC0, 0x00, //              #####
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x03, 0xF0, 0x00, //               ######
	0x00, 0x03, 0xF8, 0x00, //               #######
	0x00, 0x01, 0xFF, 0xC0, //                ###########
	0x00, 0x00, 0xFF, 0xC0, //                 ##########
	0x00, 0x00, 0x7F, 0xC0, //                  #########
	0x00, 0x00, 0x0F, 0xC0, //                     ######
	0x00, 0x00, 0x00, 0x00, //
	// @21712 '|' (32 pixels wide)
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x00, 0x00, 0x00, //
	// @21948 '}' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x03, 0xF0, 0x00, 0x00, //       ######
	0x03, 0xFE, 0x00, 0x00, //       #########
	0x03, 0xFF, 0x00, 0x00, //       ##########
	0x03, 0xFF, 0x80, 0x00, //       ###########
	0x00, 0x1F, 0xC0, 0x00, //            #######
	0x00, 0x0F, 0xC0, 0x00, //             ######
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xF0, 0x00, //               ######
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x01, 0xFC, 0x00, //                #######
	0x00, 0x00, 0xFF, 0xE0, //                 ###########
	0x00, 0x00, 0x3F, 0xE0, //                   #########
	0x00, 0x00, 0x3F, 0xE0, //                   #########
	0x00, 0x00, 0xFF, 0xE0, //                 ###########
	0x00, 0x01, 0xFC, 0x00, //                #######
	0x00, 0x01, 0xF0, 0x00, //                #####
	0x00, 0x03, 0xF0, 0x00, //               ######
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x03, 0xE0, 0x00, //               #####
	0x00, 0x07, 0xE0, 0x00, //              ######
	0x00, 0x0F, 0xC0, 0x00, //             ######
	0x00, 0x1F, 0xC0, 0x00, //            #######
	0x03, 0xFF, 0x80, 0x00, //       ###########
	0x03, 0xFF, 0x00, 0x00, //       ##########
	0x03, 0xFE, 0x00, 0x00, //       #########
	0x03, 0xF0, 0x00, 0x00, //       ######
	0x00, 0x00, 0x00, 0x00, //
	// @22184 '~' (32 pixels wide)
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x01, 0xF8, 0x00, 0x00, //        ######
	0x07, 0xFE, 0x00, 0x00, //      ##########
	0x0F, 0xFF, 0x00, 0x3E, //     ############          #####
	0x0F, 0xFF, 0x80, 0x3E, //     #############         #####
	0x1F, 0x8F, 0xC0, 0x3E, //    ######   ######        #####
	0x1F, 0x07, 0xE0, 0x3E, //    #####     ######       #####
	0x3E, 0x03, 0xF0, 0x7C, //   #####       ######     #####
	0x3E, 0x01, 0xF8, 0xFC, //   #####        ######   ######
	0x3E, 0x00, 0xFF, 0xF8, //   #####         #############
	0x3E, 0x00, 0x7F, 0xF8, //   #####          ############
	0x00, 0x00, 0x3F, 0xF0, //                   ##########
	0x00, 0x00, 0x0F, 0xC0, //                     ######
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
};


software/module1/gps_points.c
---
/*
 * GPS Data Logger
 * This contains functions necessary to send commands to the GPS to
 * start logging, stop logging, log an instantaneous moment, and more
 * importantly, extract the data from the log to get latitude and
 * longitude coordinates.
 *
 * Author: Timothy Choy
 * Last updated: Feb 23, 2016
 *
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "gps_points.h"
#include "graphics.h"
#include "conversion.h"
#include "datasets.h"

/*
 * The GPS must be initialized before the user can read or write.
 * Call this function at the beginning before use.
 */
void init_gps(void)
{
	//set up 6850 control register to utilize a divide by 16 clock,
	//set RTS low, use 8 bits of data, no parity, 1 stop bit
	//transmitter interrupt disabled
	//program baud rate generator to use 9.6k baud
	GPS_CONTROL = 0x15;
	GPS_BAUD = 0x5;
}

/*
 * putchar_gps writes 1 byte of data from the serial port.
 */
char putchar_gps(char c)
{
	//poll Tx bit in 6850 status register. Wait for it to become '1'
	//write 'c' to the 6850 TxData register to output the character
	while(1)
	{
		if (GPS_STATUS & GPS_STATUS_TX_MASK)
		{
			GPS_TXDATA = c;
			return c;
		}
	}

	return c;
}

/*
 * getchar_gps reads 1 byte of data from the serial port.
 */
char getchar_gps(void){
	//poll Rx bit in 6850 status register. Wait for it to become '1'
	//read received character from 6850 register

	while(1)
	{
		if (GPS_STATUS & GPS_STATUS_RX_MASK)
		{
			return GPS_RXDATA;
		}
	}
	return '\0';
}

/*
 * Swaps endian after extracting latitude and longitude from GPS log.
 */
int swapEndian(char *s){
	register int val;

	val = strtoul(s, NULL, 16);
	val = ((val << 8) & 0xFF00FF00) | ((val >> 8) & 0xFF00FF );
	val = (val << 16) | ((val >> 16) & 0xFFFF);

	return val;
}

/*
 * converts latitude from the swapped endian int to float.
 */
float FloatToLatitudeConversion(int x){

	float *ptr = (float *)(&x); // cast int to float
	float f = *ptr; // get the float

	return f;
}

/*
 * converts longitude from the swapped endian int to float.
 */
float FloatToLongitudeConversion(int x){

	float *ptr = (float *)(&x);
	float f = *ptr;

	return f;
}

/*
 * reads exactly one string from $ to end line from the log.
 */
void read_string(char *output){

//	printf("Reading string\n");
	memset(output, 0, 256);

	int i = 0;
	char c;
	int done = 0;

	while(done == 0){
		c = getchar_gps();

		if(c == '$'){
			while (c != '\n'){
				output[i] = c;
				c = getchar_gps();
				i++;
			}
			output[i] = '\0';
			//printf("%s\n", output);
			done = 1;
		}
	}
	return;
}

/*
 * Saves points as type float to an array gps_points to be converted
 * to screen points.
 */
void save_points(void){

	printf("starting dump\n");
	int i, lat_count, lat_end, long_count, long_end, save_count;
	int j = 200;
	int k = 0;
	int n = 23;
	int s = 0;
	int x = XRES/4;
	int y = 5*YRES/6;
	int r = 10;
	int count, log_count = 0;
	int place = 0;
	const char command[] = "$PMTK622,1*29\r\n";
	int length = strlen(command);
	char cur_string[256] = {0};

	// here we send the command to the gps
	for(i = 0; i < length; i++){
		putchar_gps(command[i]);
	}

	while(gps_log[0].string[7] != 'X'){
		read_string(gps_log[0].string);
	}

	read_string(gps_log[0].string); // to dump the first unused log

	while(gps_log[0].string[11] == '0'){
		read_string(gps_log[0].string);
	}

	for(log_count = 1; log_count < 20; log_count++){
		read_string(gps_log[log_count].string);

		// draws circles while extracting logs from GPS (for UI)
		j = (n + j + 1) % 500;
		n = (n + k*j) % 350;
		k = (k + j + n + r) % 50;
		x += (XRES-(XRES/2))/20;
		WriteCircle(x, y, r, LIME);
	}

	// for first 9 logs, lat_count, long_count, lat_end, and long_end
	// are all 1 character shorter than 10 logs
	for(log_count = 0; log_count < 9; log_count++){

		strcpy(cur_string, (const char *)gps_log[log_count].string);

		lat_count = 24;
		long_count = 33;
		lat_end = 32;
		long_end = 41;

		for(count = 0; count < 6; count++){
			save_count = 0;
			while(lat_count <= lat_end){
				if(cur_string[lat_count] != ','){
					gps_points[place].latitude[save_count] = cur_string[lat_count];
					lat_count++;
					save_count++;
				}
				else
					lat_count++;
			}
			save_count = 0;
			while(long_count <= long_end){
				if(cur_string[long_count] != ','){
					gps_points[place].longitude[save_count] = cur_string[long_count];
					long_count++;
					save_count++;
				}
				else
					long_count++;
			}
			gps_points[place].long_swapped = swapEndian(gps_points[place].longitude);
			gps_points[place].lat_swapped = swapEndian(gps_points[place].latitude);

			gps_points[place].long_float = FloatToLongitudeConversion(gps_points[place].long_swapped);
			gps_points[place].lat_float = FloatToLatitudeConversion(gps_points[place].lat_swapped);

			place++;
			lat_count += 27;
			long_count += 27;
			lat_end += 36;
			long_end += 36;
		}
	}

	// this loop accounts for the next 10 logs off-by-one error
	for(log_count = 9; log_count < 12; log_count++){
		if(place == 70)
			break;

		strcpy(cur_string, (const char *)gps_log[log_count].string);

		lat_count = 25;
		long_count = 34;
		lat_end = 33;
		long_end = 42;

		for(count = 0; count < 6; count++){
			save_count = 0;
			while(lat_count <= lat_end){
				if(cur_string[lat_count] != ','){
					gps_points[place].latitude[save_count] = cur_string[lat_count];
					lat_count++;
					save_count++;
				}
				else
					lat_count++;
			}
			save_count = 0;
			while(long_count <= long_end){
				if(cur_string[long_count] != ','){
					gps_points[place].longitude[save_count] = cur_string[long_count];
					long_count++;
					save_count++;
				}
				else
					long_count++;
			}
			gps_points[place].long_swapped = swapEndian(gps_points[place].longitude);
			gps_points[place].lat_swapped = swapEndian(gps_points[place].latitude);

			gps_points[place].long_float = FloatToLongitudeConversion(gps_points[place].long_swapped);
			gps_points[place].lat_float = FloatToLatitudeConversion(gps_points[place].lat_swapped);

			place++;
			lat_count += 27;
			long_count += 27;
			lat_end += 36;
			long_end += 36;
		}
	}

	return;

}

/*
 * log_now will log a point at that instant. Ensure you sleep 3 seconds before
 * calling log_now another time.
 */
void log_now(void){
	int i;
	const char command[] = "$PMTK186,1*20\r\n";
	int length = strlen(command);
	char string[256] = {0};

	printf("Logging...\n");
	// here we send the command to the gps
	for(i = 0; i < length; i++){
		putchar_gps(command[i]);
	}
}

/*
 * starts logging.
 */
void start_log(void){
	int i;
	const char command[] = "$PMTK185,0*22\r\n";
	int length = strlen(command);

	printf("Starting log...\n");
	// here we send the command to the gps
	for(i = 0; i < length; i++){
		putchar_gps(command[i]);
	}
}

/*
 * stops logging.
 */
void stop_log(void){
	int i;
	const char command[] = "$PMTK185,1*23\r\n";
	int length = strlen(command);

	printf("Stopping log...\n");
	// here we send the command to the gps
	for(i = 0; i < length; i++){
		putchar_gps(command[i]);
	}
}

/*
 * erases the log.
 */
void erase_log(void){
	int i;
	const char command[] = "$PMTK184,1*22\r\n";
	int length = strlen(command);

	printf("Erasing log...\n");
	// here we send the command to the gps
	for(i = 0; i < length; i++){
		putchar_gps(command[i]);
	}
}

/*
 * Queries the log for info on mode and interval of time logging and more.
 */
void query_log(void){
	int i;
	const char command[] = "$PMTK183*38\r\n";
	char out[100];
	int length = strlen(command);

	printf("Query...\n");
	// here we send the command to the gps
	for(i = 0; i < length; i++){
		putchar_gps(command[i]);
	}

	read_string(out);
	while(out[0] != 'P' && out[15] != 'A'){
		read_string(out);
	}
	printf("%s", out);
}

void save_demo_points(int set) {
	int size = 100;
	int i = 0;
	int xval = 4;
	int yval = 4;

	localData.dataSets[set].size = size;

	if( set == 0 ){
		for( i = 0; i < 39; i++ ){
			localData.dataSets[set].points[i].x = xval;
			localData.dataSets[set].points[i].y = yval;

			xval += 10;
			yval += 10;
		}

		for( i = 39; i < 48; i++ ){
			xval += 35;

			localData.dataSets[set].points[i].x = xval;
			localData.dataSets[set].points[i].y = yval;
		}

		for( i = 48; i < 60; i++ ){
			localData.dataSets[set].points[i].x = xval;
			localData.dataSets[set].points[i].y = yval;
		}

		for( i = 60; i < 70; i++ ){
			xval -= 20;
			yval -= 20;

			localData.dataSets[set].points[i].x = xval;
			localData.dataSets[set].points[i].y = yval;
		}

		for( i = 70; i < 79; i++ ){
			yval -= 20;

			localData.dataSets[set].points[i].x = xval;
			localData.dataSets[set].points[i].y = yval;
		}

		for( i = 79; i < 100; i++ ){
			localData.dataSets[set].points[i].x = xval;
			localData.dataSets[set].points[i].y = yval;
		}
	}
	else if( set == 1 ){
		for( i = 0; i < 30; i++){
			localData.dataSets[set].points[i].x = 4;
			localData.dataSets[set].points[i].y = 4;
		}

		for( i = 30; i < 45; i++){
			localData.dataSets[set].points[i].x = 4;
			localData.dataSets[set].points[i].y = 75;
		}

		for( i = 45; i < 60; i++){
			localData.dataSets[set].points[i].x = 81;
			localData.dataSets[set].points[i].y = 4;
		}

		for( i = 60; i < 70; i++){
			localData.dataSets[set].points[i].x = 81;
			localData.dataSets[set].points[i].y = 75;
		}

		for( i = 70; i < 77; i++){
			localData.dataSets[set].points[i].x = 162;
			localData.dataSets[set].points[i].y = 4;
		}

		for( i = 77; i < 85; i++){
			localData.dataSets[set].points[i].x = 4;
			localData.dataSets[set].points[i].y = 150;
		}

		for( i = 85; i < 90; i++){
			localData.dataSets[set].points[i].x = 243;
			localData.dataSets[set].points[i].y = 4;
		}

		for( i = 90; i < 93; i++){
			localData.dataSets[set].points[i].x = 162;
			localData.dataSets[set].points[i].y = 75;
		}

		for( i = 93; i < 95; i++){
			localData.dataSets[set].points[i].x = 81;
			localData.dataSets[set].points[i].y = 150;
		}

		for( i = 95; i < 97; i++){
			localData.dataSets[set].points[i].x = 4;
			localData.dataSets[set].points[i].y = 225;
		}

		for( i = 97; i < 100; i++){
			localData.dataSets[set].points[i].x = 4;
			localData.dataSets[set].points[i].y = 300;
		}
	}
	else if( set == 2 ){
		for( i = 0; i < 100; i++){
			localData.dataSets[set].points[i].x = xval;
			localData.dataSets[set].points[i].y = yval;

			xval += 7;
		}
	}
	else if( set == 3 ){
		for( i = 0; i < 100; i++){
			localData.dataSets[set].points[i].x = xval;
			localData.dataSets[set].points[i].y = yval;

			xval += 7;
			yval += 4;
		}
	}
	else if( set == 4 ){
		for( i = 0; i < 50; i++){
			localData.dataSets[set].points[i].x = xval;
			localData.dataSets[set].points[i].y = yval;

			xval += 7;
			yval += 8;
		}
		for( i = 50; i < 100; i++){
			localData.dataSets[set].points[i].x = xval;
			localData.dataSets[set].points[i].y = yval;

			xval += 7;
			yval -= 8;
		}
	}
	else if( set == 5 ){
		for( i = 0; i < 33; i++){
			localData.dataSets[set].points[i].x = 150;
			localData.dataSets[set].points[i].y = 150;
		}

		for( i = 33; i < 66; i++){
			localData.dataSets[set].points[i].x = 450;
			localData.dataSets[set].points[i].y = 250;
		}

		for( i = 66; i < 100; i++){
			localData.dataSets[set].points[i].x = 700;
			localData.dataSets[set].points[i].y = 420;
		}
	}
	else if( set == 6 ){
		for( i = 0; i < 33; i++){
			localData.dataSets[set].points[i].x = 1;
			localData.dataSets[set].points[i].y = 1;
		}

		for( i = 33; i < 66; i++){
			localData.dataSets[set].points[i].x = 80;
			localData.dataSets[set].points[i].y = 80;
		}

		for( i = 66; i < 100; i++){
			localData.dataSets[set].points[i].x = 160;
			localData.dataSets[set].points[i].y = 160;
		}
	}
	else if( set == 7 ){
		for( i = 0; i < 33; i++){
			localData.dataSets[set].points[i].x = 700;
			localData.dataSets[set].points[i].y = 150;
		}

		for( i = 33; i < 66; i++){
			localData.dataSets[set].points[i].x = 600;
			localData.dataSets[set].points[i].y = 150;
		}

		for( i = 66; i < 100; i++){
			localData.dataSets[set].points[i].x = 500;
			localData.dataSets[set].points[i].y = 150;
		}
	}
	else if( set == 8 ){
		for( i = 0; i < 33; i++){
			localData.dataSets[set].points[i].x = 700;
			localData.dataSets[set].points[i].y = 420;
		}

		for( i = 33; i < 66; i++){
			localData.dataSets[set].points[i].x = 420;
			localData.dataSets[set].points[i].y = 220;
		}

		for( i = 66; i < 100; i++){
			localData.dataSets[set].points[i].x = 1;
			localData.dataSets[set].points[i].y = 5;
		}
	}
	else if( set == 9 ){
		localData.dataSets[set].size = 500;

		for( i = 0; i < 50; i++){
			localData.dataSets[set].points[i].x = xval;
			localData.dataSets[set].points[i].y = yval;

			xval += 7;
			yval += 8;
		}

		for( i = 50; i < 100; i++){
			localData.dataSets[set].points[i].x = xval;
			localData.dataSets[set].points[i].y = yval;

			xval += 7;
			yval -= 5;
		}

		for( i = 100; i < 130; i++){
			localData.dataSets[set].points[i].x = xval;
			localData.dataSets[set].points[i].y = yval;

			xval -= 2;
			yval += 3;
		}

		for( i = 130; i < 160; i++){
			localData.dataSets[set].points[i].x = xval;
			localData.dataSets[set].points[i].y = yval;

			xval -= 5;
			yval -= 5;
		}

		for( i = 160; i < 200; i++){
			localData.dataSets[set].points[i].x = xval;
			localData.dataSets[set].points[i].y = yval;

			xval += 4;
			yval += 5;
		}

		for( i = 200; i < 210; i++){
			localData.dataSets[set].points[i].x = xval;
			localData.dataSets[set].points[i].y = yval;

			xval -= 10;
		}

		for( i = 210; i < 220; i++){
			localData.dataSets[set].points[i].x = xval;
			localData.dataSets[set].points[i].y = yval;

			yval -= 10;
		}

		for( i = 220; i < 230; i++){
			localData.dataSets[set].points[i].x = xval;
			localData.dataSets[set].points[i].y = yval;

			xval += 10;
		}

		for( i = 230; i < 240; i++){
			localData.dataSets[set].points[i].x = xval;
			localData.dataSets[set].points[i].y = yval;

			yval += 10;
		}

		for( i = 240; i < 400; i++){
			localData.dataSets[set].points[i].x = xval;
			localData.dataSets[set].points[i].y = yval;

			xval -= 2;
			yval -= 1;
		}

		for( i = 400; i < 420; i++){
			localData.dataSets[set].points[i].x = xval;
			localData.dataSets[set].points[i].y = yval;

			xval -= 3;
			yval += 4;
		}

		for( i = 420; i < 500; i++){
			localData.dataSets[set].points[i].x = xval;
			localData.dataSets[set].points[i].y = yval;
		}
	}

}

software/module1/graphics.c
---
/*
 * graphics.c
 * Functions for the Graphics Controller
 */

#include <stdio.h>
#include "graphics.h"
#include "OutGraphicsCharFont2.h"

/*******************************************************************************************
 * Return TRUE if (x,y) is between (0,0) and (XRES-1,YRES-1)
 * and print an error message and return FALSE otherwise
 ******************************************************************************************/
int check_if_point_is_on_screen(int x, int y) {
	if (x < 0) {
		printf("ERROR: Point not on screen: x value less than 0\n");
		return FALSE;
	} else if (x > XRES-1) {
		printf("ERROR: Point not on screen: x value greater than XRES-1\n");
		return FALSE;
	} else if (y < 0) {
		printf("ERROR: Point not on screen: y value less than 0\n");
		return FALSE;
	} else if (y > YRES-1) {
		printf("ERROR: Point not on screen: y value greater than YRES-1\n");
		return FALSE;
	} else {
		return TRUE;
	}
}

/**********************************************************************************
* Write the entire screen in the given colour
************************************************************************************/
void clear_screen(int colour) {
	WriteFilledRectangle(0, 0, XRES-1, YRES-1, colour);
}

/*******************************************************************************************
* Writes a single pixel to the x,y coords specified using the specified colour
* Note colour is a byte and represents a palette number (0-255) not a 24 bit RGB value
********************************************************************************************/
void WriteAPixel(int x, int y, int Colour)
{
	if (ASSERT_POINTS_ARE_VALID && !check_if_point_is_on_screen(x, y)) {
		printf("WriteAPixel failed for (%d,%d)\n", x, y);
		return;
	}

	WAIT_FOR_GRAPHICS;				// is graphics ready for new command

	GraphicsX1Reg = x;				// write coords to x1, y1
	GraphicsY1Reg = y;
	GraphicsColourReg = Colour;		// set pixel colour
	GraphicsCommandReg = PutAPixel;	// give graphics "write pixel" command
}

/*********************************************************************************************
* Read a single pixel from the x,y coords specified and returns its colour
* Note returned colour is a byte and represents a palette number (0-255) not a 24 bit RGB value
*********************************************************************************************/

int ReadAPixel(int x, int y)
{
	if (ASSERT_POINTS_ARE_VALID && !check_if_point_is_on_screen(x, y)) {
		printf("ReadAPixel failed for (%d,%d)\n", x, y);
		return -1;
	}

	WAIT_FOR_GRAPHICS;					// is graphics ready for new command

	GraphicsX1Reg = x;					// write coords to x1, y1
	GraphicsY1Reg = y;
	GraphicsCommandReg = GetAPixel;		// give graphics a "get pixel" command

	WAIT_FOR_GRAPHICS;					// is graphics done reading pixel
	return (int)(GraphicsColourReg) ;	// return the palette number (colour)
}

/*******************************************************************************************
* Write a horizontal line (hardware-accelerated) starting at the x,y coords specified
* of the given length to the right
* Will print an error and return without writing anything if the start/end points are off
* of the screen or if length is negative
********************************************************************************************/
void WriteHLine(int x1, int y1, int length, int Colour)
{
	int x2 = x1 + length;

	if (ASSERT_POINTS_ARE_VALID && length < 0) {
		printf("ERROR: WriteHLine failed because length < 0 (length is %d)\n", length);
		return;
	}

	if (ASSERT_POINTS_ARE_VALID && !check_if_point_is_on_screen(x1, y1)) {
		printf("ERROR: WriteHLine failed for starting point (%d,%d)\n", x1, y1);
		return;
	}

	if (ASSERT_POINTS_ARE_VALID && !check_if_point_is_on_screen(x2, y1)) {
		printf("ERROR: WriteHLine failed for ending point (%d,%d)\n", x2, y1);
		return;
	}

	WAIT_FOR_GRAPHICS;

	GraphicsX1Reg = x1;
	GraphicsY1Reg = y1;
	GraphicsX2Reg = x2;
	GraphicsColourReg = Colour;
	GraphicsCommandReg = DrawHLine;
}

/*******************************************************************************************
* Write a vertical line (hardware-accelerated) starting at the x,y coords specified
* of the given length downwards.
* Will print an error and return without writing anything if the start/end points are off
* of the screen or if length is negative
********************************************************************************************/
void WriteVLine(int x1, int y1, int length, int Colour)
{
	int y2 = y1 + length;

	if (ASSERT_POINTS_ARE_VALID && length < 0) {
		printf("ERROR: WriteVLine failed because length < 0 (length is %d)\n", length);
		return;
	}

	if (ASSERT_POINTS_ARE_VALID && !check_if_point_is_on_screen(x1, y1)) {
		printf("ERROR: WriteVLine failed for starting point (%d,%d)\n", x1, y1);
		return;
	}

	if (ASSERT_POINTS_ARE_VALID && !check_if_point_is_on_screen(x1, y2)) {
		printf("ERROR: WriteVLine failed for ending point (%d,%d)\n", x1, y2);
		return;
	}

	WAIT_FOR_GRAPHICS;

	GraphicsX1Reg = x1;
	GraphicsY1Reg = y1;
	GraphicsY2Reg = y2;
	GraphicsColourReg = Colour;
	GraphicsCommandReg = DrawVLine;
}

/*******************************************************************************************
* Write a Bresenham line (hardware-accelerated) from x1,y1 to x2,y2
* Will print an error and return without writing anything if the start/end points are off
* of the screen
********************************************************************************************/
void WriteLine(int x1, int y1, int x2, int y2, int Colour)
{
	if (ASSERT_POINTS_ARE_VALID && !check_if_point_is_on_screen(x1, y1)) {
		printf("ERROR: WriteLine failed for starting point (%d,%d)\n", x1, y1);
		return;
	}

	if (ASSERT_POINTS_ARE_VALID && !check_if_point_is_on_screen(x2, y2)) {
		printf("ERROR: WriteLine failed for ending point (%d,%d)\n", x2, y2);
		return;
	}

	WAIT_FOR_GRAPHICS;

	GraphicsX1Reg = x1;
	GraphicsY1Reg = y1;
	GraphicsX2Reg = x2;
	GraphicsY2Reg = y2;
	GraphicsColourReg = Colour;
	GraphicsCommandReg = DrawLine;
}

/**********************************************************************************
* subroutine to program a hardware (graphics chip) palette number with an RGB value
* e.g. ProgramPalette(RED, 0x00FF0000) ;
************************************************************************************/

void ProgramPalette(int PaletteNumber, int RGB)
{
    WAIT_FOR_GRAPHICS;

    GraphicsColourReg = PaletteNumber;
    GraphicsX1Reg = RGB >> 16   ;        // program red value in ls.8 bit of X1 reg
    GraphicsY1Reg = RGB ;                // program green and blue into ls 16 bit of Y1 reg
    GraphicsCommandReg = ProgramPaletteColour; // issue command
}

/* Shape drawing functions */
/*
 * Draw a non-filled rectangle at a top-left point at (x1, y1) to a
 * bottom-right point at (x2, y2).
 * Preconditions: x1 <= x2 and y1 <= y2
 */
void Rectangle(int x1, int y1, int x2, int y2, int color)
{
	if (ASSERT_POINTS_ARE_VALID && x1 > x2) {
		printf("ERROR: DrawRectangle failed because x1 > x2 (x1 is %d, x2 is %d)\n", x1, x2);
		return;
	}

	if (ASSERT_POINTS_ARE_VALID && y1 > y2) {
		printf("ERROR: DrawRectangle failed because y1 > y2 (y1 is %d, y2 is %d)\n", y1, y2);
		return;
	}

	if (ASSERT_POINTS_ARE_VALID && !check_if_point_is_on_screen(x1, y1)) {
		printf("ERROR: DrawRectangle failed for top-left corner (%d,%d)\n", x1, y1);
		return;
	}

	if (ASSERT_POINTS_ARE_VALID && !check_if_point_is_on_screen(x2, y2)) {
		printf("ERROR: DrawRectangle failed for bottom-right corner (%d,%d)\n", x2, y2);
		return;
	}

	WriteHLine(x1, y1, x2-x1, color);
	WriteVLine(x1, y1, y2-y1, color);
	WriteHLine(x1, y2, x2-x1+1, color); // the plus one ensures the bottom-right corner is drawn
	WriteVLine(x2, y1, y2-y1, color);
}

/*******************************************************************************************
* Write a filled rectangle (hardware-accelerated) to the screen
* If x1 > x2 or y1 < y2 or if any corner does not fit on the screen, an error message
* will be printed and the function will return without drawing anything
********************************************************************************************/
void WriteFilledRectangle(int x1, int y1, int x2, int y2, int Colour)
{
	if (ASSERT_POINTS_ARE_VALID && x1 > x2) {
		printf("ERROR: WriteFilledRectangle failed because x1 > x2 (x1 is %d, x2 is %d)\n", x1, x2);
		return;
	}

	if (ASSERT_POINTS_ARE_VALID && y1 > y2) {
		printf("ERROR: WriteFilledRectangle failed because y1 > y2 (y1 is %d, y2 is %d)\n", y1, y2);
		return;
	}

	if (ASSERT_POINTS_ARE_VALID && !check_if_point_is_on_screen(x1, y1)) {
		printf("ERROR: WriteFilledRectangle failed for top-left corner (%d,%d)\n", x1, y1);
		return;
	}

	if (ASSERT_POINTS_ARE_VALID && !check_if_point_is_on_screen(x2, y2)) {
		printf("ERROR: WriteFilledRectangle failed for bottom-right corner (%d,%d)\n", x2, y2);
		return;
	}

	WAIT_FOR_GRAPHICS;

	GraphicsX1Reg = x1;
	GraphicsY1Reg = y1;
	GraphicsX2Reg = x2;
	GraphicsY2Reg = y2;
	GraphicsColourReg = Colour;
	GraphicsCommandReg = DrawRectangle;
}

/*
 * Draw a filled rectangle at a top-left point (x1, y1) to a
 * bottom-right point at (x2, y2).
 * Preconditions: x1 <= x2 and y1 <= y2
 */
void TestFilledRectangle(int x1, int y1, int x2, int y2, int color)
{
	if (ASSERT_POINTS_ARE_VALID && x1 > x2) {
		printf("ERROR: DrawFilledRectangle failed because x1 > x2 (x1 is %d, x2 is %d)\n", x1, x2);
	}

	if (ASSERT_POINTS_ARE_VALID && x1 > x2) {
		printf("ERROR: DrawFilledRectangle failed because y1 > y2 (y1 is %d, y2 is %d)\n", y1, y2);
	}

	if (ASSERT_POINTS_ARE_VALID && !check_if_point_is_on_screen(x1, y1)) {
		printf("ERROR: DrawFilledRectangle failed for top-left corner (%d,%d)\n", x1, y1);
		return;
	}

	if (ASSERT_POINTS_ARE_VALID && !check_if_point_is_on_screen(x2, y2)) {
		printf("ERROR: DrawFilledRectangle failed for bottom-right corner (%d,%d)\n", x2, y2);
		return;
	}

	int i;
	for (i = y1; i <= y2; i++) {
		WriteHLine(x1, i, x2-x1, color);
	}
}

/*
 * Draw a circle (hardware-accelerated)
 * Prints an error message and returns without drawing anything if any points would be off screen
 */
void WriteCircle(int x0, int y0, int radius, int color)
{
	if (ASSERT_POINTS_ARE_VALID && !check_if_point_is_on_screen(x0, y0)) {
		printf("ERROR: DrawCircle failed for center point (%d,%d)\n", x0, y0);
		return;
	}

	if (ASSERT_POINTS_ARE_VALID && !check_if_point_is_on_screen(x0+radius, y0)) {
		printf("ERROR: DrawCircle failed in positive x direction (%d,%d)\n", x0+radius, y0);
		return;
	}

	if (ASSERT_POINTS_ARE_VALID && !check_if_point_is_on_screen(x0, y0+radius)) {
		printf("ERROR: DrawCircle failed in positive y direction (%d,%d)\n", x0, y0+radius);
		return;
	}

	if (ASSERT_POINTS_ARE_VALID && !check_if_point_is_on_screen(x0-radius, y0)) {
		printf("ERROR: DrawCircle failed in negative x direction (%d,%d)\n", x0-radius, y0);
		return;
	}

	if (ASSERT_POINTS_ARE_VALID && !check_if_point_is_on_screen(x0, y0-radius)) {
		printf("ERROR: DrawCircle failed in negative y direction (%d,%d)\n", x0, y0-radius);
		return;
	}

	WAIT_FOR_GRAPHICS;

	GraphicsX1Reg = x0;
	GraphicsY1Reg = y0;
	GraphicsX2Reg = radius; //pass in radius using X2 reg
	GraphicsColourReg = color;
	GraphicsCommandReg = DrawCircle;
}

/*
 * Draw a circle (one pixel at a time)
 * Prints an error message and returns without drawing anything if any points would be off screen
 */
void TestCircle(int x0, int y0, int radius, int color)
{
	if (ASSERT_POINTS_ARE_VALID && !check_if_point_is_on_screen(x0, y0)) {
		printf("ERROR: DrawCircle failed for center point (%d,%d)\n", x0, y0);
		return;
	}

	if (ASSERT_POINTS_ARE_VALID && !check_if_point_is_on_screen(x0+radius, y0)) {
		printf("ERROR: DrawCircle failed in positive x direction (%d,%d)\n", x0+radius, y0);
		return;
	}

	if (ASSERT_POINTS_ARE_VALID && !check_if_point_is_on_screen(x0, y0+radius)) {
		printf("ERROR: DrawCircle failed in positive y direction (%d,%d)\n", x0, y0+radius);
		return;
	}

	if (ASSERT_POINTS_ARE_VALID && !check_if_point_is_on_screen(x0-radius, y0)) {
		printf("ERROR: DrawCircle failed in negative x direction (%d,%d)\n", x0-radius, y0);
		return;
	}

	if (ASSERT_POINTS_ARE_VALID && !check_if_point_is_on_screen(x0, y0-radius)) {
		printf("ERROR: DrawCircle failed in negative y direction (%d,%d)\n", x0, y0-radius);
		return;
	}

	int x = radius;
	int y = 0;
	int decisionOver2 = 1 - x;   // Decision criterion divided by 2 evaluated at x=r, y=0

	while( y <= x ) {
		WriteAPixel( x + x0,  y + y0, color); // Octant 1
		WriteAPixel( y + x0,  x + y0, color); // Octant 2
		WriteAPixel(-x + x0,  y + y0, color); // Octant 4
		WriteAPixel(-y + x0,  x + y0, color); // Octant 3
		WriteAPixel(-x + x0, -y + y0, color); // Octant 5
		WriteAPixel(-y + x0, -x + y0, color); // Octant 6
		WriteAPixel( x + x0, -y + y0, color); // Octant 7
		WriteAPixel( y + x0, -x + y0, color); // Octant 8
		y++;
		if (decisionOver2 <= 0) {
		  decisionOver2 += 2 * y + 1;   // Change in decision criterion for y -> y+1
		}
		else {
		  x--;
		  decisionOver2 += 2 * (y - x) + 1;   // Change for y -> y+1, x -> x-1
		}
	}
}

/*
 * Draw text string on a single line.
 * Preconditions: text != NULL
 * Note: Writing a space character with erase set to true will set all pixels
 * in the character to the background colour
 */
void Text(int x, int y, int font_color, int background_color, char *text, int erase)
{
	const int text_char_x_size = 12;
	if (text != NULL) {
		int i;
		for (i = 0; text[i] != '\0'; i++) {
			  OutGraphicsCharFont2a(x+(text_char_x_size * i), y, font_color, background_color, (int) text[i], erase);
		}
	}
}

/*
 * Draw at a top-left point at (x1, y1) to a bottom-right point at (x2, y2).
 * It is up to the user to ensure that the button dimensions are larger than
 * the text dimensions.
 * Preconditions: x1 <= x2, y1 <= y2 and text != NULL
 */
void Button(int x1, int y1, int x2, int y2, int outline_color, int font_color, int fill_color, char *text)
{
	const int text_padding_x = 6;
	const int text_padding_y = 6;
	WriteFilledRectangle(x1, y1, x2, y2, fill_color);
	Rectangle(x1, y1, x2, y2, outline_color);
	Text(x1+text_padding_x, y1+text_padding_y, font_color, fill_color, text, 1);
}

/*********************************************************************************************
* Draw a horizontal line (1 pixel at a time) starting at the x,y coords specified
* Use for testing only
*********************************************************************************************/

void TestHLine(int x1, int y1, int length, int Colour)
{
	int i;
	for(i = x1; i < x1+length; i++ )
		WriteAPixel(i, y1, Colour);
}

/*********************************************************************************************
* Draw a vertical line (1 pixel at a time) starting at the x,y coords specified
* Use for testing only
*********************************************************************************************/

void TestVLine(int x1, int y1, int length, int Colour)
{
	int i;
	for(i = y1; i < y1+length; i++ )
		WriteAPixel(x1, i, Colour);
}

/*******************************************************************************
* Implementation of Bresenhams line drawing algorithm (1 pixel at a time)
* Use for testing only
*******************************************************************************/

int abs(int a)
{
    if(a < 0)
        return -a ;
    else
        return a ;
}

int sign(int a)
{
    if(a < 0)
        return -1 ;
    else if (a == 0)
        return 0 ;
    else
        return 1 ;
}

void TestLine(int x1, int y1, int x2, int y2, int Colour)
{
    int x = x1;
    int y = y1;
    int dx = abs(x2 - x1);
    int dy = abs(y2 - y1);

    int s1 = sign(x2 - x1);
    int s2 = sign(y2 - y1);
    int i, temp, interchange = 0, error ;

// if x1=x2 and y1=y2 then it is a line of zero length

    if(dx == 0 && dy == 0)
        return ;

 // must be a complex line so use bresenhams algorithm
    else    {

// swap delta x and delta y depending upon slop of line

        if(dy > dx) {
            temp = dx ;
            dx = dy ;
            dy = temp ;
            interchange = 1 ;
        }

// initialise the error term to compensate for non-zero intercept

        error = (dy << 1) - dx ;    // (2 * dy) - dx

// main loop
        for(i = 1; i <= dx; i++)    {
            WriteAPixel(x, y, Colour);

            while(error >= 0)   {
                if(interchange == 1)
                    x += s1 ;
                else
                    y += s2 ;

                error -= (dx << 1) ;    // times 2
            }

            if(interchange == 1)
                y += s2 ;
            else
                x += s1 ;

            error += (dy << 1) ;    // times 2
        }
    }
}

/*******************************************************************************
* Compare functions to check for correctness
* Use for testing only
*******************************************************************************/
void write_test_screen() {
	// write RED lines (software) over the entire screen area
	// if we do hardware-accelerated lines and they fail,
	// the rest of the test will be harder to see
	int i;
	for(i = 0; i <= YRES-1; i++) {
		TestHLine(0, i, XRES-1, RED);
	}

	//each pair of lines (for horizontal/vertical) should have the same length

	//for horizontal lines,
	//test lines should start at both even and odd indexes
	//and have even and odd lengths
	//because they may be drawn incorrectly when drawing two pixels per cycle

	// even start pixel, even length
	TestHLine(100,100,100,LIME);
	TestHLine(100,101,100,LIME);
	TestHLine(100,102,100,LIME);
	TestHLine(100,103,100,LIME);
	TestHLine(100,104,100,LIME);
	WriteHLine(100,105,100,BLUE);
	WriteHLine(100,106,100,BLUE);
	WriteHLine(100,107,100,BLUE);
	WriteHLine(100,108,100,BLUE);
	WriteHLine(100,109,100,BLUE);

	// odd start pixel, even length
	TestHLine(101,120,100,LIME);
	TestHLine(101,121,100,LIME);
	TestHLine(101,122,100,LIME);
	TestHLine(101,123,100,LIME);
	TestHLine(101,124,100,LIME);
	WriteHLine(101,125,100,BLUE);
	WriteHLine(101,126,100,BLUE);
	WriteHLine(101,127,100,BLUE);
	WriteHLine(101,128,100,BLUE);
	WriteHLine(101,129,100,BLUE);

	// even start pixel, odd length
	TestHLine(100,140,101,LIME);
	TestHLine(100,141,101,LIME);
	TestHLine(100,142,101,LIME);
	TestHLine(100,143,101,LIME);
	TestHLine(100,144,101,LIME);
	WriteHLine(100,145,101,BLUE);
	WriteHLine(100,146,101,BLUE);
	WriteHLine(100,147,101,BLUE);
	WriteHLine(100,148,101,BLUE);
	WriteHLine(100,149,101,BLUE);

	// odd start pixel, odd length
	TestHLine(101,160,101,LIME);
	TestHLine(101,161,101,LIME);
	TestHLine(101,162,101,LIME);
	TestHLine(101,163,101,LIME);
	TestHLine(101,164,101,LIME);
	WriteHLine(101,165,101,BLUE);
	WriteHLine(101,166,101,BLUE);
	WriteHLine(101,167,101,BLUE);
	WriteHLine(101,168,101,BLUE);
	WriteHLine(101,169,101,BLUE);

	// test vertical lines
	TestVLine(200,200,100,LIME);
	TestVLine(201,200,100,LIME);
	TestVLine(202,200,100,LIME);
	TestVLine(203,200,100,LIME);
	TestVLine(204,200,100,LIME);
	WriteVLine(205,200,100,BLUE);
	WriteVLine(206,200,100,BLUE);
	WriteVLine(207,200,100,BLUE);
	WriteVLine(208,200,100,BLUE);
	WriteVLine(209,200,100,BLUE);

	// compare bresenham lines
	// should see a black line on top
	// and a purple line a few pixels below it
	// otherwise the hardware-accelerated line doesn't perfectly match

	WriteLine(240,340,440,440,MAGENTA);
	WriteLine(239,339,439,439,MAGENTA);
	TestLine(240,340,440,440,BLACK);
	TestLine(239,339,439,439,BLACK);

	TestLine(250,350,450,450,BLACK);
	TestLine(249,349,449,449,BLACK);
	WriteLine(250,350,450,450,MAGENTA);
	WriteLine(249,349,449,449,MAGENTA);

	// compare rectangles
	// should see WHITE rectangles above
	// and a LIME rectangles below

	// even to even
	WriteFilledRectangle(400, 250, 500, 300, LIME);
	TestFilledRectangle(400, 250, 500, 300, WHITE);

	// even to odd
	WriteFilledRectangle(600, 250, 701, 300, LIME);
	TestFilledRectangle(600, 250, 701, 300, WHITE);

	// odd to even
	TestFilledRectangle(401, 350, 500, 400, WHITE);
	WriteFilledRectangle(401, 350, 500, 400, LIME);

	// odd to odd
	TestFilledRectangle(601, 350, 701, 400, WHITE);
	WriteFilledRectangle(601, 350, 701, 400, LIME);

	// compare circles
	WriteCircle(500, 100, 50, LIME);
	TestCircle(500, 100, 50, WHITE);
	TestCircle(700, 100, 50, WHITE);
	WriteCircle(700, 100, 50, LIME);
}

software/module1/heatmap.c
---
/*
 * heatmap.c
 *
 * Functions for drawing the heatmap of GPS points.
 */

#include "heatmap.h"
#include "graphics.h"
#include <math.h>

void draw_heatmap(GPSPoint points[], int numPoints, Colours colourScheme)
{
	//Initialize 2D array representing points
	int count[HEATMAP_H][HEATMAP_V] = {{0}};

	//Check where points land
	int i;
	for (i = 0; i < numPoints; i++) {
		int xi, yi;
		for (yi = 0; yi < HEATMAP_V; yi++) {
			for (xi = 0; xi < HEATMAP_H; xi++) {
				if (points[i].x < ((xi+1) * XRES/HEATMAP_H) && points[i].x >= (xi * XRES/HEATMAP_H) &&
				 	points[i].y < ((yi+1) * MENU_TOP/HEATMAP_V) && points[i].y >= (yi * MENU_TOP/HEATMAP_V)) {
					count[xi][yi]++;
					break;
				}
			}
		}
	}

	//Initialize interpret submenu with count
	initInterpret(count, numPoints);

	//Find max and min counts
	int x, y;
	int max_count = 0;
	int min_count = numPoints;
	for (y = 0; y < HEATMAP_V; y++) {
		for (x = 0; x < HEATMAP_H; x++) {
			if (count[x][y] > max_count) {
				max_count = count[x][y];
			}
			if (count[x][y] < min_count) {
				min_count = count[x][y];
			}
		}
	}

	//Make colours proportional to number of points
	int shade;
	int colours[HEATMAP_H][HEATMAP_V];
	for (y = 0; y < HEATMAP_V; y++) {
		for (x = 0; x < HEATMAP_H; x++) {
			shade = ceil(((count[x][y] - min_count) * (HM_SHADES - 1))/(double)(max_count - min_count));
			colours[x][y] = colourScheme.shades[shade];
		}
	}

	//Draw points
	int h, v;
	for (v = 0; v < HEATMAP_V; v++) {
		for (h = 0; h < HEATMAP_H; h++) {
			WriteFilledRectangle(h * (XRES-1)/HEATMAP_H, v * (MENU_TOP-1)/HEATMAP_V, (h + 1) * (XRES-1)/HEATMAP_H, (v + 1) * (MENU_TOP-1)/HEATMAP_V, colours[h][v]);
		}
	}
}

void connect_points(GPSPoint points[], int numPoints, Colours colourScheme)
{
	WriteFilledRectangle(0,0,XRES-1,MENU_TOP-1,WHITE);

	GPSPoint point_a;
	GPSPoint point_b;
	if (numPoints > 0) {
		WriteCircle(points[0].x, points[0].y, POINT_CIRCLE_RADIUS, colourScheme.connectTheDotsLine);
	}
	int i;
	for(i = 1; i < numPoints; i++) {
		point_a = points[i-1];
		point_b = points[i];

		// draw circle around each point for testing
		WriteCircle(point_b.x, point_b.y, POINT_CIRCLE_RADIUS, colourScheme.connectTheDotsLine);

		// draw a line from point_a to point_b
		WriteLine((int)point_a.x, (int)point_a.y, (int)point_b.x, (int)point_b.y, colourScheme.connectTheDotsLine);
	}
}

software/module1/main.c
---
/*
 * Entry point for module 1.
 *
 */

#include <stdio.h>
#include <Altera_UP_SD_Card_Avalon_Interface.h>
#include "conversion.h"
#include "touchScreen.h"
#include "colours.h"
#include "graphics.h"
#include "heatmap.h"
#include "gps_points.h"
#include "sub_menus.h"
#include "sd_card.h"
#include "datasets.h"

// Meta stuff.
void initialize_components(void);
void initialize_components(void);
void initialize_colourScheme(void);
void initialize_datasets(void);
void initialize_demodata(void);
void cleanup(void);

// Data-independent drawing functions.
void draw_field(void);
void draw_menu(void);

// Main menu function
void main_menu(void);

// Draw settings
Colours colourScheme;

#define GPSPOINTLEN 2
#define GPSPOINTSETLEN 2

int main()
{
  printf("Starting module 1 code.\n");

  initialize_components();
  initialize_colourScheme();
  initialize_datasets();
  save_points();
  //load_from_SD_to_dataSets();
  loadgps_workingDataSet();
  initialize_demodata();
  main_menu();

  // Should never reach this point, but here in case we implement an exit button.
  cleanup();

  printf("Program terminated.\n");

  return 0;
}

// initialize each of the hardware components and clear the screen
void initialize_components(void)
{
	init_gps();
	Init_Touch();
	clear_screen(WHITE);
}

// initialize the colour scheme that will be used for the menus and data visualizations
void initialize_colourScheme(void)
{
	colourScheme.menuBackground = WHITE;
	colourScheme.text = BLACK;
	colourScheme.connectTheDotsLine = BLACK;
	colourScheme.pairNum = INITPAIR;
	colourScheme.shades[0] = OLIVE_DRAB;
	colourScheme.shades[1] = YELLOW_GREEN;
	colourScheme.shades[2] = LAWN_GREEN;
	colourScheme.shades[3] = GREEN_YELLOW;
	colourScheme.shades[4] = YELLOW;
	colourScheme.shades[5] = GOLD;
	colourScheme.shades[6] = ORANGE;
	colourScheme.shades[7] = DARK_ORANGE;
	colourScheme.shades[8] = ORANGE_RED;
	colourScheme.shades[9] = RED;
}

void initialize_datasets()
{
	// set all data sets to 0
	int i;
	for(i = 0; i < MAX_N_SETS; i++) {
		localData.dataSets[i].size = 0;
	}
	//TODO should copy data from SD card instead
}

void initialize_demodata()
{
	// set all data sets to demo data
	int set = 0;
	for(set = 0; set < MAX_N_SETS; set++){
		save_demo_points(set);
	}
}

void cleanup(void)
{
	//Nothing yet
}

void draw_field(void)
{
	//Centre circle
	WriteCircle(XRES/2, MENU_TOP/2, MENU_TOP/8, BLACK);
	//Middle line
	WriteVLine(XRES/2, 0, MENU_TOP, BLACK);
	//Goals
	WriteVLine(GOAL_WIDTH, MENU_TOP/4, MENU_TOP/2, BLACK);
	WriteVLine(XRES-GOAL_WIDTH, MENU_TOP/4, MENU_TOP/2, BLACK);
	WriteHLine(0, MENU_TOP/4, GOAL_WIDTH, BLACK);
	WriteHLine(0, 3*MENU_TOP/4, GOAL_WIDTH, BLACK);
	WriteHLine(XRES-GOAL_WIDTH, MENU_TOP/4, GOAL_WIDTH-1, BLACK);
	WriteHLine(XRES-GOAL_WIDTH, 3*MENU_TOP/4, GOAL_WIDTH-1, BLACK);
}

void draw_menu(void)
{
	WriteFilledRectangle(0, MENU_TOP, XRES-1, YRES-1, colourScheme.menuBackground);
	WriteHLine(0, MENU_TOP, XRES - 1, BLACK);
	WriteVLine(XRES/3, MENU_TOP, YRES - MENU_TOP - 1, BLACK);
	WriteVLine(XRES*2/3, MENU_TOP, YRES - MENU_TOP - 1, BLACK);
	Text(10, (MENU_TOP + YRES)/2, colourScheme.text, colourScheme.menuBackground, "Save/Load", 0);
	Text(XRES/3 + 10, (MENU_TOP + YRES)/2, colourScheme.text, colourScheme.menuBackground, "Interpret", 0);
	Text(XRES*2/3 + 10, (MENU_TOP + YRES)/2, colourScheme.text, colourScheme.menuBackground, "Settings", 0);
}

void main_menu(void)
{
	clear_screen(WHITE);

	draw_heatmap(localData.workingDataSet.points, localData.workingDataSet.size, colourScheme);
	draw_field();
	draw_menu();
	Point p;
	p.y = 0;

	int showing_heatmap = TRUE;
	int outSubMenu = FALSE;
	while(1)
	{
		if(p.y < MENU_TOP){
			if(!outSubMenu){
				p = GetPress();
				GetRelease();
			}
		}

		if(p.y < MENU_TOP){
			if(!outSubMenu){
				showing_heatmap = !showing_heatmap;
			}else{
				outSubMenu = FALSE;
			}

			if(showing_heatmap){
				connect_points(localData.workingDataSet.points, localData.workingDataSet.size, colourScheme);
			}else{
				draw_heatmap(localData.workingDataSet.points, localData.workingDataSet.size, colourScheme);
			}

			draw_field();
		}else{
			if(p.x < XRES / NMENUS){
				//Save/Load touched
				SaveLoadMenu(&p, &colourScheme);
				showing_heatmap = FALSE;
				GetRelease();
			}else if(p.x < 2 * XRES / NMENUS){
				//Interpret touched
				InterpretMenu(&p, &colourScheme);
				GetRelease();
			}else{
				//Settings touched
				SettingsMenu(&p, &colourScheme);
				GetRelease();
				draw_menu();
			}
			outSubMenu = TRUE;
		}
	}
}

software/module1/OutGraphicsCharFont1.c
---
/*************************************************************************************************
** This function draws a single ASCII character at the coord and colour specified
** it optionally ERASES the background colour pixels to the background colour
** This means you can use this to erase characters
**
** e.g. writing a space character with Erase set to true will set all pixels in the
** character to the background colour
**
*************************************************************************************************/

#include "graphics.h"

extern const unsigned char Font5x7[95][7];

void OutGraphicsCharFont1(int x, int y, int fontcolour, int backgroundcolour, int c, int Erase)
{
// using register variables (as opposed to stack based ones) may make execution faster
// depends on compiler and CPU

	register int row, column, theX = x, theY = y ;
	register int pixels ;
	register char theColour = fontcolour  ;
	register int BitMask, theC = c ;

// if x,y coord off edge of screen don't bother
// XRES and YRES are #defined to be 800 and 480 respectively
    if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))
        return ;


// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
		theC = theC - 0x20 ;
		for(row = 0; (char)(row) < (char)(7); row ++)	{

// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row] ;
			BitMask = 16 ;

			for(column = 0; (char)(column) < (char)(5); column ++)	{

// if a pixel in the character display it
				if((pixels & BitMask))
					WriteAPixel(theX+column, theY+row, theColour) ;

				else {
					if(Erase == TRUE)

// if pixel is part of background (not part of character)
// erase the background to value of variable BackGroundColour

						WriteAPixel(theX+column, theY+row, backgroundcolour) ;
				}
				BitMask = BitMask >> 1 ;
			}
		}
	}
}

software/module1/OutGraphicsCharFont2.c
---
#define FONT2_XPIXELS	10				// width of Font2 characters in pixels (no spacing)
#define FONT2_YPIXELS	14				// height of Font2 characters in pixels (no spacing)

#include "graphics.h"

extern const unsigned short int Font10x14[][14];

/******************************************************************************************************************************
** This function draws a single ASCII character at the coord specified using the colour specified
** OutGraphicsCharFont2(100,100, RED, 'A', TRUE, FALSE, 1, 1) ;	// display upper case 'A' in RED at coords 100,100, erase background
** no scroll, scale x,y= 1,1
**
******************************************************************************************************************************/
void OutGraphicsCharFont2a(int x, int y, int colour, int backgroundcolour, int c, int Erase)
{
	register int 	row,
					column,
					theX = x,
					theY = y ;
	register int 	pixels ;
	register char 	theColour = colour  ;
	register int 	BitMask,
					theCharacter = c,
					j,
					theRow, theColumn;


    if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))  // if start off edge of screen don't bother
        return ;

	if(((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~'))) {			// if printable character
		theCharacter -= 0x20 ;																			// subtract hex 20 to get index of first printable character (the space character)
		theRow = FONT2_YPIXELS;
		theColumn = FONT2_XPIXELS;

		for(row = 0; row < theRow ; row ++)	{
			pixels = Font10x14[theCharacter][row] ;		     								// get the pixels for row 0 of the character to be displayed
			BitMask = 512 ;							   											// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
			for(column = 0; column < theColumn;   )  	{
				if((pixels & BitMask))														// if valid pixel, then write it
					WriteAPixel(theX+column, theY+row, theColour) ;
				else {																		// if not a valid pixel, do we erase or leave it along (no erase)
					if(Erase == TRUE)
						WriteAPixel(theX+column, theY+row, backgroundcolour) ;
					// else leave it alone
				}
					column ++ ;
				BitMask = BitMask >> 1 ;
			}
		}
	}
}

software/module1/sd_card.c
---
#include <stdio.h>
#include <stdlib.h>
#include <Altera_UP_SD_Card_Avalon_Interface.h>
#include <string.h>
#include "sd_card.h"
#include "datasets.h"
#include "conversion.h"
#include "cJSON.h"

// Use ASCII char '!' to delimit the end of useful data in a file
#define SD_SENTINEL 33

void sd_card_cJSON_stringify(dataSet in[], int in_len, char out[])
{
	// Convert GPSPoint and dataSet structs into JSON string data
	cJSON *root;

	//DEBUG
	printf("in sd_card_cJSON_stringify\n");

	root = cJSON_CreateArray();
	if (in != NULL) {

		//DEBUG
		printf("beginning for-loop: Convert dataSet into JSON string data\n");

		int i;
		for (i = 0; i < in_len; i++) {
			// Convert dataSet into JSON string data
			cJSON *temp_dataset, *temp_gpspoints;
			cJSON_AddItemToArray(root, temp_dataset = cJSON_CreateObject());
			cJSON_AddNumberToObject(temp_dataset, "size", in[i].size);
			cJSON_AddItemToObject(temp_dataset, "gpspoints", temp_gpspoints = cJSON_CreateArray());
			// Convert gpspoints into JSON string data

			// DEBUG
			printf("beginning for-loop: Convert gpspoints into JSON string data\n");

			int j;
			for (j = 0; j < in[i].size; j++) {
				cJSON *temp_gpspoint;
				cJSON_AddItemToArray(temp_gpspoints, temp_gpspoint = cJSON_CreateObject());
				cJSON_AddItemToObject(temp_gpspoint, "x", cJSON_CreateNumber(in[i].points[j].x));
				cJSON_AddItemToObject(temp_gpspoint, "y", cJSON_CreateNumber(in[i].points[j].y));
			}
		}
		// DEBUG
		printf("finished for loops\n");
	}
	//DEBUG
	printf("Copy JSON string representation to out[]\n");

	// Copy JSON string representation to out[]
	strcat(out, cJSON_Print(root));

	//DEBUG
	printf("Append the sentinel to the end of out\n");

	// Append the sentinel to the end of out
	char sentinel[1] = "";
	sentinel[0] = (char)(SD_SENTINEL);

	//DEBUG
	printf("sentinel[0]: %c\n", sentinel[0]);

	strcat(out, sentinel);

	//DEBUG
	//printf("out[]: %s\n", out);

	//DEBUG
	printf("exiting sd_card_cJSON_stringify\n");

	// Cleanup cJSON data
	// For some reason cJSON_Delete(in_root) causes the program
	// to freeze; this is commented out for now.
	//cJSON_Delete(in_root);
}

void sd_card_cJSON_parse(char data[], dataSet out[])
{
	// Convert JSON string data back into GPSPoint and dataSet structs
	int success = 0;  // set to 0 on successful conversion; otherwise set to 1
	dataSet new_set;  // dataSet retrieved from JSON string data

	cJSON *in_root = cJSON_Parse(data);
	int dataSet_index = 0;
	cJSON *in_dataSet = cJSON_GetArrayItem(in_root, dataSet_index);
	while (in_dataSet != NULL) {
		new_set.size = cJSON_GetObjectItem(in_dataSet, "size")->valuedouble;
		cJSON *gpspoints = cJSON_GetObjectItem(in_dataSet, "gpspoints");
		if (gpspoints != NULL) {
			// Read each gpspoint
			int gpspoint_index = 0;
			cJSON *gpspoint = cJSON_GetArrayItem(gpspoints, gpspoint_index);
			while (gpspoint != NULL) {
				GPSPoint new_pt;
				new_pt.x = cJSON_GetObjectItem(gpspoint, "x")->valuedouble;
				new_pt.y = cJSON_GetObjectItem(gpspoint, "y")->valuedouble;
				new_set.points[gpspoint_index] = new_pt;
				gpspoint_index++;
				gpspoint = cJSON_GetArrayItem(gpspoints, gpspoint_index);
			}
			cJSON_Delete(gpspoint);
		}
		else {
			success = 1;
		}
		out[dataSet_index] = new_set;
		cJSON_Delete(gpspoints);
		dataSet_index++;
		in_dataSet = cJSON_GetArrayItem(in_root, dataSet_index);
	}
	cJSON_Delete(in_dataSet);
	// For some reason cJSON_Delete(in_root) causes the program
	// to freeze; this is commented out for now.
	//cJSON_Delete(in_root);
}

int sd_card_save(dataSet dsets[], int dsets_len, char *filename)
{
	alt_up_sd_card_dev *device_reference = NULL;
	int connected = 0;

	if((device_reference = alt_up_sd_card_open_dev("/dev/Altera_UP_SD_Card_Avalon_Interface_0")) == NULL)
	{
		return -2;
	}
	if (device_reference != NULL ) {
		while (1) {
			if ((connected == 0) && (alt_up_sd_card_is_Present())){
				if (alt_up_sd_card_is_FAT16()) {
					short int file_handle;
					if (alt_up_sd_card_is_Present() && alt_up_sd_card_is_FAT16()) {
						file_handle = alt_up_sd_card_fopen(filename, false);
						if (file_handle == -1) {
							// File most likely does not exist, so attempt to create it
							file_handle = alt_up_sd_card_fopen(filename, true);
						}
						switch (file_handle) {
						case -1: {
							printf("File NOT Opened (file_handle is -1)\n");
							break;
						}
						case -2: {
							printf("File NOT Opened (file_handle is -2)\n");
							break;
						}
						default: {
							// Convert dsets[] into JSON string

							//DEBUG
							printf("Converting into string\n");

							char json_data[JSON_DATA_MAX_LEN] = "";
							sd_card_cJSON_stringify(dsets, dsets_len, json_data);

							// Write the buffer to the SD card

							//DEBUG
							printf("Writing buffer to sd card\n");

							int i;
							for (i = 0; json_data[i] != '\0'; i++) {
								if (alt_up_sd_card_write(file_handle, (unsigned char)json_data[i]) == false) {
									printf("Error writing to file...\n");
									alt_up_sd_card_fclose(file_handle);
									return -1;
								}
							}

							if (alt_up_sd_card_fclose(file_handle) == false) {
								printf("WARNING: alt_up_sd_card_fclose was unsuccessful\n");
							}
							return 0;
						}
						}
					}
				}
				connected = 1;
				printf("Please disconnect the SD card.\n");
			}
			else if((connected == 1) && (alt_up_sd_card_is_Present() == false)){
				printf("Card disconnected.\n");
				return -3;
			}
		}
	}
	else {
		printf("Can't open device\n");
	}
	// Should not get to this point
	return 1;
}

int sd_card_load(dataSet out[], int out_len, char *filename)
{
	alt_up_sd_card_dev *device_reference = NULL;
	int connected = 0;

	if((device_reference = alt_up_sd_card_open_dev("/dev/Altera_UP_SD_Card_Avalon_Interface_0")) == NULL)
	{
		return -2;
	}

	if (device_reference != NULL ) {
		while (1) {
			if ((connected == 0) && (alt_up_sd_card_is_Present())){
				if (alt_up_sd_card_is_FAT16()) {
					short int file_handle;
					if (alt_up_sd_card_is_Present() && alt_up_sd_card_is_FAT16()) {
						file_handle = alt_up_sd_card_fopen(filename, false);
						if (file_handle == -1) {
							// File most likely does not exist, so attempt to create it
							file_handle = alt_up_sd_card_fopen(filename, true);
						}
						switch (file_handle) {
						case -1: {
							printf("File NOT Opened (file_handle is -1)\n");
							break;
						}
						case -2: {
							printf("File NOT Opened (file_handle is -2)\n");
							break;
						}
						default: {
							char json_data[JSON_DATA_MAX_LEN] = "";
							// Read data from the SD card into json_data
							short int read = alt_up_sd_card_read(file_handle);
							while (!(read < 0) && read != SD_SENTINEL) {
								char temp[2];
								temp[0] = (char)read;
								temp[1] = '\0';
								strcat(json_data, temp);
								read = alt_up_sd_card_read(file_handle);
							}

							// Generate dataset array from json_data
							// and assign it to out[]
							sd_card_cJSON_parse(json_data, out);

							if (alt_up_sd_card_fclose(file_handle) == false) {
								printf("WARNING: alt_up_sd_card_fclose was unsuccessful\n");
							}
							return 0;
						}
						}
					}
				}
				connected = 1;
				printf("Please disconnect the SD card.\n");
			}
			else if((connected == 1) && (alt_up_sd_card_is_Present() == false)){
				printf("Card disconnected.\n");
				return -3;
			}
		}
	}
	else {
		printf("Can't open device\n");
	}
	// Should not get to this point
	return 1;
}

software/module1/sub_menus.c
---
/*
 * sub_menus.c
 *
 *  Created on: 2016-02-11
 *      Author: Kyle
 */

#include "sub_menus.h"
#include "graphics.h"
#include "touchScreen.h"
#include "datasets.h"
#include <string.h>
#include <stdio.h>

//Struct for background/text colour pairs - only a limited selection are available to the user
typedef struct{
	int background;
	int text;
}back_textPair;

//Variables for the interpret menu
double percentageLeft, percentageRight, percentageForward, percentageBack;

/*
 * Initialises the interpret menu, must be called each time the heat map data is changed. Saves doing computations every time
 * the interpret menu is brought up.
 */
void initInterpret(int count[HEATMAP_H][HEATMAP_V], int nPoints){
	int backCount = 0;
	int leftCount = 0;

	int i;
	for(i = 0; i < HEATMAP_H; i++){
		int j;
		for(j = 0; j < HEATMAP_V; j++){
			if(i <= HEATMAP_H / 2){
				backCount += count[i][j];
			}

			if(j <= HEATMAP_V / 2){
				leftCount += count[i][j];
			}
		}
	}

	percentageBack = (double)backCount / nPoints;
	percentageLeft = (double)leftCount / nPoints;

	percentageForward = 1 - percentageBack;
	percentageRight = 1 - percentageLeft;
}

/*
 * Displays the Save/Load menu.
 */
void SaveLoadMenu(Point* p, Colours* scheme){
	WriteFilledRectangle(0, 0, XRES-1, MENU_TOP-1, WHITE);

	//If the background is WHITE then just draw boarders in black for buttons
	if(scheme->menuBackground == WHITE){
		Rectangle(SL_LEFT_BOX_XSTART, SL_TOPBOX_YSTART, SL_LEFT_BOX_XEND, SL_TOPBOC_YEND, BLACK);
		Rectangle(SL_RIGHT_BOX_XSTART, SL_TOPBOX_YSTART, SL_RIGHT_BOX_XEND, SL_TOPBOC_YEND, BLACK);
		Rectangle(SL_LEFT_BOX_XSTART, SL_LOWBOX_YSTART, SL_LEFT_BOX_XEND, SL_LOWBOX_YEND, BLACK);
		Rectangle(SL_RIGHT_BOX_XSTART, SL_LOWBOX_YSTART, SL_RIGHT_BOX_XEND, SL_LOWBOX_YEND, BLACK);
	}else{ //Else use scheme to determine button colour
		WriteFilledRectangle(SL_LEFT_BOX_XSTART, SL_TOPBOX_YSTART, SL_LEFT_BOX_XEND, SL_TOPBOC_YEND, scheme->menuBackground);
		WriteFilledRectangle(SL_RIGHT_BOX_XSTART, SL_TOPBOX_YSTART,  SL_RIGHT_BOX_XEND, SL_TOPBOC_YEND, scheme->menuBackground);
		WriteFilledRectangle(SL_LEFT_BOX_XSTART, SL_LOWBOX_YSTART, SL_LEFT_BOX_XEND, SL_LOWBOX_YEND, scheme->menuBackground);
		WriteFilledRectangle(SL_RIGHT_BOX_XSTART, SL_LOWBOX_YSTART, SL_RIGHT_BOX_XEND, SL_LOWBOX_YEND, scheme->menuBackground);
	}

	//Draw text in buttons explaining them
	Text((SL_LEFT_BOX_XSTART + SL_LEFT_BOX_XEND)/2-19, (SL_TOPBOX_YSTART + SL_TOPBOC_YEND)/2-5, scheme->text, scheme->menuBackground, "<", 0);
	Text((SL_RIGHT_BOX_XSTART + SL_RIGHT_BOX_XEND)/2+19, (SL_TOPBOX_YSTART + SL_TOPBOC_YEND)/2-5, scheme->text, scheme->menuBackground, ">", 0);
	Text(SL_LEFT_BOX_XSTART + 10, SL_LOWBOX_YSTART + 10, scheme->text, scheme->menuBackground, "Load", 0);
	Text(SL_RIGHT_BOX_XSTART + 10, SL_LOWBOX_YSTART + 10, scheme->text, scheme->menuBackground, "Save", 0);

	int set = 0;//0 == GPS, else dataSet = set - 1.
	char* str = "DataSet   ";
	Text(XRES/2-25, (YRES/2 + 50)/2, scheme->text, scheme->menuBackground, "GPS", 0);

	//boolean
	int buttonTouched = 0;
	do{
		if(buttonTouched){
			buttonTouched = 0;
		}

		*p = GetPress();

		if(p->y > SL_TOPBOX_YSTART && p->y < SL_TOPBOC_YEND){
			//if decrement button touched, decrement set, display such has been done to user
			if(p->x > SL_LEFT_BOX_XSTART && p->x < SL_LEFT_BOX_XEND){
				buttonTouched = 1;
				WriteFilledRectangle(SL_LEFT_BOX_XEND + 1, SL_TOPBOX_YSTART, SL_RIGHT_BOX_XSTART - 1, SL_TOPBOC_YEND, WHITE);

				if(set == 0){
					set = MAX_N_SETS;//wrap-around
				}else{
					set--;
				}

				if(set == 0){
					Text(XRES/2-25, (YRES/2 + 50)/2, scheme->text, scheme->menuBackground, "GPS", 0);
				}else{
					str[8] = (char)(set / 10) + '0';
					str[9] = (char)(set % 10) + '0';
					if(str[8] == '0'){
						str[8] = str[9];
						str[9] = '\0';
					}

					Text(XRES/2-45, (YRES/2 + 50)/2, scheme->text, scheme->menuBackground, str, 0);
				}

				GetRelease();
			}else if(p->x > SL_RIGHT_BOX_XSTART && p->x < SL_RIGHT_BOX_XEND){
				//if increment button touched, increment set, display such has been done to user
				buttonTouched = 1;
				WriteFilledRectangle(SL_LEFT_BOX_XEND + 1, SL_TOPBOX_YSTART, SL_RIGHT_BOX_XSTART - 1, SL_TOPBOC_YEND, WHITE);

				if(set == MAX_N_SETS){
					set = 0;//wrap-around
				}else{
					set++;
				}

				if(set == 0){
					Text(XRES/2-25, (YRES/2 + 50)/2, scheme->text, scheme->menuBackground, "GPS", 0);
				}else{
					str[8] = (char)(set / 10) + '0';
					str[9] = (char)(set % 10) + '0';
					if(str[8] == '0'){
						str[8] = str[9];
						str[9] = '\0';
					}

					Text(XRES/2-45, (YRES/2 + 50)/2, scheme->text, scheme->menuBackground, str, 0);
				}

				GetRelease();
			}
		}else if(p->y < SL_LOWBOX_YEND && p->y > SL_LOWBOX_YSTART){
			//If load button touched, do following
			if(p->x > SL_LEFT_BOX_XSTART && p->x < SL_LEFT_BOX_XEND){
				buttonTouched = 1;

				if (set != 0) {
					//GPS is set 0 so we add 1 to get the correct index
					load_into_workingDataSet(set-1);
				} else {
					loadgps_workingDataSet();
				}

				return;
			}else if(p->x > SL_RIGHT_BOX_XSTART && p->x < SL_RIGHT_BOX_XEND){
				//If save button touched, do following
				buttonTouched = 1;
		
				if (set != 0) { // check set number since cannot save to GPS
					//GPS is set 0 so we add 1 to get the correct index
					save_from_workingDataSet(set-1);
				}

				WriteFilledRectangle(SL_LEFT_BOX_XSTART, 0, XRES-1, SL_TOPBOX_YSTART-1, WHITE);
				if(set == 0){
					Text(XRES/3-45, 10, BLACK, WHITE, "Cannot save to GPS", 0);
					}else{
					char tmpStr[strlen(str)+26];
					strcpy(tmpStr, "Current DataSet saved to ");
					strcpy(tmpStr+25,str);

					Text(XRES/3-45, 10, BLACK, WHITE, tmpStr, 0);
				}

				GetRelease();
			}
		}

	}while(buttonTouched || (p->y > MENU_TOP && p->x < XRES/NMENUS)); //Do this while a button in the submenu has been touched or the Save/Load menu button has been touched
}

/*
 * Displays the interpret menu
 */
void InterpretMenu(Point* p, Colours* scheme){
	WriteFilledRectangle(0, 0, XRES-1, MENU_TOP-1, scheme->menuBackground);

	char* str = "Time on Right:    %";
	str[15] = (char)((int)percentageRight + '0');
	str[16] = (char)((int)(10 * percentageRight) % 10 + '0');
	str[17] = (char)((int)(100 * percentageRight) % 10 + '0');

	if(str[15] == '0'){
		str[15] = ' ';
		if(str[16] == '0'){
			str[16] = ' ';
		}
	}

	Text(I_LEFT_ALIGN, I_TOP_ALIGN, scheme->text, scheme->menuBackground, str, 0);

	str = "Time on Left:    %";

	str[14] = (char)((int)percentageLeft + '0');
	str[15] = (char)((int)(10 * percentageLeft) % 10 + '0');
	str[16] = (char)((int)(100 * percentageLeft) % 10 + '0');

	if(str[14] == '0'){
		str[14] = ' ';
		if(str[15] == '0'){
			str[15] = ' ';
		}
	}

	Text(I_LEFT_ALIGN, I_BOT_ALIGN, scheme->text, scheme->menuBackground, str, 0);

	str = "Time Forward:    %";

	str[14] = (char)((int)percentageForward + '0');
	str[15] = (char)((int)(10 * percentageForward) % 10 + '0');
	str[16] = (char)((int)(100 * percentageForward) % 10 + '0');

	if(str[14] == '0'){
		str[14] = ' ';
		if(str[15] == '0'){
			str[15] = ' ';
		}
	}

	Text(I_RIGHT_ALIGN, I_TOP_ALIGN, scheme->text, scheme->menuBackground, str, 0);

	str = "Time Back:    %";

	str[11] = (char)((int)percentageBack + '0');
	str[12] = (char)((int)(10 * percentageBack) % 10 + '0');
	str[13] = (char)((int)(100 * percentageBack) % 10 + '0');

	if(str[11] == '0'){
		str[11] = ' ';
		if(str[12] == '0'){
			str[12] = ' ';
		}
	}

	Text(I_RIGHT_ALIGN, I_BOT_ALIGN, scheme->text, scheme->menuBackground, str, 0);

	do{
		*p = GetPress();
	}while(p->x > XRES/NMENUS && p->x < 2*XRES/NMENUS && p->y > MENU_TOP);
}

/*
 * Allows user to change the menu background colours as well as text colour and line (for connect-the-dots) colour.
 * Makes sure the text/background pair is acceptable (text is viewable on background).
 * Makes sure the line colour is not white and is not the same as the background colour.
 */
void SettingsMenu(Point* p, Colours* scheme){
	back_textPair pairs[NPAIRS]; //Initialise pairs of background/text colours
	pairs[INITPAIR].background = WHITE;
	pairs[INITPAIR].text = BLACK;
	pairs[1].background = CYAN;
	pairs[1].text = RED;
	pairs[2].background = YELLOW;
	pairs[2].text = BLUE;

	WriteFilledRectangle(0, 0, XRES-1, MENU_TOP-1, BLACK);//Clear background

	//Boolean
	int settingsTouched = 0;
	int buttonTouched = 0;// 0 == Menu just opened, 1 == Line, 2 == Text/Background
	do{
		//Redraw buttons/lines with new colours if the button pressed wasn't the settings button
		if(!settingsTouched){
			if(buttonTouched == 0 || buttonTouched == 2){
				WriteFilledRectangle(SET_LEFT_ALIGN, 0, SET_RIGHT, SET_TOP_YEND,scheme->menuBackground);//Create buttons
				WriteFilledRectangle(SET_LEFT_ALIGN, SET_BOT_YSTART, SET_RIGHT, SET_BOT_YEND,scheme->menuBackground);

				Text(SET_LEFT_ALIGN+10, (SET_TOP_YEND)/2, scheme->text, scheme->menuBackground, "Text/background", 0);//Print text on buttons
				Text(SET_LEFT_ALIGN+10, SET_BOT_YSTART + 1, scheme->text, scheme->menuBackground, "Line Colour", 0);
			}
			//Display example line
			WriteLine(SET_LEFT_ALIGN, SET_BOT_YEND-1, SET_RIGHT, SET_BOT_YSTART-1, scheme->connectTheDotsLine);
			WriteLine(SET_LEFT_ALIGN, SET_BOT_YEND, SET_RIGHT, SET_BOT_YSTART, scheme->connectTheDotsLine);
			WriteLine(SET_LEFT_ALIGN, SET_BOT_YEND+1, SET_RIGHT, SET_BOT_YSTART, scheme->connectTheDotsLine);
		}else{
			settingsTouched = 0;
		}

		*p = GetPress();

		//If the text/background colour button is pressed
		if(p->x <= SET_RIGHT && p->x >= SET_LEFT_ALIGN && p->y <= SET_TOP_YEND){
			buttonTouched = 2;
			do{
				scheme->menuBackground = pairs[(scheme->pairNum + 1) % NPAIRS].background;
				scheme->text = pairs[(scheme->pairNum + 1) % NPAIRS].text;
				scheme->pairNum = (scheme->pairNum + 1) % NPAIRS;
			}while(scheme->menuBackground == scheme->connectTheDotsLine);//Change the colour pair if the background was the same colour as the line
			GetRelease();
		}else if(p->x <= SET_RIGHT && p->x >= SET_LEFT_ALIGN && p->y <= SET_BOT_YEND && p->y > SET_BOT_YSTART){ //If the line colour button was pressed
			buttonTouched = 1;
			do{
				scheme->connectTheDotsLine = (scheme->connectTheDotsLine + 1) % NCOLOURS;
			}while(scheme->connectTheDotsLine == WHITE || scheme->connectTheDotsLine == scheme->menuBackground);//Change the line colour if it is white or is the same colour as the background
			GetRelease();
		}else if(!(p->x >= 2 * XRES / NMENUS && p->y >= MENU_TOP)){//If touched outside of this menu's buttons and not the settings button itself break out of menu
			break;
		}else{//Else the settings button was touched
			settingsTouched = 1;
		}
	}while(1); //Do this while in settings menu

}

software/module1/touchScreen.c
---
/*
 * touchScreen.c
 *
 *  Created on: 2016-02-03
 *      Author: Kyle
 */

#include <stdio.h>
#include "touchScreen.h"
#include "graphics.h"

//define memory locations
#define TOUCH_CONTROL (*(volatile unsigned char *) (0x84000230))
#define TOUCH_STATUS (*(volatile unsigned char *) (0x84000230))
#define TOUCH_TX (*(volatile unsigned char *) (0x84000232))
#define TOUCH_RX (*(volatile unsigned char *) (0x84000232))
#define TOUCH_BAUD (*(volatile unsigned char *) (0x84000234))

#define TOUCH_STATUS_RX_MASK 0x01
#define TOUCH_STATUS_TX_MASK 0x02

// Program 6850 and baud rate generator to communicate with touchscreen
// send touchscreen controller an "enable touch" command
void Init_Touch ( void )
{
	TOUCH_CONTROL = 0x03;
	TOUCH_BAUD = 0x07;
	TOUCH_CONTROL = 0x15;


	int i;
	for( i = 0; i < 3; i++){
		while(1){
			if(TOUCH_STATUS & TOUCH_STATUS_TX_MASK){
				switch(i){
				case 0:
					TOUCH_TX = 0x55;
					break;
				case 1:
					TOUCH_TX = 0x01;
					break;
				case 2:
					TOUCH_TX = 0x12;
					break;
				}
				break;
			}
		}
	}

}
/*****************************************************************************
**   test if screen touched
*****************************************************************************/
// return TRUE if any data received from 6850 connected to touchscreen
// or FALSE otherwise
int ScreenTouched( void)
{
	if(TOUCH_STATUS_RX_MASK & TOUCH_STATUS){
		if(TOUCH_RX == 0x81){
			return 1;
		}
	}

	return 0;
}
/*****************************************************************************
**   wait for screen to be touched
*****************************************************************************/
void WaitForTouch(){
	while(!ScreenTouched())
		;
}
/* a data type to hold a point/coord */

/*****************************************************************************
* This function
waits for
a touch screen press
event
and returns X,Y coord
*****************************************************************************/
// wait for a pen down command then return the X,Y coord of the point
// calibrated correctly so that it maps to a pixel on screen
Point GetPress(void)
{
Point p1;

WaitForTouch();

while(!(TOUCH_STATUS_RX_MASK & TOUCH_STATUS))
	;

p1.x = TOUCH_RX;

while(!(TOUCH_STATUS_RX_MASK & TOUCH_STATUS))
	;
p1.x += TOUCH_RX << 7;

while(!(TOUCH_STATUS_RX_MASK & TOUCH_STATUS))
	;
p1.y = TOUCH_RX;

while(!(TOUCH_STATUS_RX_MASK & TOUCH_STATUS))
	;
p1.y += TOUCH_RX << 7;

p1.x = (int) ((p1.x) / 4090.0 * (double)XRES);

p1.y = (int) ((p1.y - 30) / 4070.0 * (double)YRES);
return p1;
}
/*****************************************************************************
* This function
waits for
a touch screen release
event
and returns X,Y coord
*****************************************************************************/
// wait for a pen up command then return the X,Y coord of the point
// calibrated correctly so that it maps to a pixel on screen
Point GetRelease(void){
	Point p1;
	while(1){
		if(TOUCH_STATUS_RX_MASK & TOUCH_STATUS){
			if(TOUCH_RX == 0x80){
				break;
			}
		}
	}

while(!(TOUCH_STATUS_RX_MASK & TOUCH_STATUS))
	;

	p1.x = TOUCH_RX;

	while(!(TOUCH_STATUS_RX_MASK & TOUCH_STATUS))
		;
	p1.x += TOUCH_RX << 7;

	while(!(TOUCH_STATUS_RX_MASK & TOUCH_STATUS))
		;
	p1.y = TOUCH_RX;

	while(!(TOUCH_STATUS_RX_MASK & TOUCH_STATUS))
		;
	p1.y += TOUCH_RX << 7;

	p1.x = (int) ((p1.x) / 4090.0 * (double)XRES);

	p1.y = (int) ((p1.y - 30) / 4070.0 * (double)YRES);
	return p1;
}

software/module1/unused.c
---
/*
 * unused.c
 *
 * Contains code that is unused so that the professor and TAs can
 * know about how much effort we put into this project.
 *
 *  Created on: 2016-02-22
 *      Author: Nathan
 */

/////////////////////////////////////////////
// Unused GPSPoint saving and loading code //
/////////////////////////////////////////////
//#define GPSPOINTSET_POINTSMAXLEN 1024
//
//typedef struct {
//	float x;
//	float y;
//} GPSPoint;
//
//typedef struct {
//	int tag;  // name of struct (used for ID purposes)
//	int points_len;  // number of GPSPoints in points
//	GPSPoint points[GPSPOINTSET_POINTSMAXLEN];
//} GPSPointSet;
//
//// GPSPoints that are read and written to the SD card are represented
//// by this schema:
////
//// x0,y0;x1,y1;x2,y2;
////
//// If you have an array [ { 1.0, 2.0 }, { 3.0, 4.0 }, { 5.0, 6.0 } ]
//// it would be represented as:
////
//// 1.0,2.0;3.0,4.0;5.0,6.0;
////
//// The precision of floats in the schema is unspecified.
//
//// Print file contents of a file corresponding to a given filename.
//void sd_card_print_contents(char *filename);
//
//// Attempt to write a GPSPoint value to the SD card.
//// Will overwrite data on the SD card.
//void sd_card_write_point(GPSPoint point, char *filename);
//
//// Attempt to write an array of GPSPoint values to the SD card.
//// The parameter `len` is the length of the points array.
//// Will overwrite data on the SD card.
//void sd_card_write_points(GPSPoint points[], unsigned long len, char *filename);
//
//
//// GPSPointSets that are read and written to the SD card are represented
//// by this schema:
////
//// {[tag0:x0,y0;x1,y1;][tag1:x2,y2;]}
////
//// If set 0 contains point 0 "1.0,2.0;" and point 1 "3.0,4.0;' and set
//// 1 contains point 2 "5.0,6.0;", it would be represented as:
////
//// "{[0:1.0,2.0;3.0,4.0;][1:5.0,6.0;]}"
////
//// The precision of floats in the schema is unspecified.
//
//// Attempt to write multiple GPSPointSets to the SD card.
//// The parameter `len` is the number of GPSPoints in sets[].
//// Will overwrite data on the SD card.
//// Precondition: len < GPSPOINTSET_POINTSMAXLEN
//void sd_card_write_GPSPointSets(GPSPointSet sets[], unsigned long len, char *filename);
//
//void sd_card_print_contents(char *filename)
//{
//	alt_up_sd_card_dev *device_reference = NULL;
//	int connected = 0;
//
//	printf("Opening SDCard\n");
//	if((device_reference = alt_up_sd_card_open_dev("/dev/Altera_UP_SD_Card_Avalon_Interface_0")) == NULL)
//	{
//		printf("SDCard Open FAILED\n");
//		return;
//	}
//	else {
//		printf("SDCard Open PASSED\n");
//	}
//
//	if (device_reference != NULL ) {
//		while (1) {
//			if ((connected == 0) && (alt_up_sd_card_is_Present())){
//				printf("Card connected.\n");
//				if (alt_up_sd_card_is_FAT16()) {
//					printf("FAT16 file system detected.\n");
//					short int file_handle;
//					if (alt_up_sd_card_is_Present() && alt_up_sd_card_is_FAT16()) {
//						file_handle = alt_up_sd_card_fopen(filename, false);
//						if (file_handle == -1) {
//							// File most likely does not exist, so attempt to create it
//							file_handle = alt_up_sd_card_fopen(filename, true);
//						}
//						switch (file_handle) {
//						case -1: {
//							printf("File NOT Opened (file_handle is -1)\n");
//							break;
//						}
//						case -2: {
//							printf("File NOT Opened (file_handle is -2)\n");
//							break;
//						}
//						default: {
//							printf("File Opened\n");
//							short int read = alt_up_sd_card_read(file_handle);
//							while (!(read < 0)) {
//								printf("%c", (char)read);
//								read = alt_up_sd_card_read(file_handle);
//							}
//							printf("\n");
//							printf("Closing file\n");
//							if (alt_up_sd_card_fclose(file_handle) == false) {
//								printf("WARNING: alt_up_sd_card_fclose was unsuccessful\n");
//							}
//							printf("Exiting sd_card_print_contents().\n");
//							return;
//						}
//						}
//					}
//				}
//				else {
//					printf("Unknown file system.\n");
//				}
//				connected = 1;
//				printf("Please disconnect the SD card.\n");
//			}
//			else if((connected == 1) && (alt_up_sd_card_is_Present() == false)){
//				printf("Card disconnected.\n");
//				printf("Exiting sd_card_print_contents().\n");
//				return;
//			}
//		}
//	}
//	else {
//		printf("Can't open device\n");
//	}
//}
//
//#define BUF_SIZE 100	// This should be able to fit a single-precision float
//
//void sd_card_write_point(GPSPoint point, char *filename) {
//	alt_up_sd_card_dev *device_reference = NULL;
//	int connected = 0;
//
//	printf("Opening SDCard\n");
//	if((device_reference = alt_up_sd_card_open_dev("/dev/Altera_UP_SD_Card_Avalon_Interface_0")) == NULL)
//	{
//		printf("SDCard Open FAILED\n");
//		return;
//	}
//	else {
//		printf("SDCard Open PASSED\n");
//	}
//
//	if (device_reference != NULL ) {
//		while (1) {
//			if ((connected == 0) && (alt_up_sd_card_is_Present())){
//				printf("Card connected.\n");
//				if (alt_up_sd_card_is_FAT16()) {
//					printf("FAT16 file system detected.\n");
//					short int file_handle;
//					if (alt_up_sd_card_is_Present() && alt_up_sd_card_is_FAT16()) {
//						file_handle = alt_up_sd_card_fopen(filename, false);
//						if (file_handle == -1) {
//							// File most likely does not exist, so attempt to create it
//							file_handle = alt_up_sd_card_fopen(filename, true);
//						}
//						switch (file_handle) {
//						case -1: {
//							printf("File NOT Opened (file_handle is -1)\n");
//							break;
//						}
//						case -2: {
//							printf("File NOT Opened (file_handle is -2)\n");
//							break;
//						}
//						default: {
//							printf("File Opened\n");
//
//							// Convert GPSPoint floats to strings
//							char x[BUF_SIZE] = "X";
//							char y[BUF_SIZE] = "Y";
//							snprintf(x, BUF_SIZE, "%f", point.x);
//							snprintf(y, BUF_SIZE, "%f", point.y);
//
//							// write to the SD card
//							while (1) {
//								int i;
//								for (i = 0; x[i] != '\0'; i++) {
//									if (alt_up_sd_card_write(file_handle, x[i]) == false) {
//										printf("Error writing to file...\n");
//										alt_up_sd_card_fclose(file_handle);
//										return;
//									}
//								}
//								if (alt_up_sd_card_write(file_handle, ',') == false) {
//									printf("Error writing to file...\n");
//									alt_up_sd_card_fclose(file_handle);
//									return;
//								}
//								for (i = 0; y[i] != '\0'; i++) {
//									if (alt_up_sd_card_write(file_handle, y[i]) == false) {
//										printf("Error writing to file...\n");
//										alt_up_sd_card_fclose(file_handle);
//										return;
//									}
//								}
//								if (alt_up_sd_card_write(file_handle, ';') == false) {
//									printf("Error writing to file...\n");
//									alt_up_sd_card_fclose(file_handle);
//									return;
//								}
//
//								printf("Successfully wrote to the SD card\n");
//								break;
//							}
//							if (alt_up_sd_card_fclose(file_handle) == false) {
//								printf("WARNING: alt_up_sd_card_fclose was unsuccessful\n");
//							}
//							printf("Exiting sd_card_write_points()\n");
//							return;
//						}
//						}
//					}
//				}
//				else {
//					printf("Unknown file system.\n");
//				}
//				connected = 1;
//				printf("Please disconnect the SD card.\n");
//			}
//			else if((connected == 1) && (alt_up_sd_card_is_Present() == false)){
//				printf("Card disconnected.\n");
//				printf("Exiting sd_card_write_points()\n");
//				return;
//			}
//		}
//	}
//	else {
//		printf("Can't open device\n");
//	}
//}
//
//#define WRITESTRLEN 2048
//
//void sd_card_write_points(GPSPoint points[], unsigned long len, char *filename)
//{
//	alt_up_sd_card_dev *device_reference = NULL;
//	int connected = 0;
//
//	printf("Opening SDCard\n");
//	if((device_reference = alt_up_sd_card_open_dev("/dev/Altera_UP_SD_Card_Avalon_Interface_0")) == NULL)
//	{
//		printf("SDCard Open FAILED\n");
//		return;
//	}
//	else {
//		printf("SDCard Open PASSED\n");
//	}
//
//	if (device_reference != NULL ) {
//		while (1) {
//			if ((connected == 0) && (alt_up_sd_card_is_Present())){
//				printf("Card connected.\n");
//				if (alt_up_sd_card_is_FAT16()) {
//					printf("FAT16 file system detected.\n");
//					short int file_handle;
//					if (alt_up_sd_card_is_Present() && alt_up_sd_card_is_FAT16()) {
//						file_handle = alt_up_sd_card_fopen(filename, false);
//						if (file_handle == -1) {
//							// File most likely does not exist, so attempt to create it
//							file_handle = alt_up_sd_card_fopen(filename, true);
//						}
//						switch (file_handle) {
//						case -1: {
//							printf("File NOT Opened (file_handle is -1)\n");
//							break;
//						}
//						case -2: {
//							printf("File NOT Opened (file_handle is -2)\n");
//							break;
//						}
//						default: {
//							printf("File Opened\n");
//
//							// write to a write_str buffer
//							char write_str[WRITESTRLEN] = "";
//							int i;
//							for (i = 0; i < len; i++) {
//								char x_buf[BUF_SIZE];
//								snprintf(x_buf, BUF_SIZE, "%f", points[i].x);
//								strcat(write_str, x_buf);
//
//								strcat(write_str, ",");
//
//								char y_buf[BUF_SIZE];
//								snprintf(y_buf, BUF_SIZE, "%f", points[i].y);
//								strcat(write_str, y_buf);
//
//								strcat(write_str, ";");
//							}
//							// write the buffer to the SD card
//							for (i = 0; write_str[i] != '\0'; i++) {
//								if (alt_up_sd_card_write(file_handle, write_str[i]) == false) {
//									printf("Error writing to file...\n");
//									alt_up_sd_card_fclose(file_handle);
//									return;
//								}
//							}
//
//							printf("Successfully wrote to the SD card\n");
//
//							if (alt_up_sd_card_fclose(file_handle) == false) {
//								printf("WARNING: alt_up_sd_card_fclose was unsuccessful\n");
//							}
//							printf("Exiting sd_card_write_points()\n");
//							return;
//						}
//						}
//					}
//				}
//				else {
//					printf("Unknown file system.\n");
//				}
//				connected = 1;
//				printf("Please disconnect the SD card.\n");
//			}
//			else if((connected == 1) && (alt_up_sd_card_is_Present() == false)){
//				printf("Card disconnected.\n");
//				printf("Exiting sd_card_write_points()\n");
//				return;
//			}
//		}
//	}
//	else {
//		printf("Can't open device\n");
//	}
//}
//
//void sd_card_write_GPSPointSets(GPSPointSet sets[], unsigned long len, char *filename)
//{
//	assert(len < GPSPOINTSET_POINTSMAXLEN);
//
//	alt_up_sd_card_dev *device_reference = NULL;
//	int connected = 0;
//
//	printf("Opening SDCard\n");
//	if((device_reference = alt_up_sd_card_open_dev("/dev/Altera_UP_SD_Card_Avalon_Interface_0")) == NULL)
//	{
//		printf("SDCard Open FAILED\n");
//		return;
//	}
//	else {
//		printf("SDCard Open PASSED\n");
//	}
//
//	if (device_reference != NULL ) {
//		while (1) {
//			if ((connected == 0) && (alt_up_sd_card_is_Present())){
//				printf("Card connected.\n");
//				if (alt_up_sd_card_is_FAT16()) {
//					printf("FAT16 file system detected.\n");
//					short int file_handle;
//					if (alt_up_sd_card_is_Present() && alt_up_sd_card_is_FAT16()) {
//						file_handle = alt_up_sd_card_fopen(filename, false);
//						if (file_handle == -1) {
//							// File most likely does not exist, so attempt to create it
//							file_handle = alt_up_sd_card_fopen(filename, true);
//						}
//						switch (file_handle) {
//						case -1: {
//							printf("File NOT Opened (file_handle is -1)\n");
//							break;
//						}
//						case -2: {
//							printf("File NOT Opened (file_handle is -2)\n");
//							break;
//						}
//						default: {
//							printf("File Opened\n");
//
//							// write to a write_str buffer
//							char write_str[WRITESTRLEN] = "";
//							strcat(write_str, "{");
//							int i;
//							for (i = 0; i < len; i++) {
//								strcat(write_str, "[");
//								char temp_tag[BUF_SIZE];
//								snprintf(temp_tag, BUF_SIZE, "%d", sets[i].tag);
//								strcat(write_str, temp_tag);
//								strcat(write_str, ":");
//								int j;
//								for (j = 0; j < sets[i].points_len; j++) {
//									char x_buf[BUF_SIZE];
//									snprintf(x_buf, BUF_SIZE, "%f", sets[i].points[j].x);
//									strcat(write_str, x_buf);
//
//									strcat(write_str, ",");
//
//									char y_buf[BUF_SIZE];
//									snprintf(y_buf, BUF_SIZE, "%f", sets[i].points[j].y);
//									strcat(write_str, y_buf);
//
//									strcat(write_str, ";");
//								}
//								strcat(write_str, "]");
//							}
//							strcat(write_str, "}");
//							// write the buffer to the SD card
//							for (i = 0; write_str[i] != '\0'; i++) {
//								if (alt_up_sd_card_write(file_handle, write_str[i]) == false) {
//									printf("Error writing to file...\n");
//									alt_up_sd_card_fclose(file_handle);
//									return;
//								}
//							}
//
//							printf("Successfully wrote to the SD card\n");
//
//							if (alt_up_sd_card_fclose(file_handle) == false) {
//								printf("WARNING: alt_up_sd_card_fclose was unsuccessful\n");
//							}
//							printf("Exiting sd_card_write_points()\n");
//							return;
//						}
//						}
//					}
//				}
//				else {
//					printf("Unknown file system.\n");
//				}
//				connected = 1;
//				printf("Please disconnect the SD card.\n");
//			}
//			else if((connected == 1) && (alt_up_sd_card_is_Present() == false)){
//				printf("Card disconnected.\n");
//				printf("Exiting sd_card_write_points()\n");
//				return;
//			}
//		}
//	}
//	else {
//		printf("Can't open device\n");
//	}
//}

